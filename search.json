[
  {
    "objectID": "posts/yearn-governance/index.html",
    "href": "posts/yearn-governance/index.html",
    "title": "Yearn governance explained: Proposals, $YFI token, and execution",
    "section": "",
    "text": "Anyone can discuss or propose ideas in the Yearn’s Discord, Twitter, Reddit, Pool of Ideas, Telegram, and Governance Forum. As proposals mature it becomes a structured vote in the Governance Forum where the YFI token is used as voting power.\nThe most common type of proposals in the forum are Yearn Improvement Proposals (YIPs) but there are other types covered in the current Yearn governance implementation (YIP-61):"
  },
  {
    "objectID": "posts/yearn-governance/index.html#governance-scope",
    "href": "posts/yearn-governance/index.html#governance-scope",
    "title": "Yearn governance explained: Proposals, $YFI token, and execution",
    "section": "Governance: Scope",
    "text": "Governance: Scope\nYIP-61 determines how Yearn governance currently works: yTeams have delegated authority from YFI holders to utilize limited powers autonomously. Holding YFI allows one to have control over how the power is distributed among teams, YFI gives exclusive voting power to pass or deny changes that shift power dynamics within the protocol such as:\n\nChange Multisig or yTeams Signers\nRatify yTeams\nSpend Treasury Funds\nSet Protocol Fees\nChange YFI contract"
  },
  {
    "objectID": "posts/yearn-governance/index.html#governance-proposal-template",
    "href": "posts/yearn-governance/index.html#governance-proposal-template",
    "title": "Yearn governance explained: Proposals, $YFI token, and execution",
    "section": "Governance: Proposal Template",
    "text": "Governance: Proposal Template\nAnyone is able to create a new proposal at Yearn Governance Forums:\n\n\n\nInterface to create a proposal at the forum\n\n\nAs established by YIP-55 here is a standard way to write proposals:\n\nSummary\nThe outcome of the proposed change, written in a non-technical and accessible manner\nStatus: not required but it helps everyone, one of the three below:\n\nDiscussion: This proposal is currently in the discussion phase. As per our voting rules outlined in YIP-55, it will be in discussion for at least 3 days with a non-binding forum poll to gauge sentiment before it can be assigned a YIP number and move to Snapshot for a binding vote\nVoting: This proposal is currently in the voting phase. Cast your vote on Snapshot. You can learn about our voting rules in YIP-55\nPassed: This proposal passed on April 25, 2021 at 7:00 UTC with 99.97% voting for\n\n\n\nAbstract\nA short (~200 words) description of the proposed change. Should clearly describe what happens if the proposal passes.\n\n\nMotivation\nThe current problem that made you write the change proposal\n\n\nSpecification\nA long description of how this proposal solves the problem, should describe how to implement\n\n\nPoll\nA voting dynamic that is built in the governance forum to gauge the community sentiment on the proposal, should be greater than 50%"
  },
  {
    "objectID": "posts/yearn-governance/index.html#governance-discussion",
    "href": "posts/yearn-governance/index.html#governance-discussion",
    "title": "Yearn governance explained: Proposals, $YFI token, and execution",
    "section": "Governance: Discussion",
    "text": "Governance: Discussion\nThere should be enough time (at least 3 days) for discussion so the proposal can be tackled from many angles by community members. Use discourse’s built-in Poll tool to gauge the community sentiment about the proposal before raising a formal vote, the poll should have at least 50% passing votes.\n\n\n\nExample poll\n\n\nDiscussions ideally should take as long as it takes to clarify what was proposed to the community. Talking to different stakeholders before proposing something is a good way to measure sentiment and helps you introduce complex ideas with better support right from the start. An example of a proposal with excellent discussion is YIP-57 which minted 6,666 YFI tokens beyond the 30,000 initial supply and had to align different types of stakeholders from DAO members to big YFI holders."
  },
  {
    "objectID": "posts/yearn-governance/index.html#governance-voting",
    "href": "posts/yearn-governance/index.html#governance-voting",
    "title": "Yearn governance explained: Proposals, $YFI token, and execution",
    "section": "Governance: Voting",
    "text": "Governance: Voting\nAfter the discussion step passed the proposal becomes a YIP (or maybe a YDP depending on its content) and will be put through the voting phase. To submit a vote at Yearn’s Snapshots Page you need to hold at least 1 $YFI or ask someone to do it for you, if the proposal is solid this won’t be a barrier. Communicate with a forum mod to get an official number for the new YIP!\nVoting power corresponds 1:1 to how much $YFI a voter has. So a wallet with 10 $YFI has 10x the voting power as someone with 1 $YFI.\nVoting takes at least 5 days and needs more than 50% passing votes, there is no quorum to be met as outlined by YIP-55: “quorum requirement might be difficult to quantify and could lead to time-consuming rallying of apathetic voters”\n\n\n\nHow it looks like to vote at snapshot.org\n\n\nHolding or staking YFI in the following places allows you to vote:\n\nYour wallet\nYFI yVault V2 (equivalent to holding the yvYFI token)\nBalancer YFI/WETH LP token\nUniswap YFI/WETH LP token\nSushiswap YFI/WETH LP token staked in MasterChef\nMakerDAO YFI collateral\nUnit Protocol YFI collateral\nBancor"
  },
  {
    "objectID": "posts/yearn-governance/index.html#governance-conclusion-execution",
    "href": "posts/yearn-governance/index.html#governance-conclusion-execution",
    "title": "Yearn governance explained: Proposals, $YFI token, and execution",
    "section": "Governance: Conclusion & Execution",
    "text": "Governance: Conclusion & Execution\nIf the voting has passed with over 50% votes Yearn DAO must execute it. The way Yearn DAO works is not like a top-down command & control company, so it won’t enforce or obligate a team or any individual to execute the proposal. The DAO will ensure that the correct incentives are set for the proposal to be executed (for example allocate treasure to pay for work done by contributors)\nRecently 2 YIPs were passed and are being executed by Yearn as I write this piece:\n\nYIP-65: Evolving YFI Tokenomics\nYIP-66: Streamlining contributor compensation"
  },
  {
    "objectID": "posts/yearn-governance/index.html#fair-launch-of-yfi",
    "href": "posts/yearn-governance/index.html#fair-launch-of-yfi",
    "title": "Yearn governance explained: Proposals, $YFI token, and execution",
    "section": "Fair launch of YFI",
    "text": "Fair launch of YFI\n\n\n\nTaken from one of Cronje’s posts\n\n\nAndre Cronje was the first builder of Yearn and what he sparked became a DAO with now over 200 active participants. This is only possible to exist as is today because Cronje gave away every inch of power he had over the protocol, and the way he did it was through YFI. Whoever used Yearn services and ecosystem in the early days received this power, and you can find information on how this process happened in these posts:\n\n**YFI **(Earning YFI is simple, provide liquidity to one of the platforms)\n**Earning YFI curve.fi/y **(Earn YFI by providing liquidity to curve)\n**YFI rewards pool** (Reward pool for burning YFI)\n**Pool #3 Meta Yield Governance **(Pool that rewarded many things including participating in governance)"
  },
  {
    "objectID": "posts/yearn-governance/index.html#additional-resources",
    "href": "posts/yearn-governance/index.html#additional-resources",
    "title": "Yearn governance explained: Proposals, $YFI token, and execution",
    "section": "Additional Resources",
    "text": "Additional Resources\nIf you are looking for inspiration to make a proposal you can take a look at the following YIPs which had extensive discussions and changed power dynamics within the protocol:\n\nYIP 32: Remove YFI burning\nYIP 36: System Rewards as Operational Capital\nYIP 41: Temporarily Empower Multisig\nYIP-51: Set Vault v2 fee structure\nYIP-52: Make Strategist Skin in Game Partner for Make Benefit of Glorious Brain of Yearn\nYIP-54: Formalize Operations Funding\nYIP-55: Formalize the YIP Process\nYIP-56: Buyback and Build\nYIP-57: Funding Yearn’s Future\nYIP-61: Governance 2.0\nYIP-65: Evolving YFI Tokenomics\nYIP-66: Streamlining contributor compensation\n\nProducer: Worms, *Reviewer: *Tracheopteryx"
  },
  {
    "objectID": "posts/yearn-governance/index.html#made-in-yearn.finance",
    "href": "posts/yearn-governance/index.html#made-in-yearn.finance",
    "title": "Yearn governance explained: Proposals, $YFI token, and execution",
    "section": "Made in yearn.finance",
    "text": "Made in yearn.finance"
  },
  {
    "objectID": "posts/rng-impurity/index.html",
    "href": "posts/rng-impurity/index.html",
    "title": "Isolating the impurity of randomness in card games",
    "section": "",
    "text": "Slay the Spire is awesome\nI’ve tried to add all the reference needed to lookup topics that I’m not sure everyone knows. If you feel that there is any section missing reference please let me know :)\nTip: use Ramda’s REPL to try out the examples. You don’t need to import Ramda there ;)"
  },
  {
    "objectID": "posts/rng-impurity/index.html#a-word-on-impurity",
    "href": "posts/rng-impurity/index.html#a-word-on-impurity",
    "title": "Isolating the impurity of randomness in card games",
    "section": "A word on impurity",
    "text": "A word on impurity\nRNGs are impure by nature. They are also at the heart of all card games, so learning how to separate the deck handling logic from your source of randomness will bring a better entropy management for your program (software entropy and not random entropy). We will see how to manipulate a card deck using a functional-oriented style, keeping in mind immutability, function purity, and proper side-effect handling."
  },
  {
    "objectID": "posts/rng-impurity/index.html#why-would-we-want-immutability",
    "href": "posts/rng-impurity/index.html#why-would-we-want-immutability",
    "title": "Isolating the impurity of randomness in card games",
    "section": "Why would we want immutability?",
    "text": "Why would we want immutability?\nThe focus of this article is not state management, but to answer the question above I need to scratch that surface.\nCard games have an asynchronous pace. Unlike a big part of games, you don’t actually need thousands of functions firing everywhere every 1/60 of a second. Like most board games, a card game can almost always be described as a reactive system. I don’t know if that term actually exists but it seems a nice fit since basically what you need to do is wait for the user to do something and only after that you respond reactively to what he did.\nTalking about reactive stuff, there has been massive fuzz about React over this last couple of years. It really is something amazing because it brought to the masses the concept of view = render(state) that translates into “the view is always the return of a renderer function that knows the state”, so everytime you want to change something in your view, you simply tell React to setState and it will inteligently update your view.\nThe concept above is really cool because it just fits like a glove to most card and board games but we all know that tech has its trade-offs. When you use React-like stuff you have to be very careful to not break some basic laws, and one of them is immutability. You are not allowed to mutate the state, you can only dispatch the new state you want your view to have, and this calls for a bit more complicated state management (using stuff like Redux when your state gets harder to manage).\nDo note that this laws only exist because Javascript has methods that mutates stuff. This wouldn’t be a problem in a language designed with that in mind such as ELM or ReasonML\nWhen using a predictable state manager like Redux you will see that you will always want to track down what variables were used on a state change, that way you can always rebuild your state from the events and have a reliable source of bug tracking. So, let’s see how to manipulate a deck of cards favouring a functional programming style that helps us deal better with this immutable object changes.\nOur goal here is to facilitate the use of event-sourcing in your application, so you can always replay events to obtain the current state, this also brings nice debugability for free. You will always be able to reproduce any game that your users played since you can track down every state change, and this also opens up a lot of space for gathering intel on balancing out stuff since you have all the data you need by default."
  },
  {
    "objectID": "posts/rng-impurity/index.html#what-is-a-deck-of-cards-what-is-a-card",
    "href": "posts/rng-impurity/index.html#what-is-a-deck-of-cards-what-is-a-card",
    "title": "Isolating the impurity of randomness in card games",
    "section": "What is a deck of cards? What is a card?",
    "text": "What is a deck of cards? What is a card?\nAny array can be a deck. We will essentially learn a bunch of useful array methods that you can use for designing card-based games such as Magic: The Gathering, Slay the Spire, Solitaire, Poker, or whatever else.\nSince a deck is any array, then a card is any element in the root level of the deck array. We will talk about why a card should probably be an object later on."
  },
  {
    "objectID": "posts/rng-impurity/index.html#drawing-a-card-from-the-deck",
    "href": "posts/rng-impurity/index.html#drawing-a-card-from-the-deck",
    "title": "Isolating the impurity of randomness in card games",
    "section": "Drawing a card from the deck",
    "text": "Drawing a card from the deck\nWhen drawing a card we want 2 things:\n\nWe want to know what card we drew\nWe want the new deck without the drawn card\n\nOur draw function must respect both rules so lets see how to build this. First lets start with the deck. I suggest you to create your own deck ;)\n\nSo now let’s get the card and the remaining deck:\n\nIf you dislike Ramda or frameworks you can always write your own implementation. For sanity reasons I will be doing all examples with minimal Ramda usage, but in real life cases I strongly suggest you use it as much as you can since it drastically diminishes the amount of code you have to write (and test, and maintain).\n\nIf you noticed, this kinda ruins the possibility of having elements in your array that are not unique. For example, running without([1], [1, 2, 1]) would destroy your game because it removes both 1s from the array.\nWhat I can say about this is that it’s highly unlikely that in a game you will use anything other than an object to represent cards. All other data structures seems unfit for this purpose and I recommend you always use objects to represent cards.\nWe know how to draw a card from the top of the deck, but what if we wanted to do it from the bottom? Or worse, what if we want a random card? Lets start by separating concerns. We will make a generic draw function that doesn’t know how to pick a card, it only knows how to respect the 2 rules we set to card drawing:\n\n***Check out the drawing cards interactive example*** &gt; # Hint for Ramda’s REPL: click “tidy” in the output tab for pretty results\nSo now our example of drawing the top card becomes this:\n\nAnd if we want to draw it from the bottom:\n\nOne important thing to notice in this implementation: We have delegated the dirtiness of deciding which card to draw to a function called ‘cardPicker’. Now our draw function can’t be responsible for unexpected behavior that comes with the burden of dealing with randomness, and this means we can now draw a random card from the deck like this:\n\nrandomElement does the dirty job of generating a random number, so we successfully removed this burden from the draw! You can now write some tests to your draw function ;)\nBefore we move on, there is one last thing we can do to make our draw function even better. There is a reason why the cardPicker argument comes before the deck and it’s because I used a data-last approach for it so we can benefit from something called “partial application”. The data to be operated on is supplied last so we can do some nifty stuff like this:\nFirst we import ramda’s curry method to make our draw function accept partial application\n\nNow we can use our new powers to bring in semantic delights to our code:\n\nCheck out the drawing cards using partial application interactive example\nHave fun experimenting around with the draw, I’m sure there are many interesting things to explore with just this function :D"
  },
  {
    "objectID": "posts/rng-impurity/index.html#adding-a-card-to-the-deck",
    "href": "posts/rng-impurity/index.html#adding-a-card-to-the-deck",
    "title": "Isolating the impurity of randomness in card games",
    "section": "Adding a card to the deck",
    "text": "Adding a card to the deck\nAfter all that over engineering for drawing, adding something to an array is kinda boring. We can just use common array methods for that:\n\nCheck out the adding cards interactive example"
  },
  {
    "objectID": "posts/rng-impurity/index.html#shuffling-the-deck-and-seeded-values",
    "href": "posts/rng-impurity/index.html#shuffling-the-deck-and-seeded-values",
    "title": "Isolating the impurity of randomness in card games",
    "section": "Shuffling the deck and seeded values",
    "text": "Shuffling the deck and seeded values\nThis is probably the most difficult part to try to remove impurity. Shuffling the deck is heavily RNG-based, so I’m gonna take a different approach here and use a seeded random. This same technique could be used to improve our draw function, so after this section I recommend you try to make your draw function also a seeded random number.\nWhat is a seeded random? Well, I’m calling it random but that’s a lie, it’s not random at all, we are just gonna use a complicated operation that makes it hard to predict the output of this function. By doing so we are gonna respect the function purity laws that the same inputs should give the same outputs.\nLet’s make a really basic seeded random value function:\n\nCool. This function will always return a number from 0 to 1 given a seed number (which is what you will make actually random in your implementation). Lets then make a shuffle function that uses a seed to shuffle an array:\n\nWe can now shuffle or deck:\n\nCheck out the shuffle interactive example\nEverytime you call shuffle with the same seed and deck you will have the same output.\nBut there is still a catch: how do we make our seed random?\nWell, that’s totally up to you. Now that the shuffle function is pure and it’s not its responsibility to know about randomness anymore that burden is up to you.\nI recommend you browse random.org for more information on randomness and for a good random API. You can also check out the dice implementation I did with a friend of mine for a Telegram’s MMORPG:\n\nDice module\nAlso, check this test for the dice module usage\n\nI guess the point of the article is fulfilled by now and I want to know if this content was relevant to you. Please leave a comment sharing your thoughts, thanks for reading!\nI recently made a Twitter so if you want to chat around just hit me up there @MarcoWorms"
  },
  {
    "objectID": "posts/managing-web3-communities/index.html",
    "href": "posts/managing-web3-communities/index.html",
    "title": "Generating pixel art NFTs and link to my web generators with sources",
    "section": "",
    "text": "This is a light framework to help artists and coders deal with the Community Management and Social Media aspects of their project."
  },
  {
    "objectID": "posts/managing-web3-communities/index.html#managing-web3-communities-and-social-media",
    "href": "posts/managing-web3-communities/index.html#managing-web3-communities-and-social-media",
    "title": "Generating pixel art NFTs and link to my web generators with sources",
    "section": "",
    "text": "This is a light framework to help artists and coders deal with the Community Management and Social Media aspects of their project."
  },
  {
    "objectID": "posts/managing-web3-communities/index.html#targeting-content",
    "href": "posts/managing-web3-communities/index.html#targeting-content",
    "title": "Generating pixel art NFTs and link to my web generators with sources",
    "section": "Targeting Content",
    "text": "Targeting Content\n\nWhen you try to build content it’s much easier if you know who you are building for. We are gonna paint here 2 targets to facilitate your process of building content for any social platform:\n\nLet’s picture your entire digital presence in 2 spheres:\nThe Inner Circle is where you can talk closely to your community, people here have closer access to the development team. For web3 communities, this is normally a Discord server\nThe Outer Circle is where you have both people that already know your project and a huge pool of complete strangers. For web3 communities, this is normally a Twitter (+ any other social media) profiles\nEverything you do is easier to release if aim to one of these targets with your intentions. You should always try to have at least 1 initiative running for each of these targets, this ensures you are looking closely at both Onboarding (the flow of people entering) ****and Retention (the % of people that sticks for the long run)\nNow that we know our targets we need to know our tools"
  },
  {
    "objectID": "posts/managing-web3-communities/index.html#communication-expectations-people-and-trust",
    "href": "posts/managing-web3-communities/index.html#communication-expectations-people-and-trust",
    "title": "Generating pixel art NFTs and link to my web generators with sources",
    "section": "Communication, Expectations, People, and Trust",
    "text": "Communication, Expectations, People, and Trust\nCommunication is your main tool, and you’ll have to use everything you can (text, voice, image, video) to help you get your idea passed through the internet to another person\nExpectations are what you craft with this tool (also, you are not 100% in control here, but that’s just life), expectations are easily influenced by the people’s Trust in your team and project\nPeople are the ones that consume your products, create expectations, and build trust as they do it, they sometimes read what you post (you can’t expect them to read 100% of what you post).\nYou can never forget you are building for People, so always listen to what they have to say (which you can always politely expose a different vision and you don’t have to agree with them)\nTrust is what helps you get information across in the good and the bad times, if people trust you it’s easier for you to align expectations with less communication needed in the process.\nYour job with every content you post on social media is to use Communication to constantly help People get their Expectations straight about what you want to deliver, constantly building and maitaining the overall Trust they have both in your team and your delivery capacity. &gt; You won’t get 100% expectations of 100% people straight, but you can show your community that you are constantly putting authentic effort into communication, and every time you do this the smart people in your community will have more and more reasons to trust you.\nSo let’s put this together with the targeting content and build a framework you can follow:"
  },
  {
    "objectID": "posts/managing-web3-communities/index.html#framework-for-web3-community-management-using-twitter-discord",
    "href": "posts/managing-web3-communities/index.html#framework-for-web3-community-management-using-twitter-discord",
    "title": "Generating pixel art NFTs and link to my web generators with sources",
    "section": "Framework for Web3 community management using Twitter + Discord",
    "text": "Framework for Web3 community management using Twitter + Discord\n\nPlease don’t copy-paste this and expect to work, this is a simple implementation of the above ideas, I always preach against copy-pasting frameworks, the reason I built this one is to try to help people envision that dealing with the social media aspect can be something contained and even fun.\n\n1Write down your project’s vision so everyone in your team is aligned\nFor example, our Fantom Kittens community is about creating an open environment for people that want to learn more about Web3 so they can feel comfortable in starting to build their things. This means our content will never directly disincentivize people from building in web3 or joining our community for free.\nThe more you polish your vision the easier it is for you to craft content to any target.\n2Every day your team has to be active in The Inner Circle\n\n\n\ngm!\n\n\n“Every Day” is kinda hardcore, but the more active your team as an entity is in your inner circle the more trust you’ll build with the people you have there.\nBut just try to be there even if it’s for 5 minutes! Read what’s going on, reply to some people, just interact with them as you would on a normal interaction with a friend of a friend\nThe “gm” channels you see in many Web3 communities are a good incentive for people to go there every day, say “good morning” and check out what’s happening in your community!\n3Every day you should do at least 1 quality post for The Outer Circle\n(The more creative and the more you know about what happens in the Outter Circle the better the quality of your posts will be, memes are your friends)\nMaintaining a constant flow of information to the outer world about your community and what you are building. When you do this you guarantee that anyone that gets to know you today will have fresh content to consume, will start to see you are consistent and consistency helps build the trust needed to get new people to take more time to look into your project and onboard to the inner circle\nAlso, remember to efficiently replicate information from Twitter to Discord and vice-versa so the maximum amount of people see it when it’s released. You can use TweetShift to help you replicate any Twitter account at a discord channel.\nThe images below have an example of an initiative that we made that helps us generate quality content, you’ll probably want to have some initiatives like these running in parallel so you have different content types to post on alternating days\n\n\n\nIn Fantom Kittens we started to make special kittens molded to some people that we like and send them publicly via Twitter\n\n\n\n\n\nIn this case, we even got a cute reply from a person we admire a lot ❤\n\n\n4It’s nice to always have events running or planned for The Inner Circle and The Outer Circle (Inner events may be harder to run and Outer events normally already please the Inner people if they can also participate, so starting with Outer events is easier especially when you don’t have many people in your Inner)\n\n\n\nThe Fantom Kittens Shitcoin Festival is an example of an event that embraces the Outer circle and also the Inner one\n\n\n5Everything you have to repeatedly answer start to build into a “Readme” discord channel, you can later turn this into a “Website” (We did exactly this with fakeworms.studio)\n\n6Your Twitter Profile information is seen by many people in the Outer circle as the first contact with your community.\nTry to have good condensed information for first-timers there:\n\n\n\nThere are tons of info here: Old collection, New collection, Who we are, Where we are, How to join us, our “Latest product”, and our full website with more information on all of this"
  },
  {
    "objectID": "posts/managing-web3-communities/index.html#closing-thoughts",
    "href": "posts/managing-web3-communities/index.html#closing-thoughts",
    "title": "Generating pixel art NFTs and link to my web generators with sources",
    "section": "Closing Thoughts",
    "text": "Closing Thoughts\nI don’t want any of this to feel like a closed model, I saw people demanding this type of content and this is my first attempt at building it, if you have any feedback you can reach me out on Twitter or in our community Discord chats!\nDiscord: discord.gg/fantom-kittens\nTwitter: https://twitter.com/FakewormsStudio\nWebsite: https://fakeworms.studio/"
  },
  {
    "objectID": "posts/generate-images/index.html",
    "href": "posts/generate-images/index.html",
    "title": "Generate images with Open Source AI tools",
    "section": "",
    "text": "RPG: Random Pixels Generator is an NFT collection that I’m building, it’s licensed under CC0 which means that “No Rights Reserved” so anyone can do whatever they want with the images since whoever owns the token doesn’t own any special rights to the image’s usage. At the moment you can follow this Twitter thread to see all spoiled images.\nRandom Pixels Generator ****is inspired by MMORPG and Sci-Fi worlds, and the process of generating each part of this universe is fun and chaotic. This article will register how I generate the images for the collection, so you can do it too and make your own AI visual things! Let’s hop in the magic portal of open source AI tooling then:\n\n\n\nMagic Portal (from the RPG collection)\n\n\nThe library we’ll use is called Pixray:\n\nPixray Github repository: https://github.com/pixray/pixray\nPixray documentation: https://dazhizhong.gitbook.io/pixray-docs/\n\nThe first thing that it’s important for commercial usage is checking the license of the project. If we check Pixray LICENSE we’ll see that different AI drawers have different licenses. For the RPG collection, I chose the VQGAN+Clip drawer which is licensed under MIT, so we are good to go!\nThe process of generating images with this library works like this:\nSetup the AI engine configurations, the most important are:\n\nInitial image (can be either a .jpg or the engine itself can generate random noise)\nFinal image size\nA word or a phrase\nMaximum engine iterations\n\nThe AI engine will start with an initial image and every iteration it will attempt to transform the image into a word or phrase. The AI model was trained with a google images database in order to achieve that. When it’s done you’ll be able to save the final image as well as every iteration frame: here is what 420 frames looks like over 15 seconds:\n\n\n\nSpectral Warlock\n\n\nLet’s get to practice then and do it yourself. First, the bad news: if you are gonna use the same method as I do, which uses Google Colab, you are gonna have to pay at least 10 U$ monthly to have access to their cloud servers since in all my attempts to run it with the free version it didn’t work.\nIf you know your way around things you can host a Google Colab local runtime which eliminates the above cost. I personally couldn’t set it up on my Windows PC, but it’s possible with WSL (Windows Subsystem for Linux).\nI will first explore the Pixray default examples to then present you with the script I use for RPG. Unfortunately, the latest version examples are all broken here, so I’ll use the example that was available when I first tried the tool, it works perfectly! Here is the link for the example:\n\n\n\nhttps://colab.research.google.com/github/dribnet/clipit/blob/master/demos/Start_Here.ipynb#scrollTo=qQOvOhnKQ-Tu\n\n\nThe way that Colab works is that you have blocks of code that you can run separately, but they affect a global scope and folders that you can access in the left menu. In order to run the AI engine, we must first execute the block of code that setups and installs Pixray on a new and temporary machine that will be used for your session.\nGo ahead and run the setup block clicking in the “run” button:\n\nIt will take a couple of minutes to download and install all dependencies.\nAfter that’s done you can start generating images! To run the initial example, scroll down to the second block of code, change “prompts” to the phrase you want to see the AI drawing! Press the “run” button for the second block of code and it will start the process:\n\nYou’ll see the iterations get started and going below the code! Let it finish and compare it to the one that I just generated here in this example:\n\n\n\nGenerating… (You can find the final output in the left sidebar as output.png)\n\n\n\n\n\noutput.png\n\n\nHere is an example of a matrix of prompts and what image is generated when you sum the column + row phrases:\n\n\n\nHow phrases affect the AI engine\n\n\nYou can click “Show Code” in the second block to see the code and add more engine parameters that you find in the Pixray documentation:\n\nhttps://dazhizhong.gitbook.io/pixray-docs/\n\n\n\n\nAdvanced feature if you are not a developer: adding more settings from the documentation\n\n\nNow that I showed you the basics, let’s move to the Colab that I tweaked in order to produce the RPG collection. I tried exposing as many useful parameters as possible, and also added a way to input prompt matrixes so you can make compositions like the one I showed previously with 16 images.\nHere is the link to my AI playground, fork it and have fun:\n\nhttps://colab.research.google.com/drive/14qk1_eP6AhcDMn0CJVoS5tbbZMdfNAlQ#scrollTo=XziodsCqVC2A\n\nTo setup and run you do the same as in the other example, just run the Setup code block and you’ll be able to run the generation code block:\n\nI’d like to show you how to use the prompts:\n\n“prompts” work like in the first example, but there is a special property here: if you separate phrases by comma you will instruct the AI to generate 2 separate images. this way you can queue a lot of phrases and the AI generate them all, you find all .pngs with the same name as the prompt used in the folders where you previously found “output.png”\nand if you do this:\n\nYou will have EXACTLY the same prompts as the first example. So I opened space for you to multiply prompts 3 times, I rarely use both prefix and posfix at the same time, I normally use just one, they have the same effect one is just before and the other is after. If you use both like this:\n\n\n\n“ prompt phrase ” has space before and after in this case\n\n\nyou would generate all these images:\n\na prompt phrase 1.png\nb prompt phrase 1.png\nc prompt phrase 1.png\na prompt phrase 2.png\nb prompt phrase 2.png\nc prompt phrase 2.png\na prompt phrase 3.png\nb prompt phrase 3.png\nc prompt phrase 3.png\n\nSo you can see how you can quickly scale the queue size with only a few inputs by using commas and the pre/posfixes.\nI think all other properties are documented in the file itself, I recommend you fiddle around a lot with them and also with the code, there are no limits to what you can explore here!\n\n\n\nall parameters I exposed on my playground around Pixray\n\n\nIf you enjoyed this guide or the RPG collection follow me at Twitter to keep updated on the collection release! I always like to share what I learn when exploring crypto and I often write about it, so I hope we see each other again!"
  },
  {
    "objectID": "posts/pixel-art-generator-for-nfts/index.html",
    "href": "posts/pixel-art-generator-for-nfts/index.html",
    "title": "Generating pixel art NFTs and link to my web generators with sources",
    "section": "",
    "text": "This logo was made by a friend of mine and evolved by another :)\nWhen I learned about NFTs a couple of weeks ago and the possibilities of what can be done I quickly started tinkering and fiddling with the available tools for publishing and trading NFTs like opensea.io\nAfter publishing 2 full collections on OpenSea (Wormy Worms and Bit Dancers) and starting a third one on PaintSwap (Fantom Kittens) I’ve learned some lessons about the generation process and I want to register it in this post"
  },
  {
    "objectID": "posts/pixel-art-generator-for-nfts/index.html#wormy-worms",
    "href": "posts/pixel-art-generator-for-nfts/index.html#wormy-worms",
    "title": "Generating pixel art NFTs and link to my web generators with sources",
    "section": "Wormy Worms",
    "text": "Wormy Worms\n\n\n\nWormy Worms #9\n\n\nClick here to fiddle with the full generator. Press SPACE to generate a new worm.\nLink to construct.net source file (MIT feel free to use)\nThis was my first collection, I simply used my current “game studio” logo, created eyes and mouth randomly, fixed the same color for them +the outline + the frame, and the other 2 colors are randomized along with a random background and frame.\nThis generator made some really cool color combinations, but sometimes the combinations were really bad when 2 colors are very similar or when the 3 colors are similar. I think because the worm outline is so expressive and simple the random background pattern choice was a good one and did not interfere with the worm image (a choice that in Fantom Kittens was revised due to it’s increased outline complexity and lower pixel density)"
  },
  {
    "objectID": "posts/pixel-art-generator-for-nfts/index.html#bit-dancers",
    "href": "posts/pixel-art-generator-for-nfts/index.html#bit-dancers",
    "title": "Generating pixel art NFTs and link to my web generators with sources",
    "section": "Bit Dancers",
    "text": "Bit Dancers\n\n\n\nBit Dancers #1\n\n\nClick here to fiddle with the full generator. Press SPACE to randomize poses and colors and C to randomize poses only.\nLink to construct.net source file (MIT feel free to use)\nFor my second collection, I really wanted to make something that moves. I didn’t want to dive into complex moving patterns so I stuck with generating random frames, but the pixels are so close to each other that it makes it feels like a movement rather than random. I really like this effect so I chose to frame 4 dancers in each image in order to better explore what comes out of these movements and make each individual image feel like an actual party instead of a crazy solo dancer :D\nAnother thing I’ve learned was that since I don’t have an outline for the dancers in this case the background couldn’t be bright so it doesn’t compete with the dancer, but I really tried to add some kind of party light patterns in the background in order to make the party feel more alive"
  },
  {
    "objectID": "posts/pixel-art-generator-for-nfts/index.html#fantom-kittens",
    "href": "posts/pixel-art-generator-for-nfts/index.html#fantom-kittens",
    "title": "Generating pixel art NFTs and link to my web generators with sources",
    "section": "Fantom Kittens",
    "text": "Fantom Kittens\n\n\n\nFantom Kitten #1\n\n\nThis collection is still being published and I’m using a really recent NFT platform called PaintSwap, it uses a cheap ethereum alternative that I like that’s called Fantom (FTM). I’ll also release it on Artionwhenever it opens since it also uses the Fantom chain.\n\n\n\nAll Fantom Kittens at PaintSwap\n\n\nSince I’m (knowingly) using an early-stage platform and I didn’t craft the NFT contracts by coding (I used their frontend) this collection is still not aggregated and now I’ll have to wait for the collection feature to be implemented in this front, and that was a huge lesson here for me: for the next collection, I’ll be more careful with the minting process and probably use something like OpenZeppelin Contracts Wizard.\nOne key take from this collection was the ability to constrain the pieces in a way that the generator now only generates cool stuff. Unlike Wormy Worms where sometimes the contrast is bad, here I’ve learned better how to deal with the color constraints in order to preserve the fantom-cat-like image.\nThis collection is monotone and with a solid background because this was a simple way for me to deal with most of the background contrast issues, the background was making the cat almost unreadable sometimes and now all cats generated are expressive and easily readable.\nSince I’m still releasing this collection I’ll keep the generator to myself for now :D it has many accessories and expressions I’d like to publish when they feel really polished.\nUPDATE: I’ve teamed up with a friend and together we’ve launched the Fantom Kittens collection (already liked in the images above). Check it out at https://kittens.fakeworms.studio/ !!!"
  },
  {
    "objectID": "posts/pixel-art-generator-for-nfts/index.html#to-the-future",
    "href": "posts/pixel-art-generator-for-nfts/index.html#to-the-future",
    "title": "Generating pixel art NFTs and link to my web generators with sources",
    "section": "To the future!",
    "text": "To the future!\nI’ve just scratched the surface of what’s possible with NFTs. I’ll learn more about the minting process and work on a collection where I can publish a gamified minting frontend and better understand this flow. I’ll also have to do some deeper research on how to code inside this web3. When I’m more proficient with solidity and the whole smart contracts environment I’d really like to start building games that use NFTs as artifacts to generate a player-oriented economy. Who knows? This web3 environment has so many unexplored grounds that I don’t really know what I might come up with next ;)"
  },
  {
    "objectID": "posts/self-hosting/index.html",
    "href": "posts/self-hosting/index.html",
    "title": "Self-Hosting Web3 Services",
    "section": "",
    "text": "Web3 has brought a new way to communicate with applications: apps are no longer hosted by centralized server providers but rather on blockchains, which are decentralized systems. Apps built on top of decentralized foundations are resilient to downtime and censorship, but there is an issue: serving the app interface to the users using the web browser often relies on centralized entities.\nIn this article we’ll learn how to self-host app interfaces for core crypto and Yearn services, so if official websites are down by any reason you can actually serve the website for yourself since the blockchain is never down!"
  },
  {
    "objectID": "posts/self-hosting/index.html#back-end-front-end-web3",
    "href": "posts/self-hosting/index.html#back-end-front-end-web3",
    "title": "Self-Hosting Web3 Services",
    "section": "Back-end, Front-end, Web3!",
    "text": "Back-end, Front-end, Web3!\nA quick intro to these concepts:\n\nFront-end is the name given to the portion of the application that is seen by the user, like a website or a mobile app.\nBack-end is the name given to the portion of the application that is not seen by the user. Many front-end actions rely on back-end to process.\n\nIn Web3 the blockchain manages to decentralize the back-end, but the front-end will still be served to the user using the default centralized method:\n\nUser requests browser to go to a page (example http://yearn.finance)\nBrowser requests DNS for the IP of this address (13.227.124.73)\nBrowser requests the files for the IP\n\nAnd if any of these two happens:\nDNS doesn’t resolve your domain to an IP address or IP address doesn’t serve you the front-end files\nYou won’t be able to see the front-end in order to click stuff and communicate with the back-end. In order to be able to use Web3 services without these concerns you can self-host the front-end and workaround both the “DNS resolution” and the “IP-not-online” problem at the same time!"
  },
  {
    "objectID": "posts/self-hosting/index.html#why-self-hosting",
    "href": "posts/self-hosting/index.html#why-self-hosting",
    "title": "Self-Hosting Web3 Services",
    "section": "Why Self-Hosting?",
    "text": "Why Self-Hosting?\nSelf-hosting a website in web3 means the front-end will work even when the default front-end provider is down. This cuts many middlemen that exist in the middle of the way of your machine reaching the front-end files! It’s a win/win relationship for the individual and the service that if you know how to do it you can back up the services that are essential to you:\n\nThe individual gains more resiliency accessing the service even when conditions to reach the front-end are bad\nThe server that delivers front-end files receives fewer requests, which helps it not get congested\nThe local version of the app will be frozen in a specific version. If this version works well for the individual it’s great to have a backup so if the live front-end breaks any feature you can still access the working version\n\nIn order to self-host a service, we’ll have to go through the developer documentation of how to download, set up, and run a local environment for each app.\nAfter running it locally, instead of accessing the default website URL in the browser, we will instead use something like “localhost:application” and it will work just fine! The “application” is a number that often defaults to 3000"
  },
  {
    "objectID": "posts/self-hosting/index.html#points-to-pay-attention-before-starting",
    "href": "posts/self-hosting/index.html#points-to-pay-attention-before-starting",
    "title": "Self-Hosting Web3 Services",
    "section": "Points to pay attention before starting",
    "text": "Points to pay attention before starting\nTo Windows users: Depending on the service it might be easier to use Linux instead of Windows, but if you have windows don’t worry, many services work fine out-of-the-box, and for the ones that don’t you can use WSL (Windows Subsystem for Linux). A Virtual Machine is also a good alternative, you can install a common Linux distribution such as Ubuntu or Debian which often has many resources to get around errors. If you have unexpected errors on Windows it’s recommended to try running on Mac/Linux instead.\nTo Mac/Linux users: If any command show unexpected errors try running them using the keyword sudo before, like sudo command, this forces the command to be run as administrator and sometimes your default permissions are not the same as the admin ones.\nOn unexpected errors: Read carefully through the repository readme! If nothing works, Google is your best friend.\nIf everything went correct but on-chain transactions fail: There is a file called .env used by projects to configure default keys. There you can find places to add project keys for services like Infura and The Graph, some of the apps might require you to use your own keys, in order to grab a key you have to create an account at the service website!\nAfter running a service in order to run it again: You can skip any git clone and yarn install and other key configuration steps, you usually just have to cd (change directory) into the project’s folder again and run yarn start\nAfter running a service in order to run another: You’ll have to either close the terminal window OR shutdown the execution yourself: to do this use “Ctrl+C” and you can exit the project folder with the command cd .."
  },
  {
    "objectID": "posts/self-hosting/index.html#lets-start-then",
    "href": "posts/self-hosting/index.html#lets-start-then",
    "title": "Self-Hosting Web3 Services",
    "section": "Let’s start then!",
    "text": "Let’s start then!\n\nRequirements\n\nInstall **Node.js**\nInstall **git**\nType npm install –global yarn in a terminal window to set up Yarn (used to install the dependencies for most projects)\n\n\n\nHow to open a terminal window\n\nWindows: Windows + R -&gt; type cmd -&gt; Enter\nMac: CMD + Space -&gt; Terminal"
  },
  {
    "objectID": "posts/self-hosting/index.html#self-hosting-yearn-website",
    "href": "posts/self-hosting/index.html#self-hosting-yearn-website",
    "title": "Self-Hosting Web3 Services",
    "section": "Self-Hosting Yearn Website",
    "text": "Self-Hosting Yearn Website\n\nRepository: https://github.com/yearn/yearn-finance-v3\n\nOpen terminal\ngit clone https://github.com/yearn/yearn-finance-v3\ncd yearn-finance-v3\nyarn install\nNot-Windows: yarn dev / Windows: yarn dev-win\nBrowser should automatically open a tab at localhost:3000\n\n\n\n\nhttps://yearn.finance"
  },
  {
    "objectID": "posts/self-hosting/index.html#self-hosting-yearn-blog",
    "href": "posts/self-hosting/index.html#self-hosting-yearn-blog",
    "title": "Self-Hosting Web3 Services",
    "section": "Self-Hosting Yearn Blog",
    "text": "Self-Hosting Yearn Blog\n\nRepository: https://github.com/yearn/yearn-comms\n\nOpen terminal\ngit clone https://github.com/yearn/yearn-comms\ncd yearn-comms\nyarn install\nyarn dev\nOpen the browser and navigate to localhost:3000\n\n\n\n\nhttps://blog.yearn.finance"
  },
  {
    "objectID": "posts/self-hosting/index.html#self-hosting-yearn-dev-docs",
    "href": "posts/self-hosting/index.html#self-hosting-yearn-dev-docs",
    "title": "Self-Hosting Web3 Services",
    "section": "Self-Hosting Yearn Dev Docs",
    "text": "Self-Hosting Yearn Dev Docs\n\nRepository: https://github.com/yearn/yearn-devdocs\n\nOpen terminal\ngit clone https://github.com/yearn/yearn-devdocs\ncd yearn-devdocs\nyarn install\nyarn start\nBrowser should automatically open a tab at localhost:3000\n\n\n\n\nhttps://docs.yearn.finance"
  },
  {
    "objectID": "posts/self-hosting/index.html#self-hosting-yearn-vaults-descriptions",
    "href": "posts/self-hosting/index.html#self-hosting-yearn-vaults-descriptions",
    "title": "Self-Hosting Web3 Services",
    "section": "Self-Hosting Yearn Vaults Descriptions",
    "text": "Self-Hosting Yearn Vaults Descriptions\n\nRepository: https://github.com/yearn/yearn-vaults-descriptions\n\nOpen terminal\ngit clone https://github.com/yearn/yearn-vaults-descriptions\ncd yearn-vaults-descriptions\nyarn install\nyarn dev\nOpen the browser and navigate to localhost:3000\n\n\n\n\nhttps://vaults.yearn.finance"
  },
  {
    "objectID": "posts/self-hosting/index.html#self-hosting-yearn-mini",
    "href": "posts/self-hosting/index.html#self-hosting-yearn-mini",
    "title": "Self-Hosting Web3 Services",
    "section": "Self-Hosting Yearn Mini",
    "text": "Self-Hosting Yearn Mini\n\nRepository: https://github.com/DarkGhost7/yearn-mini\n\nOpen terminal\ngit clone https://github.com/DarkGhost7/yearn-mini\ncd yearn-mini\nyarn install\nyarn start\nBrowser should automatically open a tab at localhost:3000\n\n\n\n\nhttps://yearn-mini.vercel.app"
  },
  {
    "objectID": "posts/self-hosting/index.html#self-hosting-yearn-watch",
    "href": "posts/self-hosting/index.html#self-hosting-yearn-watch",
    "title": "Self-Hosting Web3 Services",
    "section": "Self-Hosting Yearn Watch",
    "text": "Self-Hosting Yearn Watch\nOnly works for Fantom because The Graph Ethereum development key is not public\n\nRepository: https://github.com/yearn/yearn-watch\n\nOpen terminal\ngit clone https://github.com/yearn/yearn-watch\ncd yearn-watch\nyarn install\ncp .env.example .env\nAdd Infura, The Graph, and Alchemy keys to .env\nyarn start\nBrowser should automatically open a tab at localhost:3000\n\n\n\n\nhttps://yearn.watch"
  },
  {
    "objectID": "posts/self-hosting/index.html#self-hosting-uniswap",
    "href": "posts/self-hosting/index.html#self-hosting-uniswap",
    "title": "Self-Hosting Web3 Services",
    "section": "Self-Hosting Uniswap",
    "text": "Self-Hosting Uniswap\n\nRepository: https://github.com/Uniswap/interface\nDid not work on Windows\n\nOpen terminal\ngit clone https://github.com/Uniswap/interface\ncd interface\nyarn install\nyarn start\nOpen the browser and navigate to localhost:3000\n\n\n\n\nhttps://app.uniswap.org"
  },
  {
    "objectID": "posts/self-hosting/index.html#self-hosting-curve",
    "href": "posts/self-hosting/index.html#self-hosting-curve",
    "title": "Self-Hosting Web3 Services",
    "section": "Self-Hosting Curve",
    "text": "Self-Hosting Curve\nOld UI since the current one isn’t open source\n\nRepository: https://github.com/curvefi/crv.finance\n\nOpen terminal\ngit clone https://github.com/curvefi/crv.finance\ncd crv.finance\nyarn install\nyarn start\nBrowser should automatically open a tab at localhost:3000\n\n\n\n\nhttps://crv-finance-curvefi.vercel.app"
  },
  {
    "objectID": "posts/self-hosting/index.html#self-hosting-cowswap",
    "href": "posts/self-hosting/index.html#self-hosting-cowswap",
    "title": "Self-Hosting Web3 Services",
    "section": "Self-Hosting Cowswap",
    "text": "Self-Hosting Cowswap\n\nRepository: https://github.com/gnosis/cowswap\nDid not work on Windows\n\nOpen terminal\ngit clone https://github.com/gnosis/cowswap\ncd cowswap\nyarn install\nyarn start\nBrowser should automatically open a tab at localhost:3000\n\n\n\n\nhttps://cowswap.exchange"
  },
  {
    "objectID": "posts/self-hosting/index.html#self-hosting-gnosis-safe",
    "href": "posts/self-hosting/index.html#self-hosting-gnosis-safe",
    "title": "Self-Hosting Web3 Services",
    "section": "Self-Hosting Gnosis Safe",
    "text": "Self-Hosting Gnosis Safe\n\nRepository: https://github.com/gnosis/safe-react\n\nOpen terminal\ngit clone https://github.com/gnosis/safe-react\ncd safe-react\nyarn install\ncp .env.example .env\nAdd Infura keys to .env\nyarn start\nBrowser should automatically open a tab at localhost:3000\n\n\n\n\nhttps://gnosis-safe.io\n\n\nProducer: *Worms, Reviewers: *Dark Ghosty, *Cryptouf, *Red Phone Crypto\n\n\nMade in yearn.finance"
  },
  {
    "objectID": "posts/yearn-finance-explained/index.html",
    "href": "posts/yearn-finance-explained/index.html",
    "title": "Yearn Finance explained: What are Vaults and Strategies?",
    "section": "",
    "text": "Simple Ethereum Yearn Vault Example\nYearn Finance is a suite of Decentralized Finance (DeFi) products that provides yield generation, lending aggregation, and more on the blockchain. Yearn is maintained by various independent developers and is governed by $YFI holders.\nThe current user-facing core product of Yearn is yVault, which provides automated yield generation to many different crypto assets, each driven by one or more Strategies. The yVault design is open-ended, which means other protocols can build and innovate on top of Yearn, like the Abracadabra + Yearn case"
  },
  {
    "objectID": "posts/yearn-finance-explained/index.html#yearn-vaults-yvaults",
    "href": "posts/yearn-finance-explained/index.html#yearn-vaults-yvaults",
    "title": "Yearn Finance explained: What are Vaults and Strategies?",
    "section": "Yearn Vaults (yVaults)",
    "text": "Yearn Vaults (yVaults)\nThe short way to name a Yearn Vault is yVault. In Yearn’s current version (v2) these are the characteristics of a yVault:\n\nThe token you deposit in a yVault is the token you’ll receive yield, always automatically compounded into the yVault\nA yVault may have many active strategies at the same time. A yVault may change its strategies capital allocation when it deems necessary\nUnlike many other yield aggregators, there are no deposit/withdrawal fees charged to the user\nyVaults tokens implement the ERC20 standard, this means that they can be easily moved between wallets and markets and can be used by any app that communicates with this standard (like decentralized exchanges).\n\nYearn Vault tokens are named “yvTokens”. yvETH represents a deposit position in the Ethereum vault, yvDAI in the DAI vault, yvUSDC in the USDC vault, etc."
  },
  {
    "objectID": "posts/yearn-finance-explained/index.html#strategies-and-strategists",
    "href": "posts/yearn-finance-explained/index.html#strategies-and-strategists",
    "title": "Yearn Finance explained: What are Vaults and Strategies?",
    "section": "Strategies and Strategists",
    "text": "Strategies and Strategists\nStrategists are people that build one or more underlying Strategies for yVaults\nAnyone can build a Strategy, but in order to get it added to a yVault, the strategist needs to pass the strategy through the strategy vetting process which includes concept vetting, code review, security review, and Ethereum mainnet testing.\n\n\n\nStrategy Vetting Process\n\n\nFor their efforts, strategists are rewarded with a portion of the strategy’s performance fee.\n\nUp to 10% of the generated yield fees by a specific strategy (performance fee) goes to the strategist\n10% of the generated yield fees by all strategies (performance fee) goes to the Yearn DAO treasury.\nOver the year 2% of the vault’s total assets are taken as fees which go to Yearn to pay for expenses like gas, developer grants, and other services.\n\nNow that we know what yVaults and Strategies are, let’s dig a bit deeper into how their inner workings"
  },
  {
    "objectID": "posts/yearn-finance-explained/index.html#diving-deeper-into-vaults-and-strategies",
    "href": "posts/yearn-finance-explained/index.html#diving-deeper-into-vaults-and-strategies",
    "title": "Yearn Finance explained: What are Vaults and Strategies?",
    "section": "Diving Deeper into vaults and Strategies",
    "text": "Diving Deeper into vaults and Strategies\n\nBreaking down one strategy\n\n\n\nThanks Finematics for this image!\n\n\nThe above image is an overview of the Ethereum vault strategy on a version 1 yVault. yVaults are now in version 2 and can handle multiple strategies at the same time, but this example will focus on a single strategy. There is an entire Finematics post and video on how this works in case you want to dive deeper!\nIn this example, we can see how a strategy may use other vaults! In the Ethereum v1 yVault strategy:\n\nWhen a user deposits ETH the ETH is then lent at MakerDAO as collateral\nThe collateral is used to borrow DAI\nThe borrowed DAI is deposited into the DAI yVault\n\nSo then we use ETH to borrow DAI and generate yield using the DAI yVault strategy.\n\n\nHow/when does Yearn move the funds inside the vault and charge fees?\nOne of the key functions of a strategy is called “harvest”. When called, it triggers a rebalancing process where profit is realized and reinvested back into the strategy.\n\n\nHow does Yearn guarantee a strategy always generates tokens instead of losing them?\nStrategists use a number of tools to monitor on-chain data to ensure strategy health. One of those tools is Yearn Watch which presents a nice UI with many key metrics live from the blockchain.\nJust as important as monitoring strategies after they go to production is the due diligence done before they are sent to production with real money. The Yearn strategy team also has a “Strategy Scoring System” which evaluates the risk level for the underlying strategies used, we hope to expose this better to our users in our documentation and apps in the future!\n\n\nStrategies have constraints learned by experience with past vaults\n\nVault funds should go “up only” and not down\nAvoid Impermanent Loss (e.g. don’t provide YFI/ETH liquidity in a liquidity pool)\nUsers should be able to withdraw at any time (so the strategy can’t timelock all vault funds, only a small fraction)\nUse only protocols with a proven track record and well-understood, immutable contracts\n\n\n\nKeep3rs and yVaults\nYearn and Keep3r have a really strong synergy: Keep3r is used by yVaults to automate common vault tasks. For example, Keepers (people available in the Keep3r network to do jobs when you need to) could benefit from calling the harvest function whenever conditions make sense for the yVault, like:\n\nA strategy has earned X amount of profit\nIt has been Y amount of time since the last harvest\nThere is no loss that will happen if harvest is called\n\nAnd there are many cases like this, another example would be a Keeper calling for a rebalancing of the vault assets allocation in order to avoid liquidation in some part of the strategy\n\n\n\nBuilding Strategies\n\nyVaults are programmed in **Vyper**\nStrategies are programmed in **Solidity** &gt; You don’t need to be an advanced developer or financial analyst to become a strategist!\n\nWhile the maintenance of yVaults is a more complex development matter, Strategies were designed for anyone to be able to write one, the requirement for a good strategy is:\n\nKnowledge about the blockchain ecosystem you’ll deploy in, which can be acquired by doing in-depth research of tokenomics and documentation for all tokens used in the strategy itself.\nSolidity programming knowledge similar to completing Level 4 on CryptoZombies\nKnow how to get around git, eth-brownie, and ganache.\nAfter understanding the basics of the above tools you are ready to copy our strategy template! The functions you should start changing in this template in order to build with your own first strategy are prepareReturn, adjustPosition, and liquidatePositon.\n\nOne last thing: after a strategy is endorsed by Yearn and put in production you should help monitor it!"
  },
  {
    "objectID": "posts/yearn-finance-explained/index.html#learn-more",
    "href": "posts/yearn-finance-explained/index.html#learn-more",
    "title": "Yearn Finance explained: What are Vaults and Strategies?",
    "section": "Learn more",
    "text": "Learn more\nIf you want more content about Vaults and Strategies check out these resources! They all helped me understand the concepts explained in this article, also Yearn contributooooors are the kindest people and always help me find the best resource to get quality information on each subject.\n\nyVaults descriptions\nyVault/ Docs\nBecome a mighty strategist\nExternal video/article from Finematics about yVaults\nPartners building with yVaults\nHacking with Yearn\nAdditional Resources from Yearn"
  },
  {
    "objectID": "posts/yearn-finance-explained/index.html#take-the-blue-pill",
    "href": "posts/yearn-finance-explained/index.html#take-the-blue-pill",
    "title": "Yearn Finance explained: What are Vaults and Strategies?",
    "section": "Take the Blue Pill!",
    "text": "Take the Blue Pill!\nIf you loved the Vaults and Strategies abstraction:\n\nStay updated with our latest news at the Yearn Finance Twitter\nRead our Blue Pill Book outlining Yearn’s vision and history\nAnd see about Joining the Yearn team!\n\nProducer: Worms, Reviewers: Wavey\nThanks Farrah and Weaver for helping me onboard Yearn and connecting me with awesome people and resources that allowed me to write this first article here!"
  },
  {
    "objectID": "posts/yearn-finance-explained/index.html#made-in-yearn.finance",
    "href": "posts/yearn-finance-explained/index.html#made-in-yearn.finance",
    "title": "Yearn Finance explained: What are Vaults and Strategies?",
    "section": "Made in yearn.finance",
    "text": "Made in yearn.finance"
  },
  {
    "objectID": "posts/js-closures/index.html",
    "href": "posts/js-closures/index.html",
    "title": "JS Closures: o que são, e como podem substituir as classes para criar objetos com métodos privados?",
    "section": "",
    "text": "“JS não precisa de classes!”\n“o new é uma desgraça!”\n“troque suas classes por funções!”.\nSe você ja leu alguns artigos sobre JS ou navegou pelas comunidades há grandes chances de ja ter se deparado com algumas dessas frases. Não vou entrar no mérito de discutir se isso está certo ou errado, ao meu ver cada design pattern resolve determinado tipo de problema, e não existe bala de prata. Esse artigo serve pra suprir a dúvida gerada ao ler essas frases: *“Mas então, como que eu faço pra não usar classes?”. Closures são uma das suas alternativas para isso."
  },
  {
    "objectID": "posts/js-closures/index.html#closures",
    "href": "posts/js-closures/index.html#closures",
    "title": "JS Closures: o que são, e como podem substituir as classes para criar objetos com métodos privados?",
    "section": "Closures",
    "text": "Closures\nBuscando no MDN temos uma descrição breve do que é uma closure:\n\nClosures (fechamentos) são funções que se referem a variáveis livres (independentes). Em outras palavras, a função definida no closure “lembra” do ambiente em que ela foi criada.\n\nMinha descrição simplificada para closure é: Uma closure é uma função (filha) dentro de outra função (pai). A função interior (filha) pode acessar variáveis da função exterior (pai), mesmo quando a função exterior (pai) não estiver mais sendo executada.\nVamos tentar concretizar essas abstrações com um pouco de código:\n\nRode esse bloco de código no seu console do navegador e você verá que a primeira chamada de “pai()” mostra 2 e 1 no log, e a segunda chamada mostra 300 e 150. Perceba que em nenhum momento a função interior recebeu os parâmetros ou variáveis da função pai explicitamente, mas mesmo assim ela é capaz de acessá-las.\n\nUma closure (fechamento) trata-se de um tipo especial de objeto que combina duas coisas: a função e o ambiente onde a função foi criada. — MDN\n\nLembra da minha descrição de closures? Ela é uma simplificação da frase acima. O que acontece quando você cria uma closure é: a função filha guarda o contexto da função pai que está executando ela, assim ela pode acessar esse contexto quando precisar. Quando você pede uma variável que a função filho não encontra declarada dentro dela, ela vai buscar no contexto da função pai pra ver se acha. Você pode colocar quantos filhos quiser dentro da função pai ou filho, e elas sempre vão sempre percorrer todo caminho até o pai pra procurar uma variável que ela não achou.\nVamos analisar o código abaixo pra concretizar mais esse conceito:\n\nSe você rodar isso no console do navegador ele vai mostrar “pizza” e “fusca”. Note que ambas variáveis são apenas parâmetros ou variáveis declaradas na funcão pai, mas como as funcões “filho()” e “neto()” são closures elas conseguem alcançar tudo que foi declarado em funcões que elas estão contidas independente do nível de profundidade delas.\nCaso esse conceito ainda não esteja claro para você recomendo que de uma parada pra tentar entender os conceitos acima, pois agora vou mostrar como a gente utilizará esse conceito pra fazer mágica no código abaixo:\n\n\nVamos analisar por partes — Jack o estripador\n\nA primeira coisa que fazemos é criar uma função contador(). Essa função retorna um objeto literal que contém duas funções: “incrementar()” e “getValor()”. Ao executar a função “contador()” na linha 15 estamos retornando o objeto literal para a variável “umContador”, que agora é um objeto que tem 2 funções. Essas 2 funções acessam e modificam a variável “valor” que está na função pai. Elas conseguem fazer isso pois as duas dividem o mesmo contexto em que foram criadas, e como elas são closures elas conseguem acessar esse contexto.\nE como você faria pra acessar o “valor” que está guardado la na função pai sem usar o “getValor()”? Você não consegue. Simples assim. “valor” agora é uma variável privada da instância do objeto “contador” que você criar.\n\n\n\nÉ impossível acessar a variável “valor” sem ser por meio de uma closure retornada pela função pai.\n\n\nPor sinal, você pode criar quantos contadores quiser:\nvar umContador = contador()\n\numContador.getValor() // =&gt; 0\numContador.incrementar()\numContador.getValor() // =&gt; 1\n\nvar outroContador = contador()\n\noutroContador.getValor() // =&gt; 0\noutroContador.incrementar()\n\nvar maisUmContador = contador()\n\noutroContador.incrementar()\noutroContador.incrementar()\noutroContador.getValor() // =&gt; 3\n\nmaisUmContador.getValor() // =&gt; 0\nVamos agora pro último exemplo mostrando como misturamos tudo para criar uma função que substituiria uma classe:\n\nagora podemos criar diferentes “tipos de personagem”:\nvar cavaleiro = player(5, 10, 0)\nvar ladrao = player(2, 7, 10)\n\ncavaleiro.tomarDano(3) // agora o cavaleiro tem 97 de hp\nladrao.danoEmBatalha() // =&gt; 4\nPerceba como rapidamente emulamos um objeto com métodos privados e públicos utilizando apenas uma característica natural das funções em JS. Existem patterns de closures mais complexas que permitem a criação de objetos de diversas maneiras, mas o objetivo desse artigo é apenas arranhar a superfície do assunto pra despertar curiosidade em quem não sabia como fazer objetos sem utilizar classes.\nPara concluir, vamos listar o que sabemos sobre closures agora:\n\nElas são funções declaradas dentro de outras funções.\nElas podem acessar as variáveis de todas as funções de nível acima dela.\nElas fazem isso pois guardam os contextos das funções pai.\nElas dividem os mesmo contextos das outras closures.\nE com isso podemos criar objetos com métodos privados e públicos.\n\nSe você tiver qualquer dúvida, sugestão, ou reclamação é só comentar abaixo :)"
  },
  {
    "objectID": "posts/yearn-ydaemon/index.html",
    "href": "posts/yearn-ydaemon/index.html",
    "title": "yDaemon: one API to unify all yearn data",
    "section": "",
    "text": "yDaemon (source) is a yearn REST API that provides a single unified interface to consume all relevant Yearn ecosystem data. The API data updates in near real-time thanks to the many daemons that it spawns in order to check data sources for changes:\nyDaemon exposes 4 routes for you to work with data:\nThe main routes to use are getAllVaults and getVault, both work with the same vault object type the only difference is that one route returns information for a list of all vaults and the other returns for a single one. Some of the most important information that these routes are:"
  },
  {
    "objectID": "posts/yearn-ydaemon/index.html#setup-ydaemon-locally",
    "href": "posts/yearn-ydaemon/index.html#setup-ydaemon-locally",
    "title": "yDaemon: one API to unify all yearn data",
    "section": "Setup yDaemon locally",
    "text": "Setup yDaemon locally\nThere are 2 ways to install and run it using either Docker or Manual Installation, I will proceed with using Docker since it works with fewer dependencies in any OS:\n\nDownload and install Docker\nDownload and install Git\nCreate an Alchemy or Infura account (or another RPC provider) and get RPC HTTPS keys for the blockchains you want to query data from. Fantom only has the public RPC\nOpen your terminal and type git clone https://github.com/yearn/ydaemon.git to download yDaemon source code and cd ydaemon to enter the project’s folder\nCreate a .env file containing the lines for the blockchains you want to query from, you don’t need to add URLs for the ones you don’t want to query:\nRPC_URI_FOR_1=https://eth-mainnet.g.alchemy.com/v2/secret_secret_secret RPC_URI_FOR_10=https://another.rpc.url RPC_URI_FOR_250=https://another.rpc.url RPC_URI_FOR_42161=https://another.rpc.url\nIn the terminal, type docker-compose up –build –detach to run yDaemon.\nTo stop type docker-compose down."
  },
  {
    "objectID": "posts/yearn-ydaemon/index.html#daemons",
    "href": "posts/yearn-ydaemon/index.html#daemons",
    "title": "yDaemon: one API to unify all yearn data",
    "section": "Daemons",
    "text": "Daemons\n\nTo keep data up-to-date the API daemons are spawned on deploy and work in the following cadence:\n\nPrices from the oracle are updated every 30 seconds for every tokens and vaults, since the price may change at every block.\nAPY information is updated every 10 minutes, as the underlying API is updated every 30 minutes.\nMetadata is updated every day and whenever you deploy yDaemon API.\n\nEach daemon knows how to fetch and handle data from a specific source and cache it if needed, most data that doesn’t come from the Subgraph is cached on deployment and then periodically updated.\nThere is a **list of all Daemons** at the docs. All daemons are written in Go and you can find them in the source code at the daemons folder."
  },
  {
    "objectID": "posts/yearn-ydaemon/index.html#query-ydaemon",
    "href": "posts/yearn-ydaemon/index.html#query-ydaemon",
    "title": "yDaemon: one API to unify all yearn data",
    "section": "Query yDaemon",
    "text": "Query yDaemon\nThe public endpoint to use yDaemon is:\n\nhttps://ydaemon.yearn.finance/\n\nYou can test the API endpoints by changing the:chainID and :address in the URLs below to what you want to query for\ngetSupportedChains: GET\n\nLocal: http://localhost:8080/info/chains\nLive: https://ydaemon.yearn.finance/info/chains\n\ngetAllVaults: GET\n\nLocal: http://localhost:8080/:chainID/vaults/all | ETH | OP | FTM | ARBI\nLive: https://ydaemon.yearn.finance/:chainID/vaults/all | ETH | OP | FTM | ARBI\n\ngetVault: GET\n\nLocal: http://localhost:8080/:chainID/vaults/:address\nLive: https://ydaemon.yearn.finance/:chainID/vaults/:address\n\ngetBlacklistedVaults: GET\n\nLocal: http://localhost:8080/info/vaults/blacklisted\nLive: https://ydaemon.yearn.finance/info/vaults/blacklisted\n\nWith the service up you can now query for vaults data, for example at Ethereum :chainID = 1 let’s query the DAI vault :address = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95 by entering this URL in the browser (or query form any programming language):\n\nhttps://ydaemon.yearn.finance/1/vaults/0xdA816459F1AB5631232FE5e97a05BBBb94970c95\n\nCopy the returned text and paste it into something like json2table so you can prettify the JSON. For example, we can see that management fees for this vault are now 0 (announced recently on twitter):"
  },
  {
    "objectID": "posts/yearn-ydaemon/index.html#filters",
    "href": "posts/yearn-ydaemon/index.html#filters",
    "title": "yDaemon: one API to unify all yearn data",
    "section": "Filters",
    "text": "Filters\nThe getAllVaults might return a huge list so it has some query tools you can use to filter and reorder results:\n\n?skip=N will skip N vault from the graphQL query. Default is 0\n?first=N will limit the result to N vaults on the graphQL query. Default is 1000\n?strategiesDetails=withDetails adds more details to vault strategies\n?strategiesCondition=absolute removes strategies with 0 TVL\n\nSo if I want the listing result to return only 5 vaults, I can use first:\n\nhttps://ydaemon.yearn.finance/1/vaults/all?first=5\n\nIf I’m building some sort of pagination system that shows vaults in groups of 5, I can ask for the next page using skip:\n\nhttps://ydaemon.yearn.finance/1/vaults/all?first=5?skip=5\n\nQuery vaults with complete strategy details only for strategies with 0 TVL:\n\nhttps://ydaemon.yearn.finance/1/vaults/all?strategiesDetails=withDetails?strategiesCondition=absolute\n\nSee all available fillters"
  },
  {
    "objectID": "posts/yearn-ydaemon/index.html#build-with-yearn",
    "href": "posts/yearn-ydaemon/index.html#build-with-yearn",
    "title": "yDaemon: one API to unify all yearn data",
    "section": "Build with Yearn",
    "text": "Build with Yearn\nIf you are using yDaemon to build anything let our community know! Here are some useful links:\n\nyDaemon Github Repository\nYearn Documentation\nYearn Partnership Documentation\nYearn Community Discord\nYearn Community Telegram"
  },
  {
    "objectID": "posts/yearn-yield/index.html",
    "href": "posts/yearn-yield/index.html",
    "title": "Where does on-chain yield come from?",
    "section": "",
    "text": "DeFi is a large ecosystem with many different protocols, each offering different services and yield options. It can be thrilling to be on the hunt for the highest APY/APR (Annual Percentage Yields/Rates), still, it is essential to keep track of the sustainability of the source that pays out the yields so you don’t end up with unexpected losses. &gt; If you don’t know where the yield comes from, then it comes from you — I don’t know who wrote this originally but it fits the subject very well"
  },
  {
    "objectID": "posts/yearn-yield/index.html#services-that-create-value",
    "href": "posts/yearn-yield/index.html#services-that-create-value",
    "title": "Where does on-chain yield come from?",
    "section": "Services that create value",
    "text": "Services that create value\nThe most reliable source of yield is taxing a useful service. Services provide real value to people using them and users are willing to let the service have a fair share of the money that traffics through since this often translates to a better and more secure product. Some examples of sustainable crypto services:\n\nBitcoin is the most resilient global permissionless money ledger–to use it, you have to spend Bitcoin to pay for service fees\nEthereum is the most secure platform to deploy services for DeFi and Web3 — to use it, you have to spend Ethereum to pay for service fees\nChainlink is the largest oracle provider–to use it, you have to spend Chainlink\n\nIn the above services, we can see the pattern of the “protocol access token” (read more at fat procools) which creates a sustainable long-term cycle that rewards everyone invested in the protocol which brings more interest to it and fuels ever-more building around it, but this is not the only way to achieve long-term protocol sustainability:\n\nCurve largest DeFi stablecoins trading protocol. CRV token holders receive trading fees\nAAVE is a DeFi lending platform where users can either use their borrowing service (paying fees) and/or provide tokens that will be used as protocol liquidity (receiving fees)\n\nIn this second pattern, services allow users to become holders and earn a share of the profits by holding (and often locking) a specific token. Notice that in both patterns there are functioning services that people are willing to use and pay fees, and this is where the “Yield” comes from: in BTC and ETH miners receive the fees paid by the service usage, and in DeFi protocols the token-holders and liquidity providers get those instead.\nThere are other ways to generate sustainable yield on-chain, most of them revolve around providing a financial service and charging for operational risks, for example: providing insurance, or liquidity, or creating a new derivative asset with extra utility (like cvxCRV makes veCRV tradeable for example). Sustainability can be achieved by many methods but understanding how it is actually achieved should be always clear and documented and preferably on-chain."
  },
  {
    "objectID": "posts/yearn-yield/index.html#zero-sum-games",
    "href": "posts/yearn-yield/index.html#zero-sum-games",
    "title": "Where does on-chain yield come from?",
    "section": "Zero-sum games",
    "text": "Zero-sum games\nIf yields are high and service usability is low, it means that the money used to incentivize a part of the service is not coming from the service itself, so if the external money source dries the service breaks because yields will tend to go to 0.\nA potential problem with zero-sum games is that people may not realize they have entered one. Economic relations are built on trust and overall trust goes down when a large-scale protocol breaks the expectation of many people.\nZero-sum games can be a misnomer. Not everyone is guaranteed to win with no losses. Here is an example that has impacted any DeFi newbie:\n\nA new Dex is released: HentaiSwap!! Also releases the $HENTAI token!\n$HENTAI token gets trading fees from HentaiSwap!\nYou can stake $HENTAI for 420% APY! Just buy some and stake!!\n\nRed flags users should keep an eye on:\n\nWhy do we need another Dex? What does this service does that other doesn’t? Why would someone unstake liquidity from Uniswap/Sushiswap/Curve and put it in HentaiSwap?\nHow much fees is this DEX generating? How close is it to 420%? Take a look at all other swap protocols: how much they pay for the same pairs when they have a lot of liquidity to compare fees/returns?\nWhy should I stake $HENTAI? Why is someone paying me to hold this token? Seems like they want me to buy this token to make the price go up for previous bag holders to profit, but what can I do with it besides just selling back staking profits to the market?\nAnd finally: How many $HENTAI tokens the team mint for themselves in order to sell when market speculation is making it worth something in the market? Who is gonna lose money when they do?"
  },
  {
    "objectID": "posts/yearn-yield/index.html#positive-sum-games",
    "href": "posts/yearn-yield/index.html#positive-sum-games",
    "title": "Where does on-chain yield come from?",
    "section": "Positive-sum games",
    "text": "Positive-sum games\nIf in Zero-sum games someone always takes a loss for another to take a win, in positive-sum games both parties feel like they end up with more value after a transaction. Any service that provides value to users while charging a fair fee creates a positive-sum environment.\nLet’s say we have 2 parties wanting to transact:\n\na User needs to exchange 1 ETH to $2000 USD in order to pay rent\na Developer maintains a smart contract that allows exchange between both coins\n\nThe transaction happens roughly like:\n\nMaintaining software is a costly and constant exercise, so in order to keep the service running the Developer charges 0.5% swap fees\nUser can’t pay bills with ETH and needs it converted, and every exchange will charge a swap fee to maintain their services\nSo the user swaps 1 ETH in the developer service and receives $1990, knowing that $10 went to pay for service maintenance\n\nLet’s take a snapshot of both parties before and after the transaction:\nBefore\n\nUser: Had 2000$ in an illiquid asset that needed to become liquid for daily usage\nDeveloper: Had 0$ income from this user to maintain service\n\nAfter\n\nUser: Had 1990$ in a liquid asset that can be used to pay bills\nDeveloper: Had 10$ income from this user to maintain service\n\nI hope that this example makes it clear that both parties feel like winning from this transaction. The 10$ that the user paid for the service is not seen as a loss from the user perspective because a service was provided and the fee that was paid allows this service to be here the next time the user needs it again."
  },
  {
    "objectID": "posts/yearn-yield/index.html#yearning-for-yearn",
    "href": "posts/yearn-yield/index.html#yearning-for-yearn",
    "title": "Where does on-chain yield come from?",
    "section": "Yearning for Yearn",
    "text": "Yearning for Yearn\nWhen I joined DeFi I lost a lot of the money I put into rugs and zero-sum games, and I’m not alone in having this sort of experience. After learning more about the fundamentals of both trading and DeFi, I figured out the most important thing is understanding the underlying value of the assets and the quality of the protocols I am investing into, but there is a huge problem: the complexity to audit smart contracts and tokenomics is very high since it requires extensive financial, programming, and security experience, and for the average user the research might be too extensive for a “simple investment”, and for portfolios that have many tokens this research only gets more extensive.\nYearn Vaults + Strategies provides “DeFi investment experts as a service”: Yearn can focus on maintaining strategists that generate yield for tokens and the user can focus on which tokens they want to hold. This way any other protocol or even retail user can have a channel that safely generates yields for their funds and Yearn charges fees on top of yield profits, a positive-sum scenario, fully transparent on-chain.\nDeFi still has a long road to run in order to become digestible to the average FIAT investor, today it relies heavily on yield-aggregators to minimize some of the common risks, if you will invest your money (or even more sensitive: other people’s money) today make sure you know exactly where your investment’s yield comes from so you don’t become another person’s yield."
  },
  {
    "objectID": "posts/yearn-vaults-as-collateral/index.html",
    "href": "posts/yearn-vaults-as-collateral/index.html",
    "title": "Yearn Vault Tokens as collateral",
    "section": "",
    "text": "Using tokens as collateral is a primitive building block in DeFi: “collateral” means that the tokens are locked, and only to be unlocked once agreed-upon conditions are met (such as the repayment of a loan). An everyday use case is seen in lending platforms, which allow users to lock tokens to borrow other ones. yvTokens can represent any yearn vault, which has many valuable properties when used as collateral:"
  },
  {
    "objectID": "posts/yearn-vaults-as-collateral/index.html#projects-using-yvtokens-as-collateral",
    "href": "posts/yearn-vaults-as-collateral/index.html#projects-using-yvtokens-as-collateral",
    "title": "Yearn Vault Tokens as collateral",
    "section": "Projects using yvTokens as collateral:",
    "text": "Projects using yvTokens as collateral:\nHere is a list of all current partners that build on yearn:\n\nAlchemix: https://alchemix.fi/\nAbracadabra: https://abracadabra.money/\nInverse Finance: https://www.inverse.finance/\nElement: https://www.element.fi/\nGearbox: https://gearbox.fi/\nQiDao: https://app.mai.finance/\nRibbon: https://www.ribbon.finance/\nSturdy: https://sturdy.finance/\nTempus: https://tempus.finance/\n\nThis text was first made for Yearn Partner Docs. If you are a partner building with Yearn we’d like to hear about what you are doing! Contact us through our partners form or reach out to us in our discord at #vaults!"
  },
  {
    "objectID": "posts/yearn-vault-factory/index.html",
    "href": "posts/yearn-vault-factory/index.html",
    "title": "Permissionless Yearn Vaults",
    "section": "",
    "text": "Yearn’s Vault Factory is a new way for anyone to create and register yield-generating yVaults through one simple interface quickly. It automates the deployment processes, making it easier for users to access ready-made yield strategies that can be applied to specific DeFi protocols.\nThe factory allows users to deploy Yearn Vaults rapidly and set up risk-adjusted yield strategies with just a few clicks, plus the deployment process does not require any human involvement! We also refer to these vaults as “permissionless” or “automated” vaults."
  },
  {
    "objectID": "posts/yearn-vault-factory/index.html#how-does-the-vault-factory-work",
    "href": "posts/yearn-vault-factory/index.html#how-does-the-vault-factory-work",
    "title": "Permissionless Yearn Vaults",
    "section": "How Does the Vault Factory Work?",
    "text": "How Does the Vault Factory Work?\n\nTo deploy a Yearn Vault for a token that doesn’t have one yet, go to the interface and select the token name. Once an asset is chosen and the transaction submitted, the Vault Factory contract will automatically deploy a Yearn Vault with a predefined set of yield strategies for that token type.\nHere is an example of the factory UI:\n\nCurrently, only strategies for liquidity pool tokens from Curve are supported, but we will expand with more token types as the factory is updated. Permissionless vaults created for Curve LP tokens come with a set of strategies that are optimized to maximize and automatically compound the yield earned for depositors:\n\nStrategyCurveBoostedFactory uses Yearn’s veCRV balance (currently 51.4m)* to give users the maximum 2.5x boost on their CRV rewards.\nStrategyConvexFactory supplies any additional Curve LP tokens (beyond which would receive the maximum 2.5x boost via the Curve strategy) to Convex Finance to earn CRV rewards (boosted by Convex’s veCRV balance) and CVX rewards.\nStrategyConvexFraxFactory will only be added to the vault if the Curve LP token of the vault can be staked in Convex for Frax. This ConvexFrax strategy will be used instead of the standard Convex strategy to earn additional FXS rewards (on top of the standard CRV and CVX rewards).\n\n\n\n\nYearn veCRV balance over 2 years. Can be explored here\n\n\nThe Yearn Vault manages rewards’ harvesting, claiming, and compounding, so users can relax and watch as their newly created vault automatically maximizes their yields without taking further action."
  },
  {
    "objectID": "posts/yearn-vault-factory/index.html#long-live-defi",
    "href": "posts/yearn-vault-factory/index.html#long-live-defi",
    "title": "Permissionless Yearn Vaults",
    "section": "Long Live DeFi",
    "text": "Long Live DeFi\nAs Yearn gets more permissionless, we are also lowering our vault fees:\nBefore, Yearn charged:\n\n2% management fee, yearly flat-rate charged from vault’s funds\n20% performance fee, charged on every harvesting profit\n\nNow, Yearn charges:\n\n0% management fees\n10% performance fees\n\nThe fees for each vault can be seen in the new **yearn.finance** website:\n\n\n\nchecking fees for a vault\n\n\nYou can also see the total allocated for each strategy:\n\n\n\nchecking vault allocations\n\n\nAnd like any other yVaults, you can also use yearn.watch and yearn.vision to monitor the vault’s real-time metrics.\n\n\nYearn Website: yearn.finance\nYearn Twitter: twitter.com/iearnfinance\nYearn Docs: docs.yearn.finance"
  },
  {
    "objectID": "posts/yearn-metrics/index.html",
    "href": "posts/yearn-metrics/index.html",
    "title": "Diving into Yearn Metrics",
    "section": "",
    "text": "Doing your own research is a necessary exercise when dealing with crypto and for yVaults and strategies there are a handful of views that you can explore and use to crunch all the numbers. In this article I will dive into all public Yearn analytics resources used by strategists to monitor vaults and strategies health, so learning how to navigate these tools will allow you to have the same level of information about vaults as a Yearn team member. The three tools we’ll explore today are:"
  },
  {
    "objectID": "posts/yearn-metrics/index.html#the-vaults-at-yearn-1",
    "href": "posts/yearn-metrics/index.html#the-vaults-at-yearn-1",
    "title": "Diving into Yearn Metrics",
    "section": "The Vaults at Yearn",
    "text": "The Vaults at Yearn\nLink: https://vaults.yearn.finance/\nThe Vaults at Yearn is a great resource to start understanding how funds are managed by a vault. Here you’ll find descriptions for all yVaults and their strategies:\n\nOn the left side, you can choose either Ethereum or Fantom vaults and they are aggregated as:\n\nStables: yVaults made for stablecoins\nDeFi Tokens: yVaults made for tokens from the DeFi ecosystem of the chosen network (ETH or FTM)\nCurve Pools: yVaults made for tokens from the curve.fi ecosystem\nRetired Vaults: old yVaults that aren’t used anymore\n\nWhen you choose a section you’ll see a list of vaults. You can click on a vault to expand it and see the descriptions of all the strategies that it uses:\n\nIf you want to dive deeper into numbers for each vault/strat you’ll need to hop into our next tool! Which is Yearn Vision:"
  },
  {
    "objectID": "posts/yearn-metrics/index.html#yearn-vision-1",
    "href": "posts/yearn-metrics/index.html#yearn-vision-1",
    "title": "Diving into Yearn Metrics",
    "section": "Yearn Vision",
    "text": "Yearn Vision\nLink: https://yearn.vision/\nYearn Vision is a complete analytics dashboard suite with many pre-made views to analyze historical data from vaults and strategies. Let’s breakdown some of what can be found here, starting with the home page:\n\n\nThis page gives us a lot of information on the overall health of all Yearn Vaults.\nThere is information about TVL (Total Value Locked) which represents all funds deposited across all yVaults. We can see both Ethereum and Fantom total TVL and also each network slice. There are some charts showing daily/weekly deltas, which are comparisons with present data and past ones. “share price” is also an important metric to follow, it represents the vault’s lifetime gains in the form of a number which grows over time above 1.0. Below you can see a share price example for ETH to yETH. Here is how “share price” works:\n\n\n\nhow “share price” works\n\n\nBack to the Vision dashboard, on the top-right corner, you can always change the time range which will update most charts.\n\n\n\nchange the time range in the top-right corner\n\n\nDon’t get scared by the charts with many colors they normally show all vaults/strategies and you reduce the noise by selecting only the one you want to learn more about. You can click on the list of items to filter analytics by a single part, most of them will come with all items selected by default so you’ll have to pick the vault you want to check:\n\n\n\nUnfiltered\n\n\n\n\n\nFiltered\n\n\n“time since last report” means when this vault strategies were last harvested. The above “Filtered” chart is an example of all harvest from the USDC yVault that happened the last week, the vertical drop means that a harvest happened so “time since the last harvest/report” goes to 0\nYou can switch to other dashboards on the left side of the screen:\n\n\n\nsee all dashboards: https://yearn.vision/dashboards\n\n\nHere you’ll find plenty of dashboard to dive deeper into what’s happening at Yearn!\n\n\n\ndashboards used by strategist\n\n\nLet’s take a peek at the “Vault Overview” dashboard:\n\n\n\nVault Overview Dashboard: https://yearn.vision/d/ibsIoEknkdffd/vault-overview?orgId=1\n\n\nIn this Vault Overview dashboard we can see there are 6 active strategies for the USDC yVault: “totalDebt” is the amount that the vault is delegating to these strategies, “amount of free funds” means how many funds are available for cheap (gas-wise) withdrawal, when this number is less than the amount you’d like to withdraw then the transaction will cost a bit more gas because the vault will have to take funds delegated to strategies and make more operations in the process.\nWe’ll use yearn.watch later to look at how the funds are delegated proportionally for each strategy.\nThere are also great dashboards for inspecting Yearn’s overall health, and you can even monitor the DAO’s treasury:\n\n\n\nYearn Treasury Dashboard: https://yearn.vision/d/9_ppKhd7z/treasury"
  },
  {
    "objectID": "posts/yearn-metrics/index.html#yearn-watch-1",
    "href": "posts/yearn-metrics/index.html#yearn-watch-1",
    "title": "Diving into Yearn Metrics",
    "section": "Yearn Watch",
    "text": "Yearn Watch\nLink: https://yearn.watch/\nYearn Watch is a dashboard made by strategists for strategists, so you can quickly navigate through important information about each strategy’s health. The home screen already greets you with all vaults:\n\nIf you open a vault you’ll see information on assets allocation. I used a part of this view in the Yearn Vision section, let’s see the complete view for that USDC yVault:\n\nThe “details” view shows everything about the overall fund’s allocation. If you change to the “strategies” view you can dive even deeper and inspect each strategy individually and easily find their contracts and on-chain transactions.\nOnce inside a strategy, an insightful view is the “reports” (harvests) which show you the last 10 harvest transactions so you can monitor the real-time gains of the vault and monitor the profit from each harvest:\n\nExpanding an individual report for more information:"
  },
  {
    "objectID": "posts/yearn-metrics/index.html#thats-yearn-folks",
    "href": "posts/yearn-metrics/index.html#thats-yearn-folks",
    "title": "Diving into Yearn Metrics",
    "section": "That’s Yearn Folks!",
    "text": "That’s Yearn Folks!\nI hope this article helps people extract good information about their deposits at Yearn! It’s great to be able to access the same tools that the veterans working on these products use to monitor them, there is a lot of valuable information about the past and present of Yearn’s yVaults and products.\nProducer: *Worms, Reviewer: *Dark Ghosty\nThanks a lot Dark Ghosty for going through all these dashboards and showing me how to navigate them ❤\nMade in yearn.finance"
  },
  {
    "objectID": "posts/yearn-strategy-endorsment/index.html",
    "href": "posts/yearn-strategy-endorsment/index.html",
    "title": "How new Yearn Vault strategies are endorsed?",
    "section": "",
    "text": "Strategy Vetting Process\nIn the last article about Yearn Vaults and Strategies we have briefly outlined the Strategy Vetting Process. We’ll now dive deeper into how anyone can propose a new strategy to Yearn and what steps are taken in order to ensure that endorsed strategies are resilient.\nBefore submitting a strategy to be endorsed by Yearn the strategist should write a Due Diligence document about it: SNX is a good template to follow. The Due Diligence document is important because it describes all specifications of the processes that a strategy uses and reviews smart-contract common security practices. Yearn will use this document to validate processes and assess risks of what was built!\nSome of the things the doc should outline are:\nThe strategist can code a strategy using the “brownie-strategy-mix” template repository. When the strategy is completed and reviewed by 2 peers it should be deployed on ape.tax which is a website that allows experimental vaults to be tested in a production environment.\nWith the document done and after some harvest cycles are completed successfully with no issues, the strategist can now reach for Yearn contributors to get the strategy approved by the Safe Farming Committee. A complete security review will be done by internal Yearn reviewers.\nAfter every feedback is addressed and code is approved, the strategy can be promoted to production either by redeploying and attaching to an existing vault or by endorsing the ape tax vault.\nThe strategy is now endorsed and live in yearn.finance!!\nFrom now on the strategist + any supporting committee will be rewarded with a 10% performance fee from the vault’s strategies yield. Since security is a high priority concern we expect to raise monitoring and auditing frequency as the strategy scales in Total Locked Value:\nFor more information on how strategies are developed and endorsed you can read these documents:\nProducer: Worms, Reviewer: Wavey"
  },
  {
    "objectID": "posts/yearn-strategy-endorsment/index.html#made-in-yearn.finance",
    "href": "posts/yearn-strategy-endorsment/index.html#made-in-yearn.finance",
    "title": "How new Yearn Vault strategies are endorsed?",
    "section": "Made in yearn.finance",
    "text": "Made in yearn.finance"
  },
  {
    "objectID": "posts/nietzsche/index.html",
    "href": "posts/nietzsche/index.html",
    "title": "The Keys to the Nietzschean Castle",
    "section": "",
    "text": "All Images were made with Stable Diffusion\nThis text is a reduction of 5h audio recordings of 3 classes from Prof. Clóvis de Barros Filho that serve as an introduction to the Nietzchean thoughts and help you dive into the original books by yourself.\nThis journey identifies what Nietzsche thinks about morals. To do this one needs to dive into many of his books, because, unlike other authors, Nietzsche did not segment his thoughts into clean separate books or chapters. To facilitate the journey in reading his original work, we will learn about key concepts (which Prof. Clóvis calls “keys of the castle”) to understand this author and some jargon essential to understanding the original work. We will explore the following:"
  },
  {
    "objectID": "posts/nietzsche/index.html#key-concept-1-nihilism",
    "href": "posts/nietzsche/index.html#key-concept-1-nihilism",
    "title": "The Keys to the Nietzschean Castle",
    "section": "Key Concept #1: Nihilism",
    "text": "Key Concept #1: Nihilism\n\nNietzsche uses the word “Nihilist” in every book, so it is tough to understand them if you don’t know what it means. And not only is this concept essential, but Nietzsche also uses the word “Nihilism” to suggest the opposite of how common sense thinks of it, but he won’t tell you that! It is up to you to find that out, so absorbing this before reading will fast-track your learning and make it less confusing:\n\nCommon Sense meaning of Nihilism\nThe common sense meaning of Nihilism is conducting life with no set of higher values or morals, a life untied of any principle beyond the raw reality.\nExample: Someone invites a very religious person to do group sex, and the religious person denies it because that is against their higher moral values. So in this example, there is an existential criterion that this person applies to their existence. This criterion is more valuable than life occurrences, “no matter what happens the moral value will guide the life’s conduct”. In this case, this person did not let life conduct itself, because they pulled the handbrakes so a higher value could triumph.\n“Letting your life conduct you without pulling the handbrakes is Nihilist”, common sense would say.\n\n\nNietzsche’s meaning of Nihilism\nNietzsche’s meaning of Nihilism is conducting life WITH a set of higher values or morals, because doing this stifles your capacity to explore and learn from the real experiences life offers.\nExample: A Christian person has principles. Christian principles. And people that have principles do not let life conduct them without pulling the handbrakes. So for Nietzsche, this person is a Nihilist, the exact opposite of the common sense meaning. Another example: A communist is convinced that everything must be about the revolution for the working class. The good life for a communist is a life that leads to the end of social classes and capitalism, and this is his principle, much like the Christian has one. So the Christian is a nihilist, the communist is a nihilist, but so is the liberal, the anarchist, the human rights activist, the democracy, the dictatorship, and anyone that lives a life believing in higher principles.\n\n\nSo what does Nihilism mean?\nThe “Ni” in nihilism means “negate”. Nihilism means “to negate life”. In common sense meaning it’s easy to understand what is being negated: the values. If you negate values you are negating life. But in the Nietzchian meaning, the values negate life: By choosing fictional values over life, one negates life.\nThis concept helps us understand what Nietzsche means when he writes things like In the name of heaven one sins against earth: in the name of higher values one negates the present experiences. For coherence, from now on I will use “nihilism” as Nietzsche does.\nPlato is the first great nihilist in Nietzsche’s head: Plato talks about “the sensible and the intelligible world”. The intelligible world is built upon absolute truths, values, and inquestionable things. The sensible world is an illusion, and the reality happens in the intelligible world that we as humans can’t access, we can only access the illusion. So in Plato’s world’s view, the individual’s life is a meaningless reflection of an intelligible and inaccessible world, thus “he is a nihilist”, and the first big one! The pole-position of nihilists! He negates life and reality as is, to glorify a rational model of living, committing sins against the present earth in the name of an inexistent beyond.\nThe second greatest nihilist and “present negator” is Aristotle. Because to Aristotle, the great reference for life is the “Cosmos”. But you may think “isn’t the cosmos pretty much the real world” and the answer is no! Because this “Cosmos” is a specific version of the cosmos, more specifically Aristotle’s one, which is just another nihilistic worldview. “You are a piece in the universe machine that must act as the universe expects, and this is how you will be happy” and this view, again, doesn’t ask YOU what you think happiness is in the first place. Again, you are just a piece in an ideological system created by someone else’s head. This is yet another mental model of living that tries to enslave life. While Plato enslaves life through the world of ideas, Aristotle enslaves life through his “cosmos”.\n\n\nThe Idols and The Hammer\nAnother example of nihilism is monotheism. God is not here, but commands all life from beyond, in the realm of souls, and the best life is the one that seeks eternal life in the afterlife paradise. And again life was enslaved by a mental model that “spits on earth in the name of heavenly paradise.”\nMan invented the ideal to negate the real, classic concept that resumes the Nietzchean interpretation of nihilism.\nSome excerpts from Twilight of the Idols to illustrate more examples:\nImproving humanity is the last thing I will promise. If Plato, Aristotle, Catholics, and all others are full of bullshit, what should you follow instead of them? Nothing! Don’t expect Nietzche to bring you a new idol to replace an old one, he will not do that for you. He has absolutely no truths to impose himself in the place of the ones you had before, he wants you to rethink your relationship with these truths and not just accept uncritically any idea that might enslave your life. Don’t look for something to put on the pedestal, but restructure your need for a pedestal in the first place.\nThe idols should know how much it cost them to have feet of clay, in other words, any “almighty and powerful god” has weak spots that you can hammer and it all comes down. This is why Nietzsche uses the concept of the “philosopher’s hammer” because once you possess the hammer you can break down any idol. This is the basis for the idea of “Deconstruction”, a popular term that means to show that the references for a specific notion have no fundamentals.\nTake down the idols, this is my main activity, The invention of an ideal is the greatest lie, a curse that oppresses reality, Humanity has become false at is deepest roots, even by adoring values opposite of ones that could take us to a brighter future are other examples from Twilight of the Idols.\nAnother idol that Nietzche will beat down a lot is “equality”, there is an entire book dedicated to this called “Genealogy of the Morals” where he focuses on expliciting that people are not equal, further explored on the following keys."
  },
  {
    "objectID": "posts/nietzsche/index.html#key-concept-2-the-death-of-gods",
    "href": "posts/nietzsche/index.html#key-concept-2-the-death-of-gods",
    "title": "The Keys to the Nietzschean Castle",
    "section": "Key Concept #2: The Death of Gods",
    "text": "Key Concept #2: The Death of Gods\n\nGod is Dead is a classic phrase from Nietzsche and there is a lot to unravel from this simple yet profound choice of words:\n\nIf God exists then it can’t die since it’s the most powerful being\nIf God doesn’t exist then it also can’t die since it never existed\n\nSo funny enough Nietzsche makes fun of both the believers and non-believers with this phrase, but what did he mean by it then? Nietzsche wants to denounce and kill a way of thinking, specifically, the “religious thinking structure”. This structure defines the line between good and evil. The lines between heaven and hell. The city of men and the city of god. The conviction that there is a realm beyond better than this one, one so much better that you should restructure your current living experience to have a better time there. What is being denounced is this way of thinking, Nietzsche is declaring that we as humans were able to transcend this way of thinking and living and move on to new ways that don’t rely on the “shadows that terrorized Europe for centuries, and are now gone because god is dead” as he would put.\nEvery moral philosophy that presents us with a dichotomic view that splits between good and evil, is dead, along with god, because it is the idea of god that allows this view to exist in the first place. If you kill god, everything else crumbles. Along with god, all political ideals die: the society free of classes, the poet society, Atlantis, Eldorados, and any other bullshit man has invented to try to cope with the real world.\nAnother way to see this concept is that Nietzsche will denounce every “metaphysical crutch”, or in other words, ideals that you lean into to lessen your existential pain. People will fabricate an ideal and lie to themselves that when the fabricated idea happens in real life only then something very nice will happen, whether you need to die (like in monotheistic religions) or not (in communism or anarchy) is just a detail. The society with no classes is just like the paradise, an utopia, a romantic distraction that wastes your real-time energy.\nWe who defend another type of faith, we who think of democracy not only as a degenerate way to organize but also as a decadent form of humanity, reduced to mediocrity, where will we deposit our hopes? This phrase may shock some people because of how it talks about democracy, but let’s comprehend the underlying criticism: Nietzsche argues that democracy stems from a concept that does not exist in reality, that is the concept of equality. The idea that every vote is worth 1 presupposes that everyone is “worth” 1. Trying to put this another way: “To whom it interests a form of political organization where every person is worth 1”? Imagine the best and worst sports players of your favorite sport. Now let’s create an organization to decide for the future of this sport. To who it interests that each vote is worth 1? To the few best or the many worst? According to Nietzsche, and he is coming from a place where he clearly thinks some people are more excellent than others, there are few awesome people and many mediocre ones. So in a system where everyone is worth 1 like in a democracy, he argues this is where the mediocre people thrive &gt; Prof. Clóvis reinforces that this is the Nietzsche view, not Clóvis. Translator’s Note: Everyone is free to disagree with the above or any other idea. And just a reminder, none of these ideas has the intent to improve the world or to impose a new absolute truth, these views are highly conflicting with many modern world views when framed like that\n\nWill to Power\nThe question “to whom it interests that I believe in this?” is something Nietzsche would recommend you consider to find out if an idea benefits you.\nIf Nihilism negates life and is a harmful way of living, what is a way of living that affirms life for Nietzsche then? If we want to kill good and evil, why does Nietzche believe some people are better than others? How is “better” not just a version of “good”?\nNietzsche would say that real-world energy is called “Will to Power” when acting upon living beings. Spinoza would call it “Potency to Act”. Schopenhauer would call it “Will”. And Prof Clóvis would call it “Horniness to Live”. And what characterizes a being with Will to Power to Nietzsche is the constant search for MORE Will to Power. Vital energy wants MORE vital energy. Horniness wants MORE horniness. And it will search for all conditions so that the Will to Power increases more and more.\nFor example, Prof Clóvis gives a talk to 4.000 people. And everyone stood up and clapped at the end. Well, now the professor wants 8.000 people the next time, and more, and more. &gt; Prof. Clovis said what he actually wanted to do was buy a car and ride to the mountains to live a peaceful life, but then he wouldn’t have money in 6 months. (Translator’s Note: Brazillian professors salaries are bad)\n\n\nActivity and Reactivity\nWe are energy searching for more energy, but that doesn’t mean we are always finding it, at many times we collide with opposite energy forces. These forces, according to Nietzsche come in two types: active and reactive.\n\nThe active force exists on its own\nThe reactive force exists to oppose a pre-existing active force\n\nNietzsche would say we are all moved by active and reactive forces, in different moments one type is more prevalent than another, but the “strong” person is driven mostly by active forces while the “weak” person is driven mostly by reactive forces.\nThe most primal active force, according to Nietzsche, is art, since the artist is moved by active forces and is sovereign. The artist does what their body wants. Art in Nietzsche can be seen as anything moved by a person’s own potency.\nAn example of reactive activity is bureaucracy. Who makes rules and regulations? Is it the people that live expanding the limits of possibilities? Or is it someone wanting to stifle this first person?\n\nThe professor jokes that the reactive person is reactive since they are a kid: the kid who tells on the others and makes everyone get grounded\n\nSo in this same line of thought, who is more likely to create moral rules? A person moved by active forces or reactive ones? Evidently the reactive one, or as Prof clóvis jokes, the “Lazy Ass Syndicate”. And it works because there is no lack of lazy ass people to fill in the syndicate roles. And it works even more because the fun part of being a lazy ass reactive is that you can just unite with other lazy ass reactives and increase your power. After all, since the objective in common is to screw some active force, the active forces can’t unite because they are mostly unique. How hard is it to make a team by simply combining the best individual players? It’s very hard, much harder than uniting for a common cause to screw a single activity. The weak people can always unite, and the strong people are mostly alone.\n\nAgain the professor reinforces this is all Nietzche views, not his own\n\nHere a student questions how this fits the democracy rant. Prof Clóvis reinforces that, within Nietzsche’s views, democracy is a system controlled by reactive forces, therefore by the “weak” people. This idea is discomforting because we were raised in the paradigm of Christian equality. When Nietzsche attacks the Democracy he is attacking Equality and therefore the “religious structure of thinking”."
  },
  {
    "objectID": "posts/nietzsche/index.html#key-concept-3-amor-fati",
    "href": "posts/nietzsche/index.html#key-concept-3-amor-fati",
    "title": "The Keys to the Nietzschean Castle",
    "section": "Key Concept #3: Amor Fati",
    "text": "Key Concept #3: Amor Fati\n\n“Amor Fati” is the Nietzschean concept of loving the world as it is. It is not about tolerating the world, it’s about loving the world as is. It’s not just loving a specific part, but the whole reality. Because if you decide what part you love and what part you don’t you have succumbed to nihilism.\n“Oh but I want the world to be like XYZ” well then you don’t love it as it is now, so that is not “Amor Fati” by Nietzsche’s standards. Nietzsche is clearly not like Che Guevara, or any other idealist. Nietzsche is an anti-idealist.\nYou can roughly split philosophy in 2 groups:\n\nGroup 1 recommends that a good life is a life engaged in the process of transforming the world (IE Marx)\nGroup 2 recommends that you conciliate with reality (IE Stoics, Spinoza, Nietzsche)\n\nDepending on your life context you might lean more into one or another\nNietzsche’s view (that is in Group 2) on why we should focus on the present go back to the stoics, especially when they say that there are 2 great evils for man: the past and the future\nThe past is a time that doesn’t exist in the world, it’s what St. Augustine would call “Soul Time”, it exists only for us. Past is memory. Past is actually present because when you remember things you are doing in the present time. Our memories are from the present and not from the past.\nThe future is also inexistent and it happens in the present. To think of the future is to create narratives in your head that don’t exist today.\nSo the world is just the present, and the rest is imagination. But why are past and future “bad”? Because they produce real consequences over life (a form of nihilism).\nWhen you spend time thinking of what happened in past:\n\nIf the past is good you are fueling nostalgia, which is just a coping mechanism for what’s happening in the present.\nIf the past is bad you are fueling guilt. “I should have done XYZ”.\n\nWhen you spend time thinking of the future:\n\nSuffering in anticipation of a bad future won’t help you in the present. Also known as fear.\nThinking of a better future fuels one’s hope.\n\nNietzsche is saying that nostalgia, guilt, hope, and fear are all negative places to rest your thoughts. The more you think about them, the more you will be affected in the present by “Soul Times” that don’t exist. Your present life is being fragilized or in other words: unfocused.\nA life with no focus leads to no intensity of experiences. So thinking of the past and future removes intensity from the present. The intense life presumes alignment between the present body and the present mind. And not just any sort of alignment, is like a love-relationship alignment. Therefore it’s a search for reconciliation with reality.\nWhoever is guided by hope is being guided by a feeling that has 3 characteristics:\n\nIgnorance: when you wait for something you have no assurance that the thing will happen, so you live partly in ignorance. When you are not ignorant about whether something will happen you don’t create hope.\nImpotence: if you could make it happen right now you wouldn’t need hope, so having hope means you are powerless about the outcome.\nChastity: hope is not joyful. Joyfulness is about presence, hope is a type of desire and desire implies something is missing.\n\nIn this line of thought, the Nietzschean view of “wise” is aligned with the stoics. Wise is searching for how to live. This view of wise opposes common sense where a wise person “knows a lot”. The Nietzschean wise may or may not know college-level math, but this doesn’t make them any wiser, what does is the interest in searching and discussing how to live a good life, which means reconciling yourself with the present reality, as is, no changes. Love for presence and present interactions. The opposite of loving an ideal, therefore anti-ideal, since ideals are about what is not in the present.\n\nProf Clóvis makes an analogy of how often it is for someone to love a version of their partner that they wish that existed, and not actually love the real present one. And it is very common that the ideal version doesn’t match the present version. The proof of this is when your partner does something and you get mad at them, because what they did has broken your illusion, and with every new move that breaks more the illusion it gets more clear to you that you might not love them. The solution is to love people as they are and not the ideal version.\n\n\nA joke example the Prof. makes is: imagine you find out your loved one has an affair with another person and you didn’t know. By Nietzsche standards, you should now love the partner MORE, because you know more about who they are in present. This seems crazy by usual standards, but the reflection is, if you get pissed off with your partner it means the object of your love is not the partner, but the ideal version on your head that you think only loves you, and this version of them doesn’t exist. The one that exist might love you, but what brings them joy is another person. Loving your idea of that person, in the extreme limit, doesn’t even require the person to be there present with you.\n\nAn excerpt from Buddhist writings: “don’t forget that the moments here and now and the people here and now are the most important of your life, because they are the only real ones”. It’s the same concept of reconciliation with the present world, made in the present world, which Nietzsche called “Amor Fati”.\nConnecting all things, what Nietzsche means is that if you don’t deconstruct the idols, you cannot reconcile with the world as it is.\n\nProf. Clóvis jokes that “if you think that your professor must be from Harvard to be good you can’t love the professor that is just a person like you (reality)”. “if you have in your head that it is only cool to live in a specific place then it is impossible to love the place you live”. “if you think the only job that will be good is in a specific place it’s impossible to love the place that you currently are”.\n\nThe love for real is the deconstruction of the ideal.\nWhile the idols haven’t been deconstructed, we are victims of an illusion. The illusion that living in New York will be better. That good life is about having a top-model body. Slave of the illusion that the good life presupposes having an expensive white car, slave of the illusion of thinking that to be a good professor you must teach at a “top ranked” university. While the idols haven’t been deconstructed, we are slaves of illusions! What is the chance that the world will be like the one someone idealized? None, because if there were any, it would be the reality and not an ideal. So the person that waits for the real to become the ideal will never love anything.\n“Do not expect from the world more than it can give.” (Prof Clóvis says his father used to say that and it is very Nietzschean)\nAn excerpt from “Ecce Homo”: my formula for expressing what is great in man is amor fati, do not wish for things beyond what they are, neither forwards or backwards and continues not even in centuries and centuries throwing shade at religion, it’s not about tolerating the inevitabilities, it’s about loving them, and way to love is distancing from idealism\n\nThe Prof. tells the students to read “Thus Spoke Zarathustra” prologue."
  },
  {
    "objectID": "posts/nietzsche/index.html#key-concept-4-will-to-truth",
    "href": "posts/nietzsche/index.html#key-concept-4-will-to-truth",
    "title": "The Keys to the Nietzschean Castle",
    "section": "Key Concept #4: Will to Truth",
    "text": "Key Concept #4: Will to Truth\n\nThe “Truth” is searched for by philosophy and science. The common conception of truth is the correspondence between “what the world is” and “a speech about it that intends to describe it as it is”. To Nietzsche, the “truth” is the spearhead of nihilism. An idol like any other. If the search for truth is not part of real life, then why do people do it so much? And why do we expect from people to morally abide by it?\n“The truth” is a very well-polished metaphysical crutch. The way to emit “a truth” happens through words and speech. So the one that believes in “a truth” believe in some correspondence between discourse and reality. Therefore one believes that words can correspond to reality. This premise for Nietzsche is absurd since reality can’t be translated into words. So you wrote a thesis? fart sound made with mouth, silence, know that the world will follow one path and your thesis another, and if you call “the truth” any equivalence between your thesis and the world fart sound again it’s completely idiotic.\nA simple example: “the banana is on the table” might seem like it describes reality, but digging deeper, there is no banana equal to another because nothing is equal to another thing in the world, equality is a mathematical operation and exclusively an intellectual resource, it is not an empirical resource, it can’t be used to associate things in the real world, it can only be used in math. Back to the banana, if no banana is like another, and I intend to describe the world “as is” then the conclusion is that each banana should have an exclusive name, which would make communication impossible. We as humans agree that we can call any banana “banana” so we can communicate. But going even deeper, how much time was the banana left on the table? Is today’s banana the same as tomorrow’s? So we would need exclusive names for each point in time for each instance of bananicity for every banana just to try to depict “the truth as it is in the real world”.\n\nProf. Clóvis jokes “I had to give names to each banana and numbers for their position in time so I could precisely say I ate Georgia 8 and Stefania 17 for breakfast”\n\nThe point is that when we agree on just “banana” we give up on the premise of making this an accurate description of reality. Words cannot describe life because in life everything ceases to be, while words have the pretension to describe everything as they are. So the words stay and the banana rots. There is a fundamental problem: for words to describe the world as-is, we would need infinite words to describe reality and communication would be impossible. Truth is about finding relations between speech and reality, which is impossible because a millisecond after you describe the world it has already changed. There is a mismatch between reality and what is described by words.\n\nProf Clóvis comments that his name is Clóvis despite being his young dumb version or his adult dumb version, the idea of name is against reality since it implies it is the same when he has transformed, so “Clóvis” doesn’t actually mean nothing, because if it did it would only work for one instance.\n\nPeople seek the truth. Why? Because the truth stands still, while life goes on. We have a psychological need to pull life’s handbrakes for not tolerating it as is. Because reality is impermanent, and things, in reality, will always cease to be, and what we do is search for a truth, a handbrake to hold on to. Fun fact: every god in existence is “eternal”, the same concept of the handbrake. The world can move on forever, god will be here! And so does math! So who loves these concepts? The people that don’t see that nothing in life can be translated to numbers and that everything is flowing, so the person is desperate and says “NO!” and pull all the handbrakes to create a safe place where in this place we think we have control. Because in the real world nothing is controllable because when you try to catch it, it has already become something else. There is a psychological tendency to transform the world into something that it isn’t because the existing world has no truths.\nSo the truth is an illusion and everybody plays this game, I say I am something you say you are another thing, nobody is actually something but everyone is playing the same game. The truth game. Because it tranquilizes us. A person that understands this concept and accepts reality is what Nietzsche calls an “Übermensch” or “Beyond the Man”.\nThis line of thought is powerful and is part of what made Nietzsche become so reverenced, and it is the foundation for post-modernism. The will to truth is our will to pull the handbrakes because we can’t handle the traffic from life. A metaphysical crutch by excellence. A search for eternity in a space of fleetingness. A search for solitude in a space of fluidity. The unsustainable lightness of being. When you stop to look it’s not the same anymore.\nWhat is legitimate knowledge by Nietzsche’s standards, if the truth is meaningless? Genealogy."
  },
  {
    "objectID": "posts/nietzsche/index.html#key-concept-5-genealogy",
    "href": "posts/nietzsche/index.html#key-concept-5-genealogy",
    "title": "The Keys to the Nietzschean Castle",
    "section": "Key Concept #5: Genealogy",
    "text": "Key Concept #5: Genealogy\n\n\nGenealogy means: a line of evolutionary development from earlier forms\n\nWhat comes to our mind is the smallest and worst part of our psyche. That is the tip of the iceberg. If you think something good came into your head, know that there are parts of your psyche that are even better. You are much ampler than the thought in your head. What you think and don’t come to your mind is called “Unconscious”. Imagine if all your thoughts were on the floor and your consciousness is a spotlight shining on them and moving (much like the sea example in the disclaimer section), your unconsciousness will still retain knowledge and think outside of this process! A quick example: when someone asks you something you know but don’t remember it at that exact time, and then out of nowhere “AHA!!” you remember now! You didn’t unlearn and learn it very fast, but rather your unconscious knew it and eventually the spotlight reached it.\nsomething think inside me. You are not the master of your thoughts. Thinking is a body activity that transcends conscious control.\nconsciousness is the smallest and worst part of what an individual thinks therefore unconsciousness is essential.\nWhen Nietzsche talks about genealogy, what matter is: “why did you think something?” or “where did this thought come from?”. Genealogy is the forces behind the thought that came into your head — the origin of a thought in you. Imagine you lie on a couch and a psychoanalyst is behind you saying you to tell what is in your head, this is what psychanalysis call “free association of ideas”, this is like trying to understand what is happening in real-time to understand someone’s psyche better. What matters to Nietzsche is who is moving the spotlight? It is not you. At this exact time, your body organs are involuntarily doing things, your brain is exactly like that, you are watching your thoughts as they appear on you. If you said something, was it “you” that said it? Both yes and no are correct answers because it did come from your sum of forces, but there is no “I” articulating this process.\nImagine I (you, but in first person) will be interviewed for TV and someone asks me something. There is no process of I think, then I process, and then I speak. What happens is that something is thinking inside of me while my mouth is enunciating whatever comes to mind. And “I”? There is no “I”! Just like you don’t control internal body organs you don’t control the brain, it just spews things uncontrollably, so there is no “I” that thinks of these things. “There is no I” screws 90% of what we think because most things we think start with “I”. If there is no “I” isn’t Prof. Clóvis at this moment giving a class? No, he is watching himself speak, there is no “I” designing things to say, what exists is forces that produce thoughts just like there are forces that digest food in your body.\nSome forces make blood circulate and some forces make thoughts come into your head, and you are watching this process in first person, both what is being thought and what is being said. It’s easier to realize this when you have to produce a powerful speech and you catch yourself speaking non-stop. There is clearly no process behind just “spitting thoughts as words” and you even get impressed by watching whatever you produced in this state, because it doesn’t even look like what “you” would have produced, that is the entirety of your body speaking. It’s your body moved by vital forces spewing symbols. There is no control. These vital forces is what Spinoza called “God”.\n“There is no I” is a core concept to grasp and better read this type of thought. Marx: “What comes into your head is ideology and ideology doesn’t come by itself, there is an unconscious collective that is determined by forces and relations of production” Freud: “What comes to your head is the tip of an iceberg that you don’t control and is not conscious about”. But between Nietzsche, Marx, and Freud views there are fundamental differences. When you go to a psychanalytical office and they start to speak:\n\nA Freudian has the pretension to establish some truth with speech, “the truth of the unconsciousness that emerges in the analysis”. Hence, the analyst builds a grammatic that relates what is being said with what that means, and this grammatic is called “interpretation of dreams”. So psychoanalysis is a form of constructing truths on top of the unconsciousness of the people that submit themselves to this type of analysis.\nMarxism is the conviction that sociology identify truths about what is on people’s head when it comes to ideology\n\nIn both cases, the speech is analyzed from the perspective of a scientist. In the position of someone that knows something, the other doesn’t. And they have the advantage to connect the dots and reach “the truth”.\nNietzsche would say that when you analyze the world, or a speech, the interpretation itself is interpretable, and the interpretation of the interpretation is interpretable, repeating infinite times. There will always be a cave behind the cave, interpretations to infinity. Imagine a Freudian psychoanalyst giving their analysis to a patient, it ends there. To Nietzsche, it doesn’t end there, because to Nietzsche what the psychoanalyst says is the result of their vital forces, which can be interpreted by another person moved by another life’s forces, repeated to infinity. This is what Nietzsche calls “our new infinity” found in Twilight of the Idols and Beyond Good and Evil. “Our new infinity” is the fact that when we talk about the world we are simply regurgitating our vital forces, in an infinite process.\nThe speech from the psychoanalyst is not “more truthful” than the speech from the patient itself. And if a new psychoanalyst analyses the analysis made by the first psychoanalyst it would also be not “more truthful” than any. Each is just what the vital forces of each individual are resulting. Prof Clóvis’s classroom is a manifestation of vital forces, students went there thinking they would absorb truths about philosophy when in fact they are learning about what delights the professor, and that’s it. Every word is a mask for an illusion. &gt; Here are my guts in form of words — Prof. Clóvis\nA characteristic found in postmodern authors is that they will always say that whatever comes out of their mouths has no pretension of being a truth, it is just what the body produced at that time."
  },
  {
    "objectID": "posts/nietzsche/index.html#key-concept-6-eternal-recurrence",
    "href": "posts/nietzsche/index.html#key-concept-6-eternal-recurrence",
    "title": "The Keys to the Nietzschean Castle",
    "section": "Key Concept #6: Eternal Recurrence",
    "text": "Key Concept #6: Eternal Recurrence\n\nAn “Übermensch” is a person that accepts life as is without the support of any of the nihilist “metaphysical crutches”. An Übermensch lives a life following the anti-nihilism, which Nietzsche also calls “The Eternal Recurrence” (in Portuguese ”Eternal Return”).\n\nTranslator Note some recording is lost but remember this was part of the content: A classic story from Nietzsche is a demon that shows up and asks you if you would relive the saddest moments of your life forever. If you answer “yes, I’d love that” then you have reached Übermensch.\n\nAnother way to see this is through the Sisyphus myth. Sisyphus is always pushing a boulder to the top of the mountain just so it falls for him to push it again, forever. But what decides if Sisyphus is living a paradise dream or a hellish punishment is whether he enjoys pushing the boulder or not.\nMorals and ethics are about thinking of good ways to live, and time is a crucial component of this process because thinking about this takes time. But we are not interested here in reflections about eternal life, because if there is eternal life it would escape any ethics. Ethics is restricted to its temporality, the one that we live in. This certainty that we must consider life in its temporality exists in many older mythologies. For example, Ulysses is taken from his home against his will to go to war, and the book Odyssey is about his return home after the war was won with his plan of the trojan horse. His regression becomes harder because he blinds a cyclops son of Poseidon right at the start. So Poseidon makes Ulysses’s journey back home very hard, and one of the obstacles was the passage through the island of Calypso, a wonderful god that offers everything to him. But Ulysses wanted to go home, and after many temptations, her final offer to him is eternity and youthfulness. Ulysses answers that he would rather live a good mortal life than a bad eternal life.\n\nTranslator Note some recording is lost, but Clóvis read the following aphorism to guide this concept:\n\n\nIt’s on the present earth that we shall decide what deserves to thrive and what deserves to perish. Live a life you want to relive, this is the task. If you want to work then work, if you want to relax then relax, but know very well where your preferences are and don’t ever back down, the eternity of life is at stake.\n\nThe Eternal Recurrence is the most popular concept from Nietzsche and the most influential of them all. There are many interpretations, which is natural and not a problem, since Nietzsche would be the last person to elect a “true” interpretation. “There are no facts, just interpretations”. The attempt to fix one truth is a demonstration of the power of one over other interpretations. The interpretation chosen here will be the one from Professor Luc Ferry.\nThe Eternal Recurrence is a criterion to evaluate life. The previous criteria evaluate if something is worth living transcend life, they happen outside life, and they are external to the living being, like we saw in the Aristotle’s “cosmos” and the Christian god. So older criteria teach us that if we want to evaluate our own life we can’t do it by ourselves but we must consider things external to us. For example, the Marxist criterion for a good life is a life engaged in fixing societal injustices, so it depends on you participating in things external to your life to achieve “goodness”. The issue with older criteria is that you have to live your life as someone else wants you to, and in the end, who the f* decided that we should pursue that one view?\nThere is an infinite number of models that try to say what is good, and the criteria are external to the individuals. There is no lack of people trying to sell you their model as if it was the obvious way to live. And if external criteria control your life it is the same thing as if the criteria (or whoever invented it) were dominating your life. The world of business is a world where all these ideas thrive. There is no lack of conferences with loads of people bringing a new framework that solves something in your life. The term “quality of life” is pernicious, you don’t measure a pizza’s “tastefulness”, it just tastes good. We have a quality car, not “quality of car”, we have quality experiences, not “quality of experiences”, this small “of” inverts something that made sense “my life has quality” into a pernicious thought made to try to sell you something “what’s the level of quality my life has and how can I increase it?”. There is no standard for quality. Each individual has their own perception of “this is/isn’t a quality life” and this perception may change at any moment, so there is no way to measure it. The person using “quality of life” in a speech intends to sell you their quality criterion.\nThe fun and peculiar thing about the Eternal Recurrence is that it is a criterion that does not depend on anything external to you. All other models don’t consult you to decide the “best criterion for living”. For example, Prof. Clóvis says he loves his work and to talk about this subject. He doesn’t do this class for the money since a public professor’s salary in Brazil is very low, he goes to class because he prefers doing that over anything else. He says that whenever someone says “a better life is one where we reduce labor time” (a very common point in his profession) he says that it would impoverish his life’s quality since he loves being in class and teaching.\nThe Eternal Recurrence will say you should live a life you want to relive. If you want to relax, then relax. If you want to work, then work. But know your preferences because every decision will echo for eternity. So the criterion it proposes is: “whenever you are going to decide something, decide in favor of what will make your life worth reliving, without regrets”. If what makes you happy is praying, then pray. If what makes you happy is painting, then paint. But know very well what you really have an appetite for and don’t back down, because the world will try to persuade you into thinking you are on the wrong path. One cool thing to notice is that by Nietzsche’s standards there is nothing evocative of appetite by itself.\nWe discussed eternity being opposed to life, so why is Nietzsche talking about eternity? Because what is eternal in this case is the wish that the present moment was eternal. The wish that id doesn’t ever end. The feeling you get when you do what you like the most, and it’s not guided by anything but your own will to do it. This is you telling yourself that what you are doing is worth reliving. It is the Eternal Recurrence of a moment in itself. You should act in ways that your life moments feel eternal. The moments don’t have to remain eternal in any future after this exact moment. What is important is that the feeling of wanting to be in this moment is eternal. This is a symptom of a well-lived life by Nietzschean standards."
  },
  {
    "objectID": "posts/yearn-lido-risks/index.html",
    "href": "posts/yearn-lido-risks/index.html",
    "title": "Yearn Strategies Case Study: Lido Staked ETH",
    "section": "",
    "text": "Last month we published a DeFi risk case-study that used the lens of the Yearn Risk Framework to analyze the risks involved in operating a yield strategy for the DAI Yearn Vault. This article will use similar methods to look at the risks of investing in stETH (Lido Finance Staked ETH) using Yearn vaults and strategies.\nTo guide our journey, we will explore the risks for each layer until we reach the “steCRV yVault” that includes the risk of all parts, following these in order:\nOne important thing to note: the Yearn Risk Framework will give scores to strategy operation risks, not token-holding risks. So for example a strategy that invests token X in protocol Y will have risk scores tailored for protocol Y, but the risks for holding token X are on the user. By following through with all the above questions, we will be able to understand both the token-holding and operational risks for each step. &gt; The Yearn Strategy Descriptions Glossary might help you if you struggle with the DeFi lingo!"
  },
  {
    "objectID": "posts/yearn-lido-risks/index.html#proof-of-stake-yield-and-validators",
    "href": "posts/yearn-lido-risks/index.html#proof-of-stake-yield-and-validators",
    "title": "Yearn Strategies Case Study: Lido Staked ETH",
    "section": "Proof of Stake yield and Validators",
    "text": "Proof of Stake yield and Validators\n\nAs of September 15, 2022, Ethereum started using the Proof-of-Stake (PoS) process to validate new transactions added to the blockchain. The previous method, Proof-of-Work (PoW, required “validator nodes” to spend energy to validate transactions. In Proof-of-Stake, validator nodes use ETH deposited in it to validate transactions, achieving the same result.\nValidators checks that new transactions propagated over the network are valid. When users stake (deposit) ETH in a validator node, they invest in the network’s security and help it keep functioning. In return, stakers are rewarded with new blocks reward emissions for new transactions validated.\nETH deposited in validators can be partly slashed if the validator behaves dishonestly. Slashed ETH is mostly burned, and a small percentage of the slashed amount goes to the nodes that reported the misbehavior.\nThe Ethereum Foundation has a great resource on the types of staking you can participate on:\n\nSolo home staking: Most impactful, Full control, Full rewards, Trustless.\nStaking as a service: Your 32 ETH, Non-custodial keys, Entrusted node operation.\nPooled staking: Stake any amount, Earn rewards, Keep it simple, Popular.\nCentralized exchanges: Least impactful, Highest trust assumptions, Not your keys.\n\n\nProof-of-Stake Risks\n\nA user with 51% or more tokens for a PoS network can control it. To mitigate this risk, the tokens can be fairly distributed to ensure enough decentralization. “Fair Launch” methods contain their own set of risks since “fairness” is a subjective concept.\nPart of staked ETH can be slashed if a validator misbehaves. This adds a layer of risk when staking on someone else’s validator.\nProof-of-stake is younger and less battle-tested than proof-of-work.\nRequires two separate software pieces to run a validator, which is more complex than PoW. Can lead to more software bugs.\n\nThe Ethereum community has agreed that the risks of PoS are worth it over the risks of PoW after years of discussion. If you want to receive Proof-of-Stake yield with no added trust assumptions and still provide the best value to the Ethereum network, then solo staking is the way but it requires the most knowledge and capital to start."
  },
  {
    "objectID": "posts/yearn-lido-risks/index.html#liquid-staking-lido-finance-and-steth",
    "href": "posts/yearn-lido-risks/index.html#liquid-staking-lido-finance-and-steth",
    "title": "Yearn Strategies Case Study: Lido Staked ETH",
    "section": "Liquid Staking, Lido Finance, and stETH",
    "text": "Liquid Staking, Lido Finance, and stETH\n\nIf you want to take part in Ethereum’s Proof of Stake process and do it yourself then there are a couple of key blockers that might prevent you from doing it:\n\nUsers need at least 32 ETH to make a solo validator node.\n\nStaking as a Service solves the above problem but:\n\nETH staked can’t be withdrawn, so it becomes illiquid for ANY other usage such as collateral or trading\n\nTo facilitate this Pooled Staking was created, and along with it, Lido Finance created a new DeFi product: stETH.\nTo understand stETH we need to know what is Liquid Staking first:\n\nStaking is when you lock your assets, maybe for a set period. In PoS this is done to help support blockchain security through the staking/slashing process.\nLiquid Staking is when the staking process gives you a receipt token that can be traded in the market, normally near 1:1 value of the staked token since you will be able to be redeemed for one in the future.\n\nstETH is the liquid-staked version of ETH provided by Lido Finance. To have stETH, one must deposit ETH in Lido’s platform, and it creates stETH on a 1:1 ratio for you. Lido stake all ETH deposited and splits yield with all stETH holders. The deposit operation can’t be reversed today, so if you want to go back from ETH to stETH you have to sell stETH in the market.\n\n\nstETH Risks\nstETH doesn’t have a withdrawal mechanism today, so users depend on the market valuing stETH 1:1 with ETH, this price relation can trade at discount in case of a big sell-off. In contrast, Lido is a reputable protocol that you can track onchain where every single ETH is at. In case of price trading at discount it creates an opportunity for people to buy cheaper ETH, and most people today believe in the capability of Ethereum and Lido teams to deliver a withdraw function in the following years to come. Today’s bottleneck for staking withdraws is mostly on Ethereum’s side rather than Lido.\nIf you want to learn more, Lido explains all risks involved in stETH about the risks of:\n\nSmart Contracts (can have bugs).\nEthereum Virtual Machine (can have bugs).\nDAO management (can be mismanaged).\nValidators (ETH can be slashed).\nMarket Prices (can make exiting stETH expensive if price trade at discount from ETH).\n\nAs of writing, Lido has about 4.7m ETH locked in them and $5.7b worth of circulating stETH:\n\nIn the next section we’ll see how Yearn evaluates the risk for depositing ETH in Lido to convert stETH, and learn the Yearn risk scores around it compared to the rest of DeFi yield strategies. stETH is considered one of the lowest-risk strategies, but it still contains many inherent risks (listed above)."
  },
  {
    "objectID": "posts/yearn-lido-risks/index.html#yaern-eth-vault-and-steth-yield",
    "href": "posts/yearn-lido-risks/index.html#yaern-eth-vault-and-steth-yield",
    "title": "Yearn Strategies Case Study: Lido Staked ETH",
    "section": "Yaern ETH Vault and stETH yield",
    "text": "Yaern ETH Vault and stETH yield\n\nOne way to be exposed to stETH is by using Yearn Vaults. The benefit of using Yearn here is that you can deposit/withdraw wETH at any time in the ETH yVault, and today it allocates about 1/3 of its funds into stETH, alongside other yield strategies.\nThere is another strategy in ETH vault active strategies that also uses stETH. And it uses about 20% of the ETH yVault funds. This strategy “delegates deposits” to the steCRV yVault. In the Yearn ecosystem, a “delegate deposit” is when a yVault deposits in another yVault, and this can be seen in yearn.vision for every vault. In this case ETH delegates to “steCRV” vault (which will be explained in the next sections):\n\nAt yearn.watch/risk we can see the risk for both strategies. Lower Number = Less Risk. You can see the meaning for each score in the Previous Article and in Yearn Risk Framework page.\n\nThis strategy just holds stETH (stETHAccumulator_v2) (it got migrated from v1, so TVL score is not displaying correctly here since these are the scores for v1)\n\n\n\nThis strategy delegates to steCRV Vault (single sided curve eth steth)\n\n\nIn the below risk table, Bottom-to-top is the level of impact in case of a problem, left-to-right is the likeness that it can occur. Bottom-left is less risky, top-right is riskier:\n\nAt the time of writing (percentages can change at any time!) when depositing ETH in the Yearn ETH Vault:\n\n33% stays as stETH generating yield\n21% is delegated to steCRV Vault (that we will learn about in the next section)\n40% is switched between different lending strategies (this was the first strategy type that Yearn had)\nThe rest (6%) goes into other smaller strategies\n\n\nETH yVault risks\nBesides the risks of strategies taking a loss, which is mitigated by the “Yearn Risk Framework”, Yearn vaults also contain risks of their own. Since the ETH vault uses Lido as part of a yield strategy, the risk scores include the Lido protocol. When we move on to steCRV we will see that this is different: Yearn will not include Lido in the strategy scores for steCRV because the yield strategy operations do not use Lido.\nThe full risk overview of using the ETH vault is the sum of the risk scores for its strategies plus inherent vault risks: (Taken from the docs)"
  },
  {
    "objectID": "posts/yearn-lido-risks/index.html#stecrv-liquidity-pool",
    "href": "posts/yearn-lido-risks/index.html#stecrv-liquidity-pool",
    "title": "Yearn Strategies Case Study: Lido Staked ETH",
    "section": "steCRV liquidity pool",
    "text": "steCRV liquidity pool\n\nWe know what stETH is and how the ETH yVault uses it for yield, but there is another way to earn yield on top of stETH: the curve stETH/ETH liquidity pool. (see here to learn more about LPs)\nIn stETH+ETH liquidity pool at curve people can:\n\nSell stETH to ETH\nBuy stETH for cheaper than locking ETH at 1:1 on Lido (depends on market conditions)\nProvide Liquidity stETH+ETH liquidity and earn trading fees\n\n\nThe token you get when depositing stETH+ETH to this liquidity pool is called steCRV (address). This token is already a “yield-bearing” token since it represents an LP position that earns trading fees + CRV emissions. But there is one extra layer of yield that Yearn taps into to make the steCRV yVault, our next and last section.\n\nA convenient feature found in Yearn steCRV vault is the ability to skip doing all the above steps manually by using zaps:\n\nYearn colabs with CoW Swap and portals.fi to constantly improve the zaping operational security and efficiency. Here is an example zap from ETH but you can zap from other tokens too:\n\n\nsteCRV risks\n\nAll inherent stETH and smart contracts risks\nAll liquidity pools have a risk of Impermanent Loss. This pool’s assets are supposed to be 1:1 in ratio, but if many people sell stETH and no one repurchases it before you exit the LP, then IL may occur.\nCurve protocol risks (which will be covered next section of this article because the steCRV yVault risk score covers the Curve protocol)"
  },
  {
    "objectID": "posts/yearn-lido-risks/index.html#yearn-stecrv-vault",
    "href": "posts/yearn-lido-risks/index.html#yearn-stecrv-vault",
    "title": "Yearn Strategies Case Study: Lido Staked ETH",
    "section": "Yearn steCRV Vault",
    "text": "Yearn steCRV Vault\n\nIn the previous section, we saw that Curve’s role in this ecosystem is to provide the ETH+stETH Liquidity Pool. Because of Curve Wars, a protocol called Convex Finance emerged, which builds a layer ontop of Curve.\nThe steCRV yVault stakes steCRV in Convex. There, it earns CRV and CVX yield. Earned tokens are harvested, sold for more steCRV, then deposited back into the vault (auto-compounded). This is a convenient operation since it maximizes the yield you can get from steCRV and automates harvesting in Convex. It also cost less gas overall per user because Yearn shares the operational gas prices with all vault depositors (like all other yVaults).\n\nYou could do this operation manually and not use yVaults though:\n\nObtain stETH at Lido or swap at Curve\nDeposit stETH+ETH on Curve, receiving steCRV\nStake steCRV on Convex\nPeriodically harvest rewards, sell them for more steCRV, and stake again in Convex\n\nBy delegating this operation to steCRV yVault you get the following:\n\nGas fees for operations are shared across all other users, which translates to higher yields\nHarvest and compound are automated, which is convenient\n\n\nsteCRV yVault risks\n\nAll inherent stETH, smart contracts, steCRV risks\nIncreased overall risk since there are more smart contracts involved (Convex adds another layer of risks)\nYield harvest+compound schedules are controlled by Yearn\n\n\n\nThe overall risk score for this vault is higher than the other ones we looked at, meaning this set of yield strategies is one of the highest risk/reward Yearn has by its own standards."
  },
  {
    "objectID": "posts/yearn-lido-risks/index.html#learn-more",
    "href": "posts/yearn-lido-risks/index.html#learn-more",
    "title": "Yearn Strategies Case Study: Lido Staked ETH",
    "section": "Learn More",
    "text": "Learn More\n\nYearn strategy risks are complex to measure. The discussed steCRV yVault example showcases how any scenario, even when using only reputable protocols, must be taken seriously to protect users because of the high impact on the ecosystem. The more educated users, protocols, and devs are in assessing risk regarding strategies and other yield-generating operations, the safer DeFi will be for everyone to use it.\n\nLido docs (risk page)\nCurve docs (risk page)\nConvex docs (risk page)\nYearn docs (risk page)\nYearn risk scores descriptions\nYearn risk table\nYearn strategy descriptions glossary\nYearn vision yVault overview\nsteCRV yVault watch\nETH yVault watch\nYearn &lt;&gt; CoW Swap colab\nCobie blog on staking risks (beyond PoS)\nBalaji blog on fair launches\n\nThanks to everyone that helped this article exist: Farrah, Dark Ghosty, storm0x, Facu, @steve0xp, Draper, Corn, Carvas\n\nAll banner images for this article were made with Stable Diffusion, you can find the prompt specifications and images used for titles here, feel free to use any of the pre-generated outputs as yours!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "All Articles",
    "section": "",
    "text": "Etherscan is awesome but is also a critical point of failure for Ethereum\n\n\n\n\n\n\n\n\n\n\n\n\nJan 5, 2024\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nAnswering the public questions about Yearn Finance\n\n\n\n\n\n\n\n\n\n\n\n\nJan 2, 2024\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nyETH: LSD Lobbying season is now open\n\n\n\n\n\n\n\n\n\n\n\n\nJul 4, 2023\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nPermissionless Yearn Vaults\n\n\n\n\n\n\n\n\n\n\n\n\nMar 16, 2023\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nyGenius: Chat with Yearn!\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 13, 2023\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nYearn Strategies Case Study: Lido Staked ETH\n\n\n\n\n\n\n\n\n\n\n\n\nJan 4, 2023\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nThe many use cases for Large Language Models in tech writing\n\n\n\n\n\n\n\n\n\n\n\n\nDec 27, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nThe Keys to the Nietzschean Castle\n\n\n\n\n\n\n\n\n\n\n\n\nOct 28, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nMeasuring risk for DeFi yield strategies\n\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nConjuring images with Stable Diffusion\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nyDaemon: one API to unify all yearn data\n\n\n\n\n\n\n\n\n\n\n\n\nSep 16, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nSubgraphs explained: Yearning for data\n\n\n\n\n\n\n\n\n\n\n\n\nAug 4, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nAutomatizando investimentos dentro da blockchain de acordo com o risco\n\n\n\n\n\n\n\n\n\n\n\n\nAug 1, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nWhere does on-chain yield come from?\n\n\n\n\n\n\n\n\n\n\n\n\nJun 24, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nYearn Vault Tokens as collateral\n\n\n\n\n\n\n\n\n\n\n\n\nMay 19, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nYearn Finance explained: What are Vaults and Strategies?\n\n\n\n\n\n\n\n\n\n\n\n\nMay 19, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nYearn Vaults v3\n\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nYearn governance explained: Proposals, $YFI token, and execution\n\n\n\n\n\n\n\n\n\n\n\n\nApr 19, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nSetup notifications for blockchain transactions with Tenderly\n\n\n\n\n\n\n\n\n\n\n\n\nMar 18, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nGenerate images with Open Source AI tools\n\n\n\n\n\n\n\n\n\n\n\n\nMar 8, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nYearn Partners: Building with yVaults\n\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nDiving into Yearn Metrics\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 17, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nHow Yearn calculates estimated returns (APY)\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nHow new Yearn Vault strategies are endorsed?\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 2, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nAvoiding Rug Pulls in Web3\n\n\n\n\n\n\n\n\n\n\n\n\nJan 24, 2022\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nProtocolos Grossos\n\n\n\n\n\n\n\n\n\n\n\n\nDec 16, 2021\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nGenerating pixel art NFTs and link to my web generators with sources\n\n\n\n\n\n\n\n\n\n\n\n\nDec 7, 2021\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nGenerating pixel art NFTs and link to my web generators with sources\n\n\n\n\n\n\n\n\n\n\n\n\nSep 4, 2021\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nSelf-Hosting Web3 Services\n\n\n\n\n\n\n\n\n\n\n\n\nMar 31, 2021\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nIsolating the impurity of randomness in card games\n\n\n\n\n\n\n\n\n\n\n\n\nApr 5, 2018\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nCriando seu próprio render engine em JS com Single Source of Truth\n\n\n\n\n\n\n\n\n\n\n\n\nDec 1, 2016\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\n  \n\n\n\n\nJS Closures: o que são, e como podem substituir as classes para criar objetos com métodos privados?\n\n\nUma alternativa para a criação de objetos utilizando ES2015 (“a nova atualização do Javascript”)\n\n\n\n\n\n\n\n\n\nJul 6, 2016\n\n\nMarco Guaspari Worms\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/protocolos-grossos/index.html",
    "href": "posts/protocolos-grossos/index.html",
    "title": "Protocolos Grossos",
    "section": "",
    "text": "Tradução do artigo: https://www.usv.com/writing/2016/08/fat-protocols/ Originalmente publicado por Joel Monegro em 8 de Agosto de 2016\n\nAqui vai uma forma de pensar sobre as diferenças entre Internet e Blockchain. A geração passada de protocolos compartilhados (TCP/IP, HTTP, SMTP, etc.) produziu uma quantia imensurável de valor, mas a maior parte desse valor é capturado e re-agregado no topo na camada de aplicações, grande parte em forma de dados (pense Google, Facebook, e afins). A pilha de camadas da internet, no termo de como o valor é distribuído, é composta de protocolos “finos” e aplicações “grossas”. Conforme o mercado se desenvolveu, nós aprendemos que investir em aplicações produz bastante retorno enquanto investir diretamente em tecnologias de protocolo geralmente produzem baixo retorno.\n\n\n\nCamada de protocolos na internet é fina\n\n\nEssa relação entre protocolos e aplicações é invertida na camada de aplicações de uma blockchain. O valor se concentra na camada compartilhada do protocolo e apenas uma fração desse valor é distribuído para camada de aplicações.\nNós vemos isso claramente nas 2 blockchains predominantes, Bitcoin e Ethereum. A rede Bitcoin tem cerca de 1 trilhão de dólares de capitalização total (tinha 10 bi quando o artigo foi escrito em 2016) e mesmo assim a maioria das empresas construídas em cima dele valem no máximo algumas centenas de milhões, muitas delas infladas quando analisadas pelos padrões comuns de negócio. Similarmente a rede Ethereum tem cerca de meio trilhão de dólares de capitalização (tinha 1 bi quando o artigo foi escrito em 2016 e mal tinha aplicação para rede ainda na época)\n\n\n\nCamada de protocolos na blockchain é grossa\n\n\nExistem duas coisas sobre a maioria dos protocolos baseados em blockchain que fazem essa inversão acontecer: a primeira é a camada de dados compartilhados, e a segunda é a introdução de uma tecnologia criptográfica de token de acesso com algum valor especulativo\nFoi feito um artigo do mesmo autor desse texto sobre essa camada de dados compartilhada cerca de 1 anos antes desse artigo ser escrito, apesar de empoeirado os pontos principais permanecem válidos: ao replicar e manter os dados de usuários através de uma rede aberta e descentralizada que quebra silos de informação, ao invés de aplicações individuais controlarem isso, nós reduzimos a barreira de entrada para novas pessoas criarem um ecossistema mais vibrante de serviços e produtos que competem de forma saudável em cima do protocolo.\nComo um exemplo concreto, veja como é fácil migrar de serviços quando eles lidam com criptomoedas, em grande parte isso é possível pois todos têm o mesmo acesso aos mesmos dados de carteiras e transações de forma gratuita. Esses serviços não necessariamente cooperam uns com os outros, mas mesmo assim mantém interoperabilidade um com o outro devido a ambos serem construídos em cima dos mesmos protocolos abertos. Isso força o mercado a inovar os produtos em camadas que agregam mais para todos, e muitas vezes criarem produtos radicalmente inovadores.\nMas uma rede aberta e uma camada compartilhada de dados não são o suficiente para promover adesão. O segundo componente que preenche esse papel é o token do protocolo, que é usado pra acessar os serviços fornecidos pela rede (transações no caso do Bitcoin, poder de computação no caso do Ethereum, armazenamento de arquivos no caso do Filecoin)\nUm outro autor focou em analisar o token de protocolo do ponto de vista de como eles servem para manter o incentivo a inovação dos protocolos abertos, aqui nós vamos focar em como os tokens ajudam o protocolo a conseguir adesão pública e como isso afeta a distribuição de valor através do que vamos chamar de “ciclo de incentivos do token”\n\n\n\nciclo de incentivos do token\n\n\n\nQuando um token obtém valor ele atrai a atenção de pessoas diferentes, sejam especuladoras, desenvolvedoras, ou empreendedoras. Essas pessoas se tornam uma parte altamente interessada no sucesso do protocolo além de estarem financeiramente investidas nele.\nA partir disso algumas dessas pessoas constroem produtos e serviços ao redor do protocolo, reconhecendo que o sucesso dessas iniciativas agregaria valor ao token do protocolo.\nAs iniciativas que têm sucesso atraem mais pessoas e até investidores para o protocolo, que constroem mais aplicações e o ciclo se repete.\n\nExistem dois aspectos a se notar nesse “ciclo de incentivos do token”. O primeiro aspecto é o quanto do crescimento inicial é movido por especulação. A maioria dos tokens são programados pra serem escassos, e conforme o interesse no protocolo cresce o preço do token também cresce e isso aumenta a capitalização total da rede. Às vezes o interesse cresce muito mais rápido que a emissão dos tokens, levando a uma valorização no estilo de bolha.\nCom a exceção de esquemas deliberadamente fraudulentos, isso é algo bom. Especulação é comumente o motor da adoção tecnológica (referências dadas pelo autor para essa frase: ref1 ref2). Ambos os aspectos da especulação irracional — a explosão e a queda — podem ser muito benéficos para a inovação tecnológica. A explosão atrai capital e permite os que entraram antes lucrarem, e parte desse lucro é reinvestido em inovação (quantos investidores Ethereum estavam reinvestindo o lucro deles do Bitcoin?), e a queda pode ajudar a adoção a longo prazo da nova tecnologia pois com preços mais baixos mais pessoas conseguem entrar (é só ver quantas empresas foram feitas após a grande queda do bitcoin de 2013)\nO segundo aspecto a se notar do “ciclo de incentivos do token” é o que acontece no fim do ciclo. Quando aplicações existem e mostram sinais iniciais de sucesso, seja medido por atenção ou capital, duas coisas acontecem no mercado do token do protocolo: novas pessoas entram, aumentando a demanda por tokens, e os investidores existentes seguram seus tokens antecipando preços maiores no futuro, que faz a demanda ser mais escassa ainda. A soma dessas forças fazem o preço a subir bastante portanto a capitalização total do mercado sobre, e o novo patamar de capitalização total alcançado pelo protocolo gera o efeito que volta o ciclo pro ponto 1\nO que é significante sobre esse efeito dinâmico é como o valor é distribuído através da pilha de camadas que temos. A capitalização do mercado do protocolo sempre cresce mais rápido do que o valor combinado das aplicações construídas em cima dele, já que o sucesso da camada de aplicações implica em mais especulação na camada do protocolo. E de novo, aumentar o valor do protocolo ncentiva a competição saudável na camada de aplicação. Junto com a camada de dados compartilhada, que drasticamente diminui a barreira de entrada, o resultado final é um ecossistema vibrante e competitivo de aplicações e o grosso do valor gerado é distribuído para todos que possuem tokens do protocolo. É assim que a camada dos protocolos tokenizados fica grossa e a das aplicações ficam finas.\nIsso é uma mudança grande. A combinação de dados abertos com o sistema de incentivos previne os mercados do estilo “vencedor ganha tudo” pras aplicações e cria uma nova categoria de empresas com modelos de negócio fundamentalmente diferentes da camada de protocolo. Muitas dos modelos atuais de como construir negócios e investir não se aplicam nesse novo modelo, e temos mais perguntas do que respostas. Portfólio da USV traz muito conhecimento prático pro autor do artigo e mais conhecimento será dividido conforme for se consolidando.\nA tradução desse artigo foi feita livremente por mim (@MarcoWorms) e você pode encontrar mais conteúdo traduzido sobre blockchain e web3 no nosso repositório do web3brasil: https://github.com/web3brasil/web3brasil"
  },
  {
    "objectID": "posts/etherscan-centralization/index.html",
    "href": "posts/etherscan-centralization/index.html",
    "title": "Etherscan is awesome but is also a critical point of failure for Ethereum",
    "section": "",
    "text": "That we can try to fix with open source and better incentives like we did with the other parts of crypto!\nAlmost a decade ago, the Ethereum community set out to kill all the weak links in providing financial services that are globally accessible. We have succeeded in many ways, and our progress relies on our capability to do self-reflection on points of failure and deploy fixes for them that are open source and open to audit.\nThis article reflects my thoughts on our reliance on Etherscan today, an incredibly convenient service for any Ethereum user or developer, a service that I use a lot and am thankful for the people who deployed it. Today, Etherscan is the biggest provider for exploring transactions in Ethereum. It is a very convenient website that allows you to:\nOne of the powers of Etherscan is that it suits both novice and advanced users:\nSuch fantastic power has brought so much convenience to users that it has become righteously one of the most used websites in the crypto ecosystem. Here is a quick comparison of the usage of Etherscan website and other popular DeFi websites in the last 3 months:\nData from https://www.similarweb.com/"
  },
  {
    "objectID": "posts/etherscan-centralization/index.html#how-does-etherscans-dominance-put-the-ethereum-community-at-risk",
    "href": "posts/etherscan-centralization/index.html#how-does-etherscans-dominance-put-the-ethereum-community-at-risk",
    "title": "Etherscan is awesome but is also a critical point of failure for Ethereum",
    "section": "How does Etherscan’s dominance put the Ethereum community at risk?",
    "text": "How does Etherscan’s dominance put the Ethereum community at risk?\nThe biggest risk associated with Etherscan today is that the source code is closed and therefore not reproducible by other users, which removes the “availability resilience by redundancy of servers” factor that we have in Ethereum and introduces “security by obscurity” controlled by a single entity.\nThe availability and resilience of Ethereum services come from the decentralized network of nodes that can execute a transaction even if many of them are offline. Today, this is only achievable by providing people with open-source code that has financial incentives to be set up and maintained.\nIf the users of Ethereum are constantly recurring to the same centralized entity for a service that most people use, we are walking on a path that compromises decentralization, the opposite of making Ethereum cypherpunk.\n\nSide Note: Advanced users will skip interacting with Etherscan and use things like ApeWorx or Foundry to do their on-chain interactions, which are open source and skips the above risk. But a large number of people will not learn how to use any open source CLI tools and they will rely on Etherscan website for reading information and sometimes even writing.\n\nHere is a doomsday scenario involving Etherscan: their DNS is hijacked and the website redirects to a malicious wallet drainer (which happens a lot in crypto, even to the teams with the best security measures). This could happen to any protocol website, which is why I think learning how to self-host is an important skill.\nThe more people rely on Etherscan and have no good alternatives, the more incentive exists for a malicious actor to use it as an attack vector on the Ethereum community.\nI’m not here to bash Etherscan. I believe their team is doing its best running its own business, my background in indie game development taught me that there are segments of the market that are very hard to profit without recurring to some default market strategies (ads, microtransactions), and it would be naive to expect them to open the source with nothing in return. So let’s talk about some alternatives!"
  },
  {
    "objectID": "posts/etherscan-centralization/index.html#open-source-transaction-explorers",
    "href": "posts/etherscan-centralization/index.html#open-source-transaction-explorers",
    "title": "Etherscan is awesome but is also a critical point of failure for Ethereum",
    "section": "Open Source Transaction Explorers",
    "text": "Open Source Transaction Explorers\n\nBeaconchain\n\nEthereum Preview: https://beaconcha.in/\nSource: https://github.com/gobitfly/eth2-beaconchain-explorer\n\n\n\nBlockscout:\n\nEthereum Preview: https://eth.blockscout.com/\nSource: https://github.com/blockscout/blockscout\n\n\n\nOtterscan\n\nOptimism Preview: https://otterscan.mainnet.testinprod.io/\nSource: https://github.com/otterscan/otterscan\n\n\nA hard problem for open-source scanners today is that contract verification is centralized on Etherscan. How to deliver this feature with the same quality as an alternative if everyone is verifying contracts with Etherscan today? The “open auditability” value of Ethereum is compromised if we depend on a single closed-source entity to validate and audit what’s in production.\n\nAll of the above are alternatives to Etherscan, if you try them out next time you want to use a scan you are already participating in decentralizing this part of the chain, and even better if you self-host them! But we can’t rely on altruism to maintain this, we have seen scans close due to monetization issues, which I believe is one of the core aspects of our entire conundrum and why Etherscan is closed source to begin with!"
  },
  {
    "objectID": "posts/etherscan-centralization/index.html#incentives-for-explorers",
    "href": "posts/etherscan-centralization/index.html#incentives-for-explorers",
    "title": "Etherscan is awesome but is also a critical point of failure for Ethereum",
    "section": "Incentives for Explorers",
    "text": "Incentives for Explorers\nIt’s visible that transaction explorers suffer from an incentive problem, let’s take a look at Etherscan website:\n\n\n\nhummmm this ad looks legit!\n\n\nIs there any other piece of Ethereum infrastructure that you use that shows you a suspicious ad like that? No! Because the incentives for the other parts are much better developed than having to be an ad seller to survive. Why do the websites of Ethereum Foundation, AAVE, Yearn, Maker, Uniswap, centralized exchanges, and other big Ethereum apps will not show you any ads? Because those app’s monetary incentives are aligned, and showing ads is a net-negative thing to do since ads introduce another layer of risk to the end user, who is just trying to use a good finance product.\nI am not big brain enough to suggest an actual system design that fixes the scan situation right now, but I do believe that Ethereum could think of better incentives for people to run decentralized nodes that serve as an Etherscan alternative before we rely completely on it as a community, which would start by incentivizing somehow the open source alternatives and also incentivizing making them available to the public.\n\nEthereum RPC nodes might have a similar centralization issue, but it’s easier to decentralize RPCs right now than scans since the best RPC clients are open source and easy to reproduce.\n\nI invite anyone to participate in this discussion and come up with something we can test!"
  },
  {
    "objectID": "posts/etherscan-centralization/index.html#straight-from-the-otterscan",
    "href": "posts/etherscan-centralization/index.html#straight-from-the-otterscan",
    "title": "Etherscan is awesome but is also a critical point of failure for Ethereum",
    "section": "Straight from the Otterscan",
    "text": "Straight from the Otterscan\nTo bring more perspectives to the conversation, here are the thoughts of the Otterscan creator Willian Mitsuda when I asked some questions and showed him this article:\n\n\n\nNow speaking: Willian!\n\n\n\nQ: What motivated you to create Otterscan, and how does it differ from Etherscan in architecture and functionality?\nEtherscan is already a great tool. I wanted to create something to fill in the gaps and reach an audience that Etherscan doesn’t: be able to run your own explorer at your home, using your own node, running on consumer hardware, not expensive cloud machines.\nEverything is open source, so users can hack and modify it. We use open databases like Sourcify for contract verification, so something as critical doesn’t vanish if the company behind it disappears.\nEtherscan is a closed-source SaaS, so we can’t do a fair comparison at an architectural level. But regarding Otterscan, our endgame is to reach feature parity with Etherscan (we still haven’t, but we will) while testing the limits of what can be done with a regular Ethereum node.\nTo do that, Erigon (and all the technology they invented) was fundamental. Otterscan couldn’t exist before 3 years ago when Erigon made archive nodes possible in ~2TB (mainnet) and a few days of sync.\nOtterscan V1 was only possible because Erigon enabled archive nodes in consumer hardware and it was easy to expose data that existed inside your node, but not available through the standard JSON-RPC APIs.\nOtterscan V2 (in alpha at this moment) will be only possible because Erigon kept evolving and the new architecture of tx-based indexes in Erigon 3 (as opposed to block-based indexes) will allow us to build and augment standard node capabilities by deriving new data from it efficiently.\nThat’ll bring us very close to producing most of the data Etherscan gives users, but without requiring anything other than your node and some (affordable) extra disk space.\n\n\nQ: What are your thoughts on the existing incentives for using and serving an open-source explorer? Any thoughts on decentralized funding for explorers?\nI think finding a business model for explorers is as challenging as it is for other web3 products. We are gladly sponsored by Erigon, which allowed us to keep working on it so far as an open-source public good without any VC funding.\nNew grant programs such as Optimism’s Retroactive Public Goods Funding can potentially allow long-term survival for similar products.\n\n\nQ: How can the community contribute to the development and improvement of Otterscan, and what kind of contributions are you looking for?\nOtterscan is composed of 2 parts:\n\nThe UI is a React application.\nAnd an API implementation that is embedded inside Erigon.\n\nSo people interested in contributing can improve the UI itself, program new APIs and indexers inside Erigon (that could be a good entry point for anyone interested in adventuring into ETH client internals), or make use of Otterscan APIs to do something completely new, like a specialized UI.\nAnother interesting idea is implementing Otterscan APIs in other clients. There is already an independent community initiative to port it to Reth, and another community member implemented it inside Anvil, so you can point the Otterscan UI to it and browse your devnet.\nHere is an example community-made PR to add support for Otterscan JSON-RPC API extensions on Reth: Add support for Otterscan JSON-RPC API extensions · Issue #3726 · paradigmxyz/reth\nAnd another community member added it inside Anvil:\n\n\n\nQ: What advice would you give developers interested in building their open-source projects for the Ethereum ecosystem?\nJust build it. If you are technically skilled, there are lots of opportunities out there, and if you make something that solves other people’s problems, you will surely be recognized."
  },
  {
    "objectID": "posts/automatizando-investimentos-defi/index.html",
    "href": "posts/automatizando-investimentos-defi/index.html",
    "title": "Automatizando investimentos dentro da blockchain de acordo com o risco",
    "section": "",
    "text": "Esse artigo é a junção de todos os posts de um fio no twitter: https://twitter.com/MarcoWorms/status/1553429027628744704\n\nA yearn é tipo uma conta poupança 100% transparente dentro da blockchain, decidir onde alocar os recursos e quanto risco tomar para isso é parte crucial da operação!\nCada cofre possui até 20 estratégias de investimento, essas estratégias têm níveis de riscos diferentes medidos quantitativamente que são usados para decidir o quanto alocar por opção.\nCom as turbulências atuais nos mercados financeiros e de cripto um contribuidor da yearn (storming0x) escreveu detalhadamente como o protocolo da yearn lida com os riscos com uma framework aberta que pode ser melhorada por qualquer outro serviço, assim como o código de tudo feito na yearn!\n\nPros componentes principais (tipo o código do cofre) os procedimentos de segurança e testes é o clássico em DeFi: um processo cascata de desenvolvimento/teste/auditoria\nMas pro código das estratégias de investimento isso muda pois oportunidades surgem e morrem muito rápido\nAuditorias e reviews de segurança são o maior gargalo pra colocar contratos em produção\nA demanda é muito alta e você não tem controle do tempo que pode demorar\nSe as estratégias de investimento precisam ir pra produção mais rápido que o processo normal, como gerir o risco?\n\nCada estratégia recebe uma nota para a chance de um problema ou hack VS. tamanho do impacto\nJogadores de poker podem chamam isso de “Valor Esperado” (EV em inglês)\nUma formula dá notas consistentes para cada estratégia diferente baseado em dimensões medidas num processo interno\n\nDocumentação sobre notas de risco das estratégias: https://docs.yearn.finance/resources/risks/risk-score\n\n\n\n\nExemplos de notas de uma estratégia\n\n\nQuanto menor for a nota, menor a chance de um problema acontecer baseado em dados passados\nEssa nota passa por dimensões como:\n\nAuditorias\nReviews\nComplexidade\nProtocolos Usados\n\nAssim comparamos riscos de estratégias diferentes\nCom as notas conseguimos fazer um mapa de risco onde o total que uma estratégia tem investido nela entra como um dos fatores de risco (“chance de algo dar problema”)\nColocamos a estratégia na tabela com eixos\n\nGravidade (y)\nChance (x)\n\naqui: http://yearn.watch/risk\n\n\n\nhttp://yearn.watch/risk\n\n\nComo isso é útil?\nSoltamos uma estratégia antes de auditorias, marcando ela como alto risco\nLimitamos o total de recursos alocados na estratégia enquanto mitigação de risco são feitas\nA yearn coloca a estratégia numa bicicleta com rodinhas, tomando ações preventivas\nEssa forma de abordar o problema balanceia experimentação rápida com gestão de risco e segurança\nReviews de segurança internos sempre acontecem antes de deployar um código mas isso é só a parte da nota, passando por desde pares até auditorias completas, melhorando a nota\n“testar em produção” virou um meme no DeFi summer\nNa realidade, a yearn faz alocações medidas por risco e checa o risco antes de alocar os fundos\nIsso mostra que levamos a sério segurança\nMais trabalho está sendo feito nos riscos dos cofres\n\nDocumentação sobre notas de risco dos cofres: https://github.com/yearn/yearn-data-analytics/blob/master/src/risk_framework/README.md\n\nSobre a nota de “Protocolos Usados”\nAntes de fazer deploy de uma estratégia que use um protocolo novo fazemos uma checagem de diligência em vários aspectos: governança da multisig, codebase, auditorias, etc\nA maioria dos protocolos estão abertos a melhorar nessas dimensões\nA yearn é transparente sobre todos os riscos que um usuário tem ao depositar nela\nVocê pode simplesmente depositar e esquecer\nOu você pode monitorar cada átomo de como a salsicha é feita com ferramentas feitas pelos próprios contribuidores\nDeFi de verdade é transparente\n\n\n\nExemplo de cofre visualizado no yearn.watch\n\n\nEnquanto trabalho é feito nas mitigações de risco as notas melhoram e alocamos mais recursos na estratégia\nA yearn faz reviews recorrentes baseados no total depositado na estratégia\nUma das metas dos cofres v3 é ter todo o framework de risco “on chain” e automatizado\nEsses aspectos de gestão de risco são a receita secreta da yearn pra lidar com investimentos e segurança através de prevenção\nNenhum sistema é perfeito, incluindo esse\nMas acho que o sistema se provou na fogueira que foi o crash atual\nOutros podem iterar em cima disso\nEspero que isso tenha agregado para pessoas e protocolos que vão criar seus próprios frameworks\nA Yearn se inspira em gigantes como @MakerDAO e customizamos para nossas necessidades\nObrigado a todos contribuidores na yearn que fazem e mantém as documentações e ferramentas\n\nTraduzi para português pois gostei do fio que ele fez e ajudei a fazer partes das documentações!\nAprenda mais sobre a @iearnfinance e como funciona outros processos da DAO lendo a documentação: http://docs.yearn.finance\nPost original do @storming0x"
  },
  {
    "objectID": "posts/avoiding-rugpulls/index.html",
    "href": "posts/avoiding-rugpulls/index.html",
    "title": "Avoiding Rug Pulls in Web3",
    "section": "",
    "text": "Avoiding all scams and hacks isn’t easy, but I’ve made a deep dive into the subject by deploying my own projects and also by asking a Yearn experienced contributor to help me review and add his perspective on what’s important for technical security basics\n\n\n\n\nTagging things in the blockchain with your public address\n\n\nTagging things in the blockchain with your public address\nMost web3 communities are filled with all kinds of people experimenting with new things. Since the tech is new and the grounds are mostly unknown, many malicious actors are trying to take advantage of other people’s ignorance by exploiting technical product quirks.\n\n\nIf you don’t know the basics, then the more you interact with web3, the more likely you will get hacked or rug pulled. Most scams are based on a target’s lack of knowledge about a specific feature or mechanic, so it’s important that you learn some blockchain security basics not to get fooled easily!\nDisclaimer: I’m not an expert in blockchain security and there are other resources from experienced users on this. If you follow this guide, you should be able to improve your web3 security posturing. Unfortunately, this article can’t cover all the possible ways you can get wrecked, so as always: “Do Your Own Research”.\n\n\nYour wallet is a pair of two keys:\n\nA public key (also referred to as your “address”, it’s the tag that the blockchain will put on the things you have there)\nA private key (the wallet apps abstracts this for the user in form of a sequence of ~20 words)\n\n\n\n\nA smart contract is a wallet with special functions. These special functions are often programmed in Solidity and the thing you need to know about them for our scope is:\n\n\n\nA simple overview of a smart contract\n\n\nA simple overview of a smart contract\n\nA contract can act as a wallet and store funds\nA contract has a “local state” (used for its own internal control)\nA contract can’t tamper with another contract’s local state or funds (unless explicitly authorized)\nMost contracts are immutable by default (which means code can’t be altered unless explicit doors are left for this)\n\n\n\n\nA common misconception is that your assets on the blockchain are “in” your wallet. As we just saw, your wallet is simply a pair of keys.\nYour “assets” on the blockchain are actually inside contracts that “tag” things with your public address. Everything from coins to NFTs works like this, so let’s expand on this with some examples:\nLet’s say you go to a DEX and swap 100 $eth for 200 $woofy. Here is what happens:\n\n\n\nProcess of buying $woofy\n\n\nProcess of buying $woofy\nWhen you “have 200 woofy” what you really have is a tag in the local state of the woofy contract that says that you own 200 woofy. Why is this important for avoiding scams? Because the only way for someone to move your woofy is if you either:\n\nLose your wallet recovery phrase (private-key). Hackers can move your assets freely when they have access to your private key. In this case, you can only move what’s left of your funds to another uncompromised wallet using a white hat service like Flashbots. If you don’t act fast enough, you could lose everything.\nAuthorize another contract to move funds on your behalf (often called a ‘token approval’). When you issue a token approval, you can set the number of funds the contract is allowed to move on your behalf. If you grant a contract a token approval and don’t revoke it later, the contract can spend your tokens long after you’re done using it.\n\n\n\nHaving a hardware wallet is an essential item for basic personal crypto security so you should get one and read about how to handle it properly. It’s also a good idea to use a solution like Gnosis that creates wallets where all transactions need more than 1 person’s signature, so this helps spread out risk into different baskets.\nI won’t go into detail on how you should protect your hardware wallet secret phrase since I don’t have enough experience here, the more assets you have in crypto the more complex the process can become.\n\n\n\nSo this leads to one of our first safety web3 pillars: Create burner wallets to interact with contracts you don’t know. It’s so easy to do, and you’ll feel like shit when your funds are drained simply because you interacted with a malicious contract without using a burner.\nDo you have the skills to verify if a contract is malicious? If not, assume it is and make the first interaction using a burner wallet. It takes less than a minute to create a new browser wallet (with or without a hardware wallet) and the downside of using your main wallet to make the first interaction with an unknown contract is too big.\n\n\n\nUse burner wallets!\n\n\nUse burner wallets!\nIt’s also important to never have token approvals larger than needed. By default, when a dapp asks for a token approval, it will ask for access to infinite tokens. This means that long after you’re done using the app, the contract can still spend your tokens!\nYou can edit this amount and only grant the dapp access to the amount of tokens you want to transact with. This means you’ll have to do a token approval transaction before interacting with most dapps, but the security gain is well worth it.\n\n\n\n\n\nI asked Ben (a Yearn contributor working on our subgraph) to help me review the above and expand the article’s content with a more experienced outlook!\nThere are a few important measures you should take to defend yourself, Ben wrote this next sections until we reach “Part 2“ to help dissect the technical perspective of web3 security:\n\n\nIf you are self-custodying more than a few hundred dollars of crypto, you should invest in a hardware wallet. Hardware wallets are important because web browsers, extensions, and your computer itself can be easily hacked. Pirated software often has backdoors installed that can let a hacker steal your private keys without you ever finding out.\n\n\n\nHardware Wallet: A tiny device that will allow you to sleep better\n\n\nHardware Wallet: A tiny device that will allow you to sleep better\nUsing a hardware wallet takes your wallet’s seed and keeps it on a dedicated security device that is not connected to the internet. This can also protect you from certain kinds of screen-share-based phishing attacks.\nLedger and Trezor are the most popular and can be purchased for as little as $60 USD. Always purchase these directly from the vendor, never used.\n\n\n\nWhen depositing liquidity into a dapp, the dapp might request a token approval. By default, most dapps request infinite spending capacity against your tokens. You can and should change approval quantities to the actual amount you wish to grant access to, even if it costs extra gas for the additional transaction every time you need to use the dapp.\nEvery once in a while, you should audit your wallet to make sure there are no outstanding token approvals. You can audit your token approvals using etherscan:\n\nEthereum: https://etherscan.io/tokenapprovalchecker\nFantom: https://ftmscan.com/tokenapprovalchecker\nPolygon: https://polygonscan.com/tokenapprovalchecker\n\n\n\n\nCheck your blockchain scan to see all current token approvals\n\n\nCheck your blockchain scan to see all current token approvals\n\n\n\nAttackers often set up fake dapp websites that will steal your tokens if you transact on them. Other times, legitimate dapp websites can be hacked and configured to send your money to a hacker.\nWhen MetaMask opens a transaction approval dialogue, you should make it a habit to check the address of the contract you’re transacting with. Here’s a short list of things you should check:\n\nOpen the address on Etherscan. The address should be associated with a smart contract and have annotations/tags that say what the contract is used for.\nOpen the Dapp’s documentation and make sure the address corresponds with their published smart contract addresses. Try to find this documentation without opening a link on the Dapp’s web page — if the entire site is fake, they may also have fake documentation!\n\nOnce you’ve done your due diligence, you can add the address to your wallet’s address book.\n\n\n\nIf you store any amount of crypto in a custodial exchange, it’s critical that all of your Web2 accounts are secured to the highest degree possible.\nUse a unique, randomly generated password on every site\nHackers often buy, sell, and trade password databases; then try to use these password databases to hack people’s exchange accounts. This is called Credential Stuffing, and it is the most popular way to hack Web2 accounts. If you use the same password for multiple accounts, you are putting yourself and your crypto at incredible risk.\nI highly recommend using a reputable encrypted password manager like 1Password.\nAlways use two-factor authentication\nTwo-factor authentication is used to prevent attackers from accessing your accounts when they know your password. Two-factor authentication has another benefit that is rarely mentioned: it prevents most company’s customer support from accidentally granting an attacker access to your account.\nMany companies have poor account recovery processes where a hacker can get full access to your account without knowing your password. By enabling two-factor authentication, an attacker may no longer use these account recovery processes.\nAvoid SMS two-factor authentication\nIt costs &lt;$50 for an attacker to SIM swap your phone number on most carriers. For this reason, you should never use SMS as a second factor. Instead, use a Time-based one-time password, or if you can afford it (and the site supports it), purchase a FIDO U2F key and use it as your second factor.\nI strongly recommend FIDO U2F keys because they have one massive benefit over TOTP: you can’t get phished if you’re using a FIDO key."
  },
  {
    "objectID": "posts/avoiding-rugpulls/index.html#start-with-the-technical-basics",
    "href": "posts/avoiding-rugpulls/index.html#start-with-the-technical-basics",
    "title": "Avoiding Rug Pulls in Web3",
    "section": "",
    "text": "If you don’t know the basics, then the more you interact with web3, the more likely you will get hacked or rug pulled. Most scams are based on a target’s lack of knowledge about a specific feature or mechanic, so it’s important that you learn some blockchain security basics not to get fooled easily!\nDisclaimer: I’m not an expert in blockchain security and there are other resources from experienced users on this. If you follow this guide, you should be able to improve your web3 security posturing. Unfortunately, this article can’t cover all the possible ways you can get wrecked, so as always: “Do Your Own Research”.\n\n\nYour wallet is a pair of two keys:\n\nA public key (also referred to as your “address”, it’s the tag that the blockchain will put on the things you have there)\nA private key (the wallet apps abstracts this for the user in form of a sequence of ~20 words)\n\n\n\n\nA smart contract is a wallet with special functions. These special functions are often programmed in Solidity and the thing you need to know about them for our scope is:\n\n\n\nA simple overview of a smart contract\n\n\nA simple overview of a smart contract\n\nA contract can act as a wallet and store funds\nA contract has a “local state” (used for its own internal control)\nA contract can’t tamper with another contract’s local state or funds (unless explicitly authorized)\nMost contracts are immutable by default (which means code can’t be altered unless explicit doors are left for this)\n\n\n\n\nA common misconception is that your assets on the blockchain are “in” your wallet. As we just saw, your wallet is simply a pair of keys.\nYour “assets” on the blockchain are actually inside contracts that “tag” things with your public address. Everything from coins to NFTs works like this, so let’s expand on this with some examples:\nLet’s say you go to a DEX and swap 100 $eth for 200 $woofy. Here is what happens:\n\n\n\nProcess of buying $woofy\n\n\nProcess of buying $woofy\nWhen you “have 200 woofy” what you really have is a tag in the local state of the woofy contract that says that you own 200 woofy. Why is this important for avoiding scams? Because the only way for someone to move your woofy is if you either:\n\nLose your wallet recovery phrase (private-key). Hackers can move your assets freely when they have access to your private key. In this case, you can only move what’s left of your funds to another uncompromised wallet using a white hat service like Flashbots. If you don’t act fast enough, you could lose everything.\nAuthorize another contract to move funds on your behalf (often called a ‘token approval’). When you issue a token approval, you can set the number of funds the contract is allowed to move on your behalf. If you grant a contract a token approval and don’t revoke it later, the contract can spend your tokens long after you’re done using it.\n\n\n\nHaving a hardware wallet is an essential item for basic personal crypto security so you should get one and read about how to handle it properly. It’s also a good idea to use a solution like Gnosis that creates wallets where all transactions need more than 1 person’s signature, so this helps spread out risk into different baskets.\nI won’t go into detail on how you should protect your hardware wallet secret phrase since I don’t have enough experience here, the more assets you have in crypto the more complex the process can become.\n\n\n\nSo this leads to one of our first safety web3 pillars: Create burner wallets to interact with contracts you don’t know. It’s so easy to do, and you’ll feel like shit when your funds are drained simply because you interacted with a malicious contract without using a burner.\nDo you have the skills to verify if a contract is malicious? If not, assume it is and make the first interaction using a burner wallet. It takes less than a minute to create a new browser wallet (with or without a hardware wallet) and the downside of using your main wallet to make the first interaction with an unknown contract is too big.\n\n\n\nUse burner wallets!\n\n\nUse burner wallets!\nIt’s also important to never have token approvals larger than needed. By default, when a dapp asks for a token approval, it will ask for access to infinite tokens. This means that long after you’re done using the app, the contract can still spend your tokens!\nYou can edit this amount and only grant the dapp access to the amount of tokens you want to transact with. This means you’ll have to do a token approval transaction before interacting with most dapps, but the security gain is well worth it."
  },
  {
    "objectID": "posts/avoiding-rugpulls/index.html#learning-from-the-experts-yearn-finance-contributor-opinion",
    "href": "posts/avoiding-rugpulls/index.html#learning-from-the-experts-yearn-finance-contributor-opinion",
    "title": "Avoiding Rug Pulls in Web3",
    "section": "",
    "text": "I asked Ben (a Yearn contributor working on our subgraph) to help me review the above and expand the article’s content with a more experienced outlook!\nThere are a few important measures you should take to defend yourself, Ben wrote this next sections until we reach “Part 2“ to help dissect the technical perspective of web3 security:\n\n\nIf you are self-custodying more than a few hundred dollars of crypto, you should invest in a hardware wallet. Hardware wallets are important because web browsers, extensions, and your computer itself can be easily hacked. Pirated software often has backdoors installed that can let a hacker steal your private keys without you ever finding out.\n\n\n\nHardware Wallet: A tiny device that will allow you to sleep better\n\n\nHardware Wallet: A tiny device that will allow you to sleep better\nUsing a hardware wallet takes your wallet’s seed and keeps it on a dedicated security device that is not connected to the internet. This can also protect you from certain kinds of screen-share-based phishing attacks.\nLedger and Trezor are the most popular and can be purchased for as little as $60 USD. Always purchase these directly from the vendor, never used.\n\n\n\nWhen depositing liquidity into a dapp, the dapp might request a token approval. By default, most dapps request infinite spending capacity against your tokens. You can and should change approval quantities to the actual amount you wish to grant access to, even if it costs extra gas for the additional transaction every time you need to use the dapp.\nEvery once in a while, you should audit your wallet to make sure there are no outstanding token approvals. You can audit your token approvals using etherscan:\n\nEthereum: https://etherscan.io/tokenapprovalchecker\nFantom: https://ftmscan.com/tokenapprovalchecker\nPolygon: https://polygonscan.com/tokenapprovalchecker\n\n\n\n\nCheck your blockchain scan to see all current token approvals\n\n\nCheck your blockchain scan to see all current token approvals\n\n\n\nAttackers often set up fake dapp websites that will steal your tokens if you transact on them. Other times, legitimate dapp websites can be hacked and configured to send your money to a hacker.\nWhen MetaMask opens a transaction approval dialogue, you should make it a habit to check the address of the contract you’re transacting with. Here’s a short list of things you should check:\n\nOpen the address on Etherscan. The address should be associated with a smart contract and have annotations/tags that say what the contract is used for.\nOpen the Dapp’s documentation and make sure the address corresponds with their published smart contract addresses. Try to find this documentation without opening a link on the Dapp’s web page — if the entire site is fake, they may also have fake documentation!\n\nOnce you’ve done your due diligence, you can add the address to your wallet’s address book.\n\n\n\nIf you store any amount of crypto in a custodial exchange, it’s critical that all of your Web2 accounts are secured to the highest degree possible.\nUse a unique, randomly generated password on every site\nHackers often buy, sell, and trade password databases; then try to use these password databases to hack people’s exchange accounts. This is called Credential Stuffing, and it is the most popular way to hack Web2 accounts. If you use the same password for multiple accounts, you are putting yourself and your crypto at incredible risk.\nI highly recommend using a reputable encrypted password manager like 1Password.\nAlways use two-factor authentication\nTwo-factor authentication is used to prevent attackers from accessing your accounts when they know your password. Two-factor authentication has another benefit that is rarely mentioned: it prevents most company’s customer support from accidentally granting an attacker access to your account.\nMany companies have poor account recovery processes where a hacker can get full access to your account without knowing your password. By enabling two-factor authentication, an attacker may no longer use these account recovery processes.\nAvoid SMS two-factor authentication\nIt costs &lt;$50 for an attacker to SIM swap your phone number on most carriers. For this reason, you should never use SMS as a second factor. Instead, use a Time-based one-time password, or if you can afford it (and the site supports it), purchase a FIDO U2F key and use it as your second factor.\nI strongly recommend FIDO U2F keys because they have one massive benefit over TOTP: you can’t get phished if you’re using a FIDO key."
  },
  {
    "objectID": "posts/avoiding-rugpulls/index.html#where-malicious-developers-target-users",
    "href": "posts/avoiding-rugpulls/index.html#where-malicious-developers-target-users",
    "title": "Avoiding Rug Pulls in Web3",
    "section": "Where malicious developers target users",
    "text": "Where malicious developers target users\nThis type of scam comes in many different forms:\n1. Developer releases a token that when bought by users can’t be sold (rigging a standard contract, in this case, ERC20)\nThe only way to be absolutely sure that a token can be sold after being bought requires viewing the contract’s source code to verify the token is not malicious.\nSince most users are not coding auditors, the next best way is to find out whether the token has been audited by a reputable firm. You can find a list of reputable auditors on defisafety.com. Even if a project has not been audited, you can also use DefiSafety to find out what experienced DeFi users think of the token.\nWorst case; you can test whether a token is sellable by buying the token with a very small amount of funds to see if you can sell it back. This should be used as an absolute last resort; contracts can be programmed to act nicely for small transactions, then to steal if you perform a larger transaction!\nSince contracts can become mutable it’s nice to know why the devs designed it like this. If you don’t know how to check whether a contract is immutable, you can read the audit or ask in the community channels; someone from the community can probably help you with this (or the devs when they are legit).\n2. Developer promises new tech that makes users buy their tokens and doesn’t deliver the promised tech\nThis one requires more knowledge of tech/products and how software delivery functions to separate teams with empty promises and the ones that are actual builders:\n\nDoes the team change directions all the time? If it does, do they care to explain why to the community?\nIs the overall project’s communication bad? If yes, does it looks intentional?\n\nGroups of brilliant technical people often struggle with managing communities and the people side of things, bad communication does not always mean rug pull. In fact, sometimes the teams are just exhausted and they have difficulties re-establishing new expectations within the communities.\nIn the above case, the FUDers create excellent entry opportunities for experienced investors since prices go down even though the project tech delivery didn’t change at all. It would have never been delivered on the said date in the first place, the team sometimes is just bad at handling communication and development at the same time and rather focus on development\n\nWhat did the team deliver already? How was their process of promising these past deliverables?\nWhat do their social media sell?\n\nDo they talk about their community achievements, released/upcoming features that look real (products are better when incrementally evolved, revolutions aren’t good for the product development process), and engage meaningfully with other protocols? Then they might be in for the long run! You should definitively join their community channels and engage with what they are doing, it gives them strength to keep going!\nDo they sell “more money”? Long-lasting protocols and projects are not based on “buy my NFT because you’ll be rich”. Red Flag!\n3. Developer releases a (maybe) legit project but decides to pull the rug on everyone because “fuck the community”\nA project’s “rug-ability” is defined by many factors, here are some things to keep an eye on:\n\nAre the developer team’s funds locked over time? Can the devs dump all their tokens on the market?\nWhat are the incentives that the developers have to not delete social media and vanish? If the team is fully anon, is there anyone reputable backing this team?\nIs this protocol that you are investing in known and respected by the community?\n\nFor example, at Yearn Finance at Fantom USD stables you can get up to 20% APY (annual percentage yield) today and the protocol is battle-tested, probably the lowest risk you can find around. But you can also ape in the newest shiny aggregator that has 69420% APY! The difference is that Yearn has way more liquidity in their pool and way less incentive to pull the rug on you."
  },
  {
    "objectID": "posts/avoiding-rugpulls/index.html#where-malicious-users-target-users",
    "href": "posts/avoiding-rugpulls/index.html#where-malicious-users-target-users",
    "title": "Avoiding Rug Pulls in Web3",
    "section": "Where malicious users target users",
    "text": "Where malicious users target users\nBesides malicious developers, we also have malicious users. Here is what they like to do:\n1. Message you on closed channels\nSince on open channels they’d be busted by the community. So Turn off DMs for discord you have no need to receive DMs from its users and prefer open channels over closed ones:\n\nDefiLlama would never DM you about an exclusive NFT offer. Those types of events in any project are always announced on official channels (we’ll talk more about flaws on this in the next section), developers don’t want to use marketing tactics that scammers use (since it makes them look like scammers and often they have a poor conversion of long-term users), so if all scammers are DMing people on discord linked for fake mints then legit devs will probably use other means of announcement to not confuse their potential userbase\nOn Telegram (or Discord too) if you ask on a protocol channel “hey I need help” someone will probably DM you telling you they are admin/mod/helpdesk. Guess what: those won’t DM you! DMs are mostly scams.\n2. Sometimes they pretend to be the developer of a project. Always verify the first time someone sent you a message that this is the real person\nThere are different ways to do this, simply go to the person’s official profile and click the “send private message” button from there (works on twitter and discord). This will guarantee that the chat opened is truly linked with that official profile and you didn’t oversee an l for an I (even skilled users may fall for an “l” that looks like an “I”).\nAlso, multimillionaire protocol teams would never reach you out for funds or for help to interact with a contract. They would probably rather open an entire DAO to gather funds before sending you a message for this, so always double-check when someone comes to you trying to pass themselves as some kind of authority.\n3. Other times they pretend to need your help to get something done.\nDo help people out, we need more cooperation in the space, but no one needs your secret recovery phrase to get help. You don’t have to send funds to help either. By giving attention and guidance to anyone who comes to your door, you are already doing so much more than many people around the internet. If you want to trust people over the internet and send them your password or funds, you might actually be sending it to the politician you most hate in the world, so this is why I believe helping with information and education is the most efficient way to help people around without exposing yourself to weird risk."
  },
  {
    "objectID": "posts/avoiding-rugpulls/index.html#where-malicious-users-target-developers",
    "href": "posts/avoiding-rugpulls/index.html#where-malicious-users-target-developers",
    "title": "Avoiding Rug Pulls in Web3",
    "section": "Where malicious users target developers",
    "text": "Where malicious users target developers\nOn the above points it’s either a developer screwing a community or an individual screwing another one. But in this third case here we’ll have a third party ruin an entirely “healthy” ecosystem, many times at the cost of the developer’s reputation (which can be fixed in the long run) and also people’s wallets (which generates a huge riot from those who got rekt). Normally what we get in return from these cases is a hurtful DeFi security lesson (and many times this lesson was already learned in the past, in these cases it hurts even more and people get even madder)\nHere are some ways things can go bad quickly:\n1. A malicious user hacks a developer account and posts a scam link on the official channel\nI honestly don’t know how to fully prevent this one. Since it comes from an authentic figure of authority it will probably wreck many people. The only thing the community can do here is demand good security practices from the dev team, for example: all admin/mods enable 2-factor. Recently a famous gaming project called Fractal had “373 of its members scammed out of a total of 800 in Solana cryptocurrency, worth $150,000” in a hack like this.\n2. A malicious user hacks one of the protocol’s contracts and drains its funds\nYour only safety here as a user is to put in DeFi money you can afford to lose, especially in new protocols, and split the risk accordingly. You can expose yourself to less risk by using protocols that are audited, but many hacks happen in protocols that are audited so they aren’t hack-proof by any means: The 30m+ U$ recent Grim Finance hack in the Fantom network left many people with a bitter taste in their mouth. They were audited and most of the code was “battle-tested”, but new code got exploited.\n\nProducer: Worms.\nThanks Ben for helping with part 1!"
  },
  {
    "objectID": "posts/tenderly-notifications/index.html",
    "href": "posts/tenderly-notifications/index.html",
    "title": "Setup notifications for blockchain transactions with Tenderly",
    "section": "",
    "text": "In the article where Yearn announced a partnership with Tenderly there was a section where we said: &gt; “Tenderly has built-in customizable alerts that allow even novice users to create alerts on virtually any on-chain event.”\nA Yearn contributor reached out to learn more about this, and I think it’s a great opportunity to showcase this feature! Let’s start by taking a look at which networks can we use with Tenderly besides Ethereum Mainnet:\nI’m gonna explore the “Monitoring -&gt; Alerting” service located at Tenderly’s dashboard sidebar after logging into any project:\nThere is a caveat to this service about free usage that will show up when you open the Alerting page: &gt; You’ll receive a batch of alerts that happened over 15 minutes. Upgrade your plan to Tenderly Pro/Dev to receive real-time alerts\nFor testing, this isn’t a problem you so can proceed with the free version. For a more robust usage of alerts, you’ll have to upgrade your account.\nLet’s start by checking everything can we do when trying to create a new alert. The article won’t explore all possibilities so take a look at them to understand the best usage for your needs:\nBefore creating a new alert we must first:\nNow let’s get started!"
  },
  {
    "objectID": "posts/tenderly-notifications/index.html#add-telegram-as-a-destination",
    "href": "posts/tenderly-notifications/index.html#add-telegram-as-a-destination",
    "title": "Setup notifications for blockchain transactions with Tenderly",
    "section": "Add Telegram as a destination",
    "text": "Add Telegram as a destination\nIn the alerting tab, go to “Destinations” on the top menu and click on “Telegram”:\n\n\n\nAdd Telegram as destination\n\n\nLabel it and follow the instructions to allow the bot to send you messages:\n\n\n\nFollow instructions to allow the bot to send messages to you\n\n\nTo complete the above process copy the “magic words” from instruction step 3. Paste it in the chat with Tenderly’s telegram bot that opens by clicking @TenderlyRobot\n\n\n\nConfirmation message that the bot can now send messages in this chat!"
  },
  {
    "objectID": "posts/tenderly-notifications/index.html#monitoring-yearn-vault-depositswithdrawals",
    "href": "posts/tenderly-notifications/index.html#monitoring-yearn-vault-depositswithdrawals",
    "title": "Setup notifications for blockchain transactions with Tenderly",
    "section": "Monitoring Yearn Vault deposits/withdrawals",
    "text": "Monitoring Yearn Vault deposits/withdrawals\nLet’s start by monitoring some events made on the SPELL yVault on the Fantom Network. We need to know the SPELL yVault contract address, we can find it by going to the Yearn Vaults interface and clicking on the SPELL vault\n\n\n\nYearn Vaults at Fantom\n\n\nAfter clicking on it we’ll see this page with all the vault details, click the “block explorer” button that will take you to the vault’s contract:\n\n\n\nSPELL yVault details\n\n\nThis will open up the SPELL yVault Contract on FTMScan (Fantom fork of Etherscan):\n\n\n\nSPELL yVault Contract on FTMScan\n\n\nI highlighted the important information for our use-case in order:\n\nFirst the contract address\nThen the “Token Name” (helps when you have many contract tabs open)\nLastly the history of methods (functions) that this contract executed\n\nFor our example, we’ll add a notification for when anyone deposits tokens to the vault. To do this copy the contract page URL:\nhttps://ftmscan.com/address/0xD3c19eB022CAC706c898D60d756bf1535d605e1d\nThen go to Tenderly’s contract tab and click to import this contract in their dashboard, this will enable us to create alerts for it:\n\n\n\nImporting contract in Tenderly\n\n\nPaste the address, select the “Vyper Contract” (name shows like this because Yearn Vaults use Vyper programming language). When it shows up, click “Import”:\n\n\n\nImporting contract in Tenderly\n\n\nAfter importing the contract is ready for us to create an alert for it!\n\n\n\nImporting contract in Tenderly\n\n\nLet’s go and create an alert then:\n\n\n\nCreating a new alert\n\n\nWe want to receive a notification every time someone deposits into the SPELL yVault. To do this we’ll check the “Deposit” method that exists in the yVault contract. “method” is an analogous name to “function call” so that’s the type of alert we’ll use in this case\n\n\n\nSelect alert type\n\n\nTarget will be an address:\n\n\n\nSelect alert target\n\n\nYou’ll be able to select the contract we added previously and then pick any function that exists inside it. Note that many functions might have similar names, functions that start with “_” are often private internal functions and won’t be the ones we are looking for\nIn this case, we have **_deposit** (private: for internal usage) and deposit (public: for external users). We’ll pick the one that is public:\n\n\n\nSelect alert target\n\n\nLastly, choose the telegram destination that was set up previously and save the alert:\n\n\n\nSelect alert destination\n\n\nWe are done! The alert is created and I’ll receive a message every time someone deposits SPELL in that yVault!\n\n\n\nAlert created successfully!\n\n\nHere is an example notification I got after setting up this example and depositing a bit of spell in the vault to trigger it, I got the notification instantly after transaction confirmation!\n\n\n\nNotification of new SPELL deposit at Fantom yVault sent to my Telegram!"
  },
  {
    "objectID": "posts/tenderly-notifications/index.html#final-thoughts",
    "href": "posts/tenderly-notifications/index.html#final-thoughts",
    "title": "Setup notifications for blockchain transactions with Tenderly",
    "section": "Final Thoughts",
    "text": "Final Thoughts\nThis Yearn example showcases a simple way to monitor for a contract’s function call. If you explore all the options from the alerting system you’ll see this can be easily tweaked to many different usages, for example:\n\nNFT collections devs can monitor whenever their contract called the minting of a new token and announce it automatically on Discord\nPeople monitoring Tokenomics flows can use notifications to keep an eye on wallet balances and actions from contracts to see if devs are doing what is expected to be done\n\nYou can monitor any kind of on-chain activity and be notified by it, so experiment with all the different options!\nProducers: Worms, Reviewers: Cryptouf, Dark Ghosty"
  },
  {
    "objectID": "posts/tenderly-notifications/index.html#made-in-yearn.finance",
    "href": "posts/tenderly-notifications/index.html#made-in-yearn.finance",
    "title": "Setup notifications for blockchain transactions with Tenderly",
    "section": "Made in yearn.finance",
    "text": "Made in yearn.finance"
  },
  {
    "objectID": "posts/yearn-vaults-v3/index.html",
    "href": "posts/yearn-vaults-v3/index.html",
    "title": "Yearn Vaults v3",
    "section": "",
    "text": "As we look ahead to the exciting changes v3 Vaults are bringing for both developers and degens, I spoke with the Yearn contributor leading the v3 design team. I was surprised to learn about the number of new features! Initially, our conversation started around the ERC-4626 standard which standardizes vaults across protocols but it turns out that’s just the tip of the iceberg."
  },
  {
    "objectID": "posts/yearn-vaults-v3/index.html#the-purpose-of-v3-is-to-improve-all-core-aspects-of-yearn-vaults",
    "href": "posts/yearn-vaults-v3/index.html#the-purpose-of-v3-is-to-improve-all-core-aspects-of-yearn-vaults",
    "title": "Yearn Vaults v3",
    "section": "The purpose of v3 is to improve all core aspects of Yearn Vaults",
    "text": "The purpose of v3 is to improve all core aspects of Yearn Vaults\n\nSecurity\nMaintain Yearn’s position as best in class for DeFi security practices.\n\n\nDevelopment\nReduce friction for creating strategies, and allow a wider range of strategies for a vault.\n\n\nAutomation\nAllow more vault functions to be automated besides harvest, getting one step closer to the dream of the 100% automated vault."
  },
  {
    "objectID": "posts/yearn-vaults-v3/index.html#in-order-to-tackle-the-v3-scope-the-developers-are-working-on-the-following",
    "href": "posts/yearn-vaults-v3/index.html#in-order-to-tackle-the-v3-scope-the-developers-are-working-on-the-following",
    "title": "Yearn Vaults v3",
    "section": "In order to tackle the v3 scope, the developers are working on the following:",
    "text": "In order to tackle the v3 scope, the developers are working on the following:\n\nIncrease modularity\nImplementing code that is simple in a robust way in the yVault contract, which allows smarter logic to be placed in modules that can be iterated.\nAdopting the ERC-4626 standard which allows our vaults to be compatible with any other protocols that follow it.\n\n\nImprove Strategy &lt;-&gt; Vault relation\nAllow for simpler strategy testing, deploying, and overall including more tools to tackle a wider range of yield possibilities, including locking funds, riskier strategies, and multichain strategies.\n\n\nCreate new products\nCreate new products like Junior Tranches which enables riskier strategies and allows users to choose a higher-risk deposit option.\nAllow more than 1 vault for each token type\nAllow vaults to be controlled by multisigs that can be shared with partner protocols"
  },
  {
    "objectID": "posts/yearn-vaults-v3/index.html#flexibility",
    "href": "posts/yearn-vaults-v3/index.html#flexibility",
    "title": "Yearn Vaults v3",
    "section": "Flexibility",
    "text": "Flexibility\nv3 will give developers and strategists more flexibility for shipping code to production. It increases the modularization of the contracts and also opens doors for new ways to deposit in vaults.\nWe’ll also see a better automatization of peripheral contracts: in v2 only the harvest functions are automated and, in v3 we’ll get closer to a 100% automated vault because now more important functions are easier to automate with the Keep3r Network. &gt; We want to move fast and not break things — Skeletor"
  },
  {
    "objectID": "posts/yearn-vaults-v3/index.html#strategies-on-steroids",
    "href": "posts/yearn-vaults-v3/index.html#strategies-on-steroids",
    "title": "Yearn Vaults v3",
    "section": "Strategies on steroids",
    "text": "Strategies on steroids\nv2 Vaults had a limit of 20 strategies per vault, in v3 this limit will be increased. Additionally, riskier strategies will now follow a contract model analogous to the Senior/ Junior Tranches.\nRiskier strategies will now have a Junior Tranche contract, meaning the user will first deposit tokens into a vault and can then choose to deposit the vault tokens into a junior tranche contract for a higher-risk/higher-reward option. Users can also choose specific strategies to focus on. This is an optional feature that people with a higher risk appetite might want to explore.\nAnother thing the v3 team is working on is how to decentralize strategy endorsement. Today many security audit aspects at Yearn are centralized. But being able to decentralize this process would give more room to scale the product.\nFurther features focus on improving the overall usage of vaults by users, strategists, and developers, such as:\n\nySwaps (the service that strategists use to make token swaps) is being optimized for gas efficiency.\nv2 harvests take 6 hours for share-prices to go up, but in v3 the time is dynamic, improving MEV protection.\nThe increased modularity around vault’s processes allows us to make tighter partnerships with other protocols and build solutions more specialized to their cases."
  },
  {
    "objectID": "posts/yearn-vaults-v3/index.html#vaults-code",
    "href": "posts/yearn-vaults-v3/index.html#vaults-code",
    "title": "Yearn Vaults v3",
    "section": "Vaults code",
    "text": "Vaults code\nv2 vaults code is written in Vyper, but v3 is built with Solidity.\nVyper is a solid language as proven by the v2 system, but has a smaller developer pool. Our decision to go with solidity was based, among other factors, on accessing the larger developer pool necessary for a critical project like this. We see a bright future for Vyper and will continue exploring it in Yearn for smart contracts, any of the modules around vaults can be done using it.\n\n\n\nDefillama blockchain programming language usage statistics\n\n\nStatistics on coding languages used across blockchains can be monitored on Defillama, at the moment Vyper makes up around 10% and Solidity 69%. This reflects Solidity’s market dominance, and since we needed more contributors to ship v3 we chose the tech that would allow us to build an experienced team faster."
  },
  {
    "objectID": "posts/yearn-vaults-v3/index.html#the-future-awaits",
    "href": "posts/yearn-vaults-v3/index.html#the-future-awaits",
    "title": "Yearn Vaults v3",
    "section": "The future awaits",
    "text": "The future awaits\nI’ve only scratched the surface of what’s to come in v3. Yearn contributors are also working on building a number of other exciting products and functionalities! **Learn more about opportunities to join Yearn here!**\n\nMade in yearn.finance"
  },
  {
    "objectID": "posts/yearn-apy/index.html",
    "href": "posts/yearn-apy/index.html",
    "title": "How Yearn calculates estimated returns (APY)",
    "section": "",
    "text": "Old APY display\nIn the past few weeks, we had a lot of feedback about how our v3 dashboard displays the “Annual Percentage Yield” (APY) of deposited assets. Especially on Fantom where the ecosystem has more volatile prices and strategies, we deployed short-term changes to how APY is displayed to represent the yield received by weve and 0xdao. When we reverted to our previous calculations we didn’t consider long-term APY calculations being inflated, now we have pushed an update to correct that mistake. This article aims to give more context on what happened and our solution!"
  },
  {
    "objectID": "posts/yearn-apy/index.html#quick-context-apr-and-apy",
    "href": "posts/yearn-apy/index.html#quick-context-apr-and-apy",
    "title": "How Yearn calculates estimated returns (APY)",
    "section": "Quick Context: APR and APY?",
    "text": "Quick Context: APR and APY?\nIn DeFI we often see these 2 terms a lot:\n\nAPR: Annual Percentage Rate\nAPY: Annual Percentage Yield\n\nBoth are used to communicate to the user how much they expected to gain over an investment:\n\nAPR assumes no automatic compounding of yield\nAPY indicates that yield is auto-compounded into the investment"
  },
  {
    "objectID": "posts/yearn-apy/index.html#what-we-learned",
    "href": "posts/yearn-apy/index.html#what-we-learned",
    "title": "How Yearn calculates estimated returns (APY)",
    "section": "What we learned",
    "text": "What we learned\nWe updated the way our interface shows APYs a few weeks ago when going through ve(3,3) wars on Fantom in order to better reflect the APY using recent harvests data. Before this change, we showed more conservative APYs based on long-term historical data, but during the wars most Fantom vault APYs skyrocketed and short-term gains weren’t being shown properly to the users. We made a change to show a number based on recent harvest so people could see our vaults were farming the most profitable protocols:\n\nThe downside of calculating APY via recent data is: when the gains from the wars started diminishing, we showed a number that came from really profitable recent harvests but next harvests were probably not gonna be as profitable (diminished emissions from community protocols built to farm the war, less hardcore speculation after the top 20 TVL snapshot was taken) so we decided to make some changes to fix this case.\nSo we had a really conservative APY calculation before the mentioned episode above, then we changed to focus on recent data. Going through these 2 extremes made us learn a lot about what works and what doesn’t! Here is how we do it now:"
  },
  {
    "objectID": "posts/yearn-apy/index.html#for-vaults-that-use-non-curve-assets",
    "href": "posts/yearn-apy/index.html#for-vaults-that-use-non-curve-assets",
    "title": "How Yearn calculates estimated returns (APY)",
    "section": "For vaults that use non-curve assets:",
    "text": "For vaults that use non-curve assets:\n\n\n\nnew APY display for non crv vault\n\n\n\nGross APR: Vault total APR before deducted fees\nNet APY: Vault current APY\nWeekly APY: Based on the last 7 days harvests\nMonthly APY: Based on the last 30 days harvests\nInception APY: Based on all harvests since the vault exists"
  },
  {
    "objectID": "posts/yearn-apy/index.html#for-vaults-that-use-curve-assets",
    "href": "posts/yearn-apy/index.html#for-vaults-that-use-curve-assets",
    "title": "How Yearn calculates estimated returns (APY)",
    "section": "For vaults that use curve assets:",
    "text": "For vaults that use curve assets:\n\n\n\nnew APY display for crv vault\n\n\n\nPool APY: APY from the fee of curve swaps on that pool, half goes here half to veCRV holders.\nBonus Rewards APR: Rewards added generally by the owner of that token. IE frax curve pools also gives you frax. The APY if you sold the token at current price.\nBase CRV APR: The APR of the minimum amount of crv emissions this curve pool gets. (if you do not have staked veCRV for boost you get this + pool apy + the bonus rewards.\nBoost: Boost how much of the multiplier you get from staked veCRV\nConvex APR: Current convex apr if you deposit to convex\nGross APR: Vault total APR before deducted fees\nNet APY: Vault current APY\n\nThanks to everyone that gave feedback on this feature and also to the teams that quickly acted on it. We hope the new display better reflects the reality of a vault’s gains!\nProducer: Worms, Reviewers: x48, *Vany, *Dark Ghosty"
  },
  {
    "objectID": "posts/yearn-apy/index.html#made-in-yearn.finance",
    "href": "posts/yearn-apy/index.html#made-in-yearn.finance",
    "title": "How Yearn calculates estimated returns (APY)",
    "section": "Made in yearn.finance",
    "text": "Made in yearn.finance"
  },
  {
    "objectID": "posts/stable-diffusion-guide/index.html",
    "href": "posts/stable-diffusion-guide/index.html",
    "title": "Conjuring images with Stable Diffusion",
    "section": "",
    "text": "“medieval book of spells open and glowing, placed on a stone pedestal, magical setting” Steps: 150, Sampler: Euler, CFG scale: 9, Seed: 2670068578, Size: 768x512\nStable Diffusion (SD) is a new open-source tool that allows anyone to generate images using AI pre-trained by the nice folks at Stability.ai. You can use any image you make on it commercially as long as you link to its license. Be aware that some images might not be able to be used because of patents, for example, if you generate an image of Apple’s logo it doesn’t mean you can use it as your brand.\nTechnically, stable diffusion describes itself as: “A latent text-to-image diffusion model”:\nVery roughly stable diffusion contains a text decoder that knows how to interpret text input and represent it as data for an image generator. You can read more about how this works in this illustrated guide."
  },
  {
    "objectID": "posts/stable-diffusion-guide/index.html#set-up-and-run-local-sd-user-interface",
    "href": "posts/stable-diffusion-guide/index.html#set-up-and-run-local-sd-user-interface",
    "title": "Conjuring images with Stable Diffusion",
    "section": "Set up and run local SD + User Interface",
    "text": "Set up and run local SD + User Interface\nThere are many ways to set up and run SD, but after using some my favorite UI is this one:\n\nhttps://github.com/AUTOMATIC1111/stable-diffusion-webui\n\nSo go ahead to their installation section and follow the steps to install and run it. It will require installing python, downloading the repo, and running the “webui-user” script to install and run everything needed. When done copy and paste the link provided by the script output into your browser:\n &gt; # You can also use DreamStudio instead of the local setup in case you can’t run it, but it will not have the same scripts used by the local UI in the later parts of this article."
  },
  {
    "objectID": "posts/stable-diffusion-guide/index.html#core-tools-text-to-image-and-image-to-image",
    "href": "posts/stable-diffusion-guide/index.html#core-tools-text-to-image-and-image-to-image",
    "title": "Conjuring images with Stable Diffusion",
    "section": "Core tools: text-to-image and image-to-image",
    "text": "Core tools: text-to-image and image-to-image\n\ntxt2img\nText-to-Image is a very good starting point when you want just to pump out some images from a prompt idea. Opening the UI will take you straight to txt2img:\n\n\n\nOpen the link provided by the previous step in the browser to see the UI\n\n\nThis is where we can start from scratch with only text. Let’s understand the parameters provided:\n1) Prompt: a phrase that will direct the image generation process.\n2) Steps: the number of times the diffusion process will happen.\n3) Sampler: different ways of diffusing the image.\n4) Size: initial image resolution, needs beefy GPU to increase.\n5) Modifiers: “restore faces” helps fix faces, “tiling” generates seamless tiles (amazing for games and 3d modeling), “highres fix” helps create images when initial size is much higher than 512x512.\n6) Batch Count: number of images to generate.\n7) CFG Scale: “A Cfg Scale value of 0 will give you a random image based on the seed, whereas a Cfg Scale of 20 (the maximum on SD) will give you the closest match to your prompt that the model can produce.” (source)\n8) Seed: A number, when set “-1” will be randomized. You can think of:\nresult = prompt + seed + sampler + steps + cfg_scale\nThe seed plays a huge part in this formula, so if you like an image and want to reproduce it you will need all the above data.\n9) Scripts: enables prompt matrix and X/Y plot (which we’ll use later)\nHere is an example generation from txt2img:\n\n\n\n“oil painting of a happy kitten” Steps: 50, Sampler: PLMS, CFG scale: 7, Seed: 3482179995, Size: 512x512\n\n\nOnce you find an image you like you can already use it, but you can also:\n\nsend it to “img2img” to create more versions similar to this one.\nsend it to “extras” to upscale to a higher resolution.\n\n\n\nimg2img\nContains most txt2img parameters and some more:\n\nImage is the initial image to be used for the diffusion process.\nSamplers are different from txt2img, some overlap but others are exclusive to one another (for example there is no PLMS in img2img).\nDenoising Strenght, when increased, will allow img2img to deviate further from the initial image.\n\nHere is an example of img2img running on top of one of the txt2img outputs from the last example:\n\n\n\n“oil painting of a happy kitten” Steps: 50, Sampler: Euler a, CFG scale: 7, Seed: 3482179995, Size: 512x512, Denoising strength: 0.75\n\n\nA fun factor is that we can change the prompt too, so let’s try a new prompt with the same configs and initial image and change the kitten for a dog:\n\n\n\n“oil painting of a happy dog” Steps: 50, Sampler: Euler a, CFG scale: 7, Seed: 3482179995, Size: 512x512, Denoising strength: 0.75\n\n\nThere are no limits to where you can get mixing txt2img, img2img, and different prompts. Let’s dive deeper into prompts and techniques for tweaking configs so we can expand even further the boundaries of what we can do with SD"
  },
  {
    "objectID": "posts/stable-diffusion-guide/index.html#prompts-basics-beyond",
    "href": "posts/stable-diffusion-guide/index.html#prompts-basics-beyond",
    "title": "Conjuring images with Stable Diffusion",
    "section": "Prompts: basics & beyond",
    "text": "Prompts: basics & beyond\nThe prompt is the most humane input of everything we provide to SD to make an image. There is not much ready-to-consume science behind crafting prompts, but there are tons of people experimenting and writing about their findings. I started small by typing whatever came to mind, then evolved by dissecting prompts of cool images I found at repositories linked below.\nPeople that know about photography and art history are in for a treat, the more you know about art (artists, styles) and photography naming conventions (“golden hour”, framing names) the more you will be able to pump out precise images of what you want.\nTo compose a prompt, you don’t need to add all of the below, and word order might vary depending on preference, but I think this list sums up what you can think of to improve prompt preciseness. It’s not a rigid framework and you should fiddle around to find what works best for you:\n\nSubject (person, cat, dog, pizza)\nEnvironment (beach, stadium, park)\nFraming (overview shot, close-up shot)\nLightning (morning lights, at night)\nArt Style (oil painting, vector art, 3d render)\nArtist Style (van gogh, picasso, andy warhol)\nDetails (4k, unreal engine, intricate details)\n\nFor example, I will generate an image with only a “Subject” in txt2img and add each of the above in order on the same seed and configs so we can see how the words are affecting the image generation:\n\ncat\n\n\n\nSteps: 50, Sampler: PLMS, CFG scale: 7, Seed: 2620801971, Size: 512x512 (all other images below have the same config)\n\n\n\n\ncat in a beach\n\n\n\noverview shot of a cat in a beach\n\n\n\noverview shot of a cat in a beach at night\n\n\n\noverview shot of a cat in a beach at night, acrylic painting\n\n\n\noverview shot of a cat in a beach at night, acrylic painting by andy warhol\n\n\n\noverview shot of a cat in a beach at night, acrylic painting by andy warhol, intricate details\n\n\n\nRead more about SD and prompts\n\nList of awesome SD resources\nSD prompt resources\nDALL-E prompt book\nSD scientific paper"
  },
  {
    "objectID": "posts/stable-diffusion-guide/index.html#dissecting-prompts-with-prompt-matrix",
    "href": "posts/stable-diffusion-guide/index.html#dissecting-prompts-with-prompt-matrix",
    "title": "Conjuring images with Stable Diffusion",
    "section": "Dissecting prompts with “prompt matrix”",
    "text": "Dissecting prompts with “prompt matrix”\nWe can create matrixes that visually dissect for us what is happening in a prompt, ina. the process is much similar to the above one but automated. I find this especially useful to clean and remove words that aren’t adding anything to the final result, and also to understand what composes a beautiful public prompt. Head to lexica.art or your preferred prompt repository and find one you like:\n &gt; delirium, chaotic storm of liquid smoke, stylized beauty portrait of natalia portman, by petros afshar, ross tran, tom whalen, peter mohrbacher, artgerm, shattered glass, bubbly underwater scenery, radiant light &gt; Steps: 50, Sampler: DDIM, CFG scale: 10, Seed: 3231029621, Size: 512x640\nThese configs should get close to the website results:\n\nNow let’s use the prompt matrix script that allows us to breakdown this prompt into many parts and it will show us how the image looks like for every possible combination:\n\nOriginal Prompt\n\ndelirium, chaotic storm of liquid smoke, stylized beauty portrait of natalia portman, by petros afshar, ross tran, tom whalen, peter mohrbacher, artgerm, shattered glass, bubbly underwater scenery, radiant light\n\n\n\nPrompt Broken down into matrix\n\ndelirium|chaotic storm of liquid smoke|stylized beauty portrait of natalia portman|by petros afshar, ross tran, tom whalen, peter mohrbacher, artgerm| shattered glass|bubbly underwater scenery|radiant light\n\nWhen you enable the prompt matrix script you can add “|” as a break so it knows how to build the matrix.\n\nWhen using this script. “Batch Count” will be ignored. Here is a matrix using the same seed as the first image from the previous batch (You will find it complete at the bottom-right here):\n\n\n\ndelirium|chaotic storm of liquid smoke|stylized beauty portrait of natalia portman|by petros afshar, ross tran, tom whalen, peter mohrbacher, artgerm| shattered glass|bubbly underwater scenery|radiant light\n\n\nThis feature allows you to select one image from the matrix and then look at the prompt that made it. The grey strikes text means that part has been omitted. The first image (top-left) is just the first part of the prompt before the first “|” (in this case, “delirium”). I use this a lot with my prompts to find out what words are influencing the final result and how."
  },
  {
    "objectID": "posts/stable-diffusion-guide/index.html#fine-tuning-configs-with-xy-plots",
    "href": "posts/stable-diffusion-guide/index.html#fine-tuning-configs-with-xy-plots",
    "title": "Conjuring images with Stable Diffusion",
    "section": "Fine-tuning configs with “X/Y plots”",
    "text": "Fine-tuning configs with “X/Y plots”\nThe X/Y plot script will also create a matrix but we can decide what the X (horizontal) and Y (vertical) axes are:\n\nThis script is extremely useful for finding out the best sampler, CFG scale, and step count for what you want to do. I will run the above configs for the same prompt and seed from the previous example. Unlike in the prompt matrix, “Batch Count” does work here so set it to 1 if you don’t want it to take too long to generate:\n\nYou can make X/Y Plots with any variables, not just these 2, so have fun finding the config that makes the cooler images for your desired prompt! I find this script extremely useful to figure out sampler, steps, and CFG scale for a prompt."
  },
  {
    "objectID": "posts/stable-diffusion-guide/index.html#upscaling",
    "href": "posts/stable-diffusion-guide/index.html#upscaling",
    "title": "Conjuring images with Stable Diffusion",
    "section": "Upscaling:",
    "text": "Upscaling:\nIn the “Extras” tab we can find the upscalers:\n\nAgain, this is something you will experiment with depending on what you want. I often like to use “SwinIR” on both upscale boxes, but in this example I preferred “ESRGAN” results:\n\n\n\nno upscale\n\n\n\n\n\nSwinIR_4x upscale\n\n\n\n\n\nESRGAN 4x upscale\n\n\nBoth upscale 4x resolution, so the image went from 512x512 to 2048x2048. You can repeat the process and upscale it repeatedly, but I haven’t experimented much with doing this."
  },
  {
    "objectID": "posts/stable-diffusion-guide/index.html#post-production",
    "href": "posts/stable-diffusion-guide/index.html#post-production",
    "title": "Conjuring images with Stable Diffusion",
    "section": "Post-Production",
    "text": "Post-Production\nIf you have basic photoshop skills you can post-produce images to remove weird unwanted watermarks/signatures resemblances and also apply extra design on top of it. I’ve been using this for my latest articles, here are some examples:\n\n\n\noriginal yearn.finance logo (where I work at!) designed by a person\n\n\n\n\n\nimg2img version of the logo (prompt: “demon”)\n\n\n\n\n\nfinal banner for the article using the font taken from the presskit\n\n\nIn the above example we can see how img2img is very powerful in achieving some form while retaining the old one. But there is much more that could be done:\n\n\n\n“wildwest exploration blue compass” (made in Midjourney txt2img, not SD)\n\n\n\n\n\nphotoshopped text + yearn logo\n\n\nAnother example from scratch with SD:\n\n\n\ntxt2img “saint holding circular blue token with vibrant neon outline, dark background, top artstation”\n\n\n\n\n\nimg2img “saint holding circular blue token with vibrant neon outline, dark background, top artstation”\n\n\n\n\n\ntop pick\n\n\n\n\n\nphotoshop yearn logo added in"
  },
  {
    "objectID": "posts/stable-diffusion-guide/index.html#final-words",
    "href": "posts/stable-diffusion-guide/index.html#final-words",
    "title": "Conjuring images with Stable Diffusion",
    "section": "Final Words",
    "text": "Final Words\nIts been 8 months since I wrote an article on how to make images with open-source AI tools and since then the rise o Stable Diffusion, Midjourney, and DALL-E has been exponential and unstoppable.\n\nSD is open source and people are doing amazing things with it, like plugging it into 3d render pipelines and video post-production.\nMidjourney pricing and UI are very accessible. It produces beautiful results with small prompts, remaster uses SD for even more stunning results.\nDALL-E outpainting is incredible, you can merge/extend existing artwork. More expensive than the rest, but worth the try.\n\nI’m very excited about the future of this tech. Whenever I feel like we had another significant advancement I’ll be sure to make another article! If you like this type of content follow me on Twitter where I often post random images and guides for weird and beautiful tech.\n\n\n\n“cowboy riding into the sunset, cyberpunk landscape, unreal engine render, vibrant lights” Steps: 50, Sampler: DDIM, CFG scale: 10, Seed: 987765270, Size: 1024x512, High Res. Fix Denoising strength: 0.7, Up: SwinIR_4x"
  },
  {
    "objectID": "posts/yearn-defi-risks/index.html",
    "href": "posts/yearn-defi-risks/index.html",
    "title": "Measuring risk for DeFi yield strategies",
    "section": "",
    "text": "DeFi investments are like the wild west: Learn how to use your gun and ride your horse. Otherwise, you are dead! As yield-generation options across the ecosystem mature, some places are explicitly more dangerous than others. However, as veterans trailed and survived, they left tools for newer adventurers to explore DeFi with and avoid known dangers.\nYearn assess DeFi strategy risks by examining each investment strategy for key dimensions. In this article we will break down how retail investors can use some of the same tools that the pros use to measure DeFi risks, showcasing the Yearn DeFi Strategy Risk Score Framework."
  },
  {
    "objectID": "posts/yearn-defi-risks/index.html#yearn-and-risk",
    "href": "posts/yearn-defi-risks/index.html#yearn-and-risk",
    "title": "Measuring risk for DeFi yield strategies",
    "section": "Yearn and Risk",
    "text": "Yearn and Risk\nThe yearn.watch/risk page is a very nice way to see all available strategies and their risks. There is also an extra dimension of likelihood, so the final assessment takes into account both risk score and the chance that those risks are exploited:\n\n\n\nhorizontal axis is likelihood, vertical axis is risk score\n\n\nI hope this case study has elucidated the whys and hows Yearn views risk. The modern wild west is out there, and you can go as far as you are well-equipped and informed! Have fun and travel safely!"
  },
  {
    "objectID": "posts/yearn-subgraphs/index.html",
    "href": "posts/yearn-subgraphs/index.html",
    "title": "Subgraphs explained: Yearning for data",
    "section": "",
    "text": "A Subgraph is an open-source API that allows developers and users to query blockchain data using well-known database query languages. In this article, we will explore a Yearn Ethereum Subgraph and learn how to ask it for data (a.k.a. query it). This knowledge is extremely important for web3 developers, but any blockchain user may also leverage information found on public subgraphs for their interests.\nLuckily for us, today we have technology like The Graph which provides a human-friendly interface for communicating with subgraphs. It’s worth noting that The Graph is a decentralized protocol that maintains an ecosystem of incentives for many roles that co-exist to make the infrastructure keep on going\n\n\n\nThings you can do at The Graph\n\n\nBefore diving into a subgraph let’s be clear about why we need one and what it solves: The blockchain is an ever-growing chain of blocks and each block has a small piece of information inside it, when we need to query for something that needs data from many blocks we need to read through them all and aggregate the data, turns out this can get super complex and hard to maintain (to read more on this search for “Event Sourcing”). We already have solutions to deal with querying data called “Databases“, so the subgraph will maintain a Database that we can query for data in a much more human-friendly way to do it.\n\n\n\nOverview of what the subgraph solves\n\n\nNow that we know what a subgraph is, let’s interact with one: Head to the Yearn Vaults V2 Subgraph Mainnet at The Graph and you should be greeted with this screen:\n\n\n\nhttps://api.thegraph.com/subgraphs/name/rareweasel/yearn-vaults-v2-subgraph-mainnet/graphql\n\n\nOn the top left corner click “Explorer“ to open the left-side tab with many entities that we can query for:\n\n\n\nOpen explorer tab\n\n\nNow you are free to click on the entities on the left-side bar to add them to your query. When you click on one of them it will expand all the fields you can query for.\nLet’s start by clicking on “vaults“ and selecting a few fields to query for. I’ve marked with red arrows everything I clicked. Clicking will automatically fill up the “query“ field for you and you can press the “Play“ button to run the query and see the results on the right. In this example, we listed all Yearn vaults for their addresses and deposit tokens:\n\n\n\nClick stuff and see what happens!\n\n\nThe result that came out in a format called JSON. This format is a standard way to structure data in the web and there are tons of ways to consume and transform this data. For a more readable table-like view paste the result into an app like json2table:\n\n\n\nTable-like format for the query output at json2table.com\n\n\nWe can filter things and use any of the GraphQL features to make queries the way you want. The clickable interface helps a lot too by providing filters: all fields contain the following filters:\n\nFirst: Limits the total number of results in a query to the first X results\nOrderBy / OrderDirection: Helps you order the results the way you want\nSkip: Skip the first X results. For example, if you ask for the First 10 but Skip 10 you would get results from 11 to 20.\nWhere: Opens a list with all properties and you can filter for results that have specific properties you want\n\nLet’s fiddle with “Where“ a bit to query for only”Endorsed” vaults: Click the “where” filter in vaults:\n\nSelect the “classification” property inside “where” and choose the Endorsed field\n\nNow we only query for production vaults in our results:\n\nHere is another example query where we can see all harvests that happen inside vault strategies and how much they profited:\n\nThere are no limits to what you can do with the subgraph, in fact all recent yearn apps use it a lot since it makes for a much better developer experience and quicker solution for most problems that need data from the blockchain. I hope this walkthrough inspired you to dig deeper into what you can query for in subgraphs, and I recommend that you take a deeper look into GraphQL to learn all query tricks.\nFor programmers, you can use GraphQL in your favorite programming language and build web3 applications along with something like ethers-io (library to help sign transactions in the blockchain)."
  },
  {
    "objectID": "posts/yearn-yeth/index.html",
    "href": "posts/yearn-yeth/index.html",
    "title": "yETH: LSD Lobbying season is now open",
    "section": "",
    "text": "yETH gives users a way to hold a basket of various Ethereum Liquid Staking Tokens (LSDs) in a single token. Giving them access to the best yields while spreading their risk across multiple LSDs. We are now opening the bootstrapping phase to launch yETH!"
  },
  {
    "objectID": "posts/yearn-yeth/index.html#bootstrapping-whitelist-incentives-and-votes",
    "href": "posts/yearn-yeth/index.html#bootstrapping-whitelist-incentives-and-votes",
    "title": "yETH: LSD Lobbying season is now open",
    "section": "Bootstrapping: Whitelist, Incentives, and Votes",
    "text": "Bootstrapping: Whitelist, Incentives, and Votes\nThe bootstrapping consists of 3 phases:\n\nWhitelisting for LSD protocols\nDeposit and Incentives\nVoting"
  },
  {
    "objectID": "posts/yearn-yeth/index.html#whitelisting-period-for-lsd-protocols",
    "href": "posts/yearn-yeth/index.html#whitelisting-period-for-lsd-protocols",
    "title": "yETH: LSD Lobbying season is now open",
    "section": "Whitelisting Period for LSD Protocols",
    "text": "Whitelisting Period for LSD Protocols\nDuring the 3-week whitelisting period, LSD protocols interested in being included in yETH must pay a 1 ETH non-refundable fee, which turns into yield for st-yETH users. After paying the fee, protocols fill out a form with basic screening questions. Yearn reviews responses, but does not evaluate any merit of the LSD protocol beyond just looking for malicious submissions.\n\nJoin the Whitelist"
  },
  {
    "objectID": "posts/yearn-yeth/index.html#deposit-and-incentives",
    "href": "posts/yearn-yeth/index.html#deposit-and-incentives",
    "title": "yETH: LSD Lobbying season is now open",
    "section": "Deposit and Incentives",
    "text": "Deposit and Incentives\nThe 2-week deposit phase starts concurrently with the final week of the whitelisting period. During this time, aspiring yETH users can deposit their ETH into the Bootstrapper contract, receiving 1:1 st-yETH tokens in return. The bootstraped st-yETH tokens are locked for 16 weeks.\nThe 2-week incentive phase starts concurrently with the final week of the whitelisting period. st-yETH token holders can now create incentives for other st-yETH holders to vote for or against specific assets to be included in the yETH pool in the next phase.\n\nDeposit ETH\nIncentivize a LSD protocol"
  },
  {
    "objectID": "posts/yearn-yeth/index.html#voting",
    "href": "posts/yearn-yeth/index.html#voting",
    "title": "yETH: LSD Lobbying season is now open",
    "section": "Voting",
    "text": "Voting\nWhen incentive phase ends, voting period starts.\nUsers who have locked their ETH during the deposit phase will receive st-yETH tokens, granting them voting rights to decide which LSD protocols should be included in the yETH pool. As a user, you’ll have the power to choose the best protocols based on their incentives, performance, and other factors.\nIncentives posted by protocols who are chosen go to ALL st-yETH holders, no matter who they voted for. This avoids a “winner takes it all” scenario and there is no wrong way to vote. The top 5 LSDs with the most votes are included by the end of voting, and if an outcome doesn’t occur for an incentive poster, they can claim their incentives back.\n\nVote on LSDs"
  },
  {
    "objectID": "posts/yearn-yeth/index.html#post-bootstrapping-what-happens-next",
    "href": "posts/yearn-yeth/index.html#post-bootstrapping-what-happens-next",
    "title": "yETH: LSD Lobbying season is now open",
    "section": "Post-Bootstrapping: What Happens Next?",
    "text": "Post-Bootstrapping: What Happens Next?\nOnce the bootstrapping phase ends, Yearn begins launch preparations and purchases LSD tokens with the deposited ETH according to the final weight of the vote. When launched, users can deposit LSDs or ETH into the pool and receive yETH tokens while having the ability to stake their yETH as Staked yETH (st-yETH) to earn compounded yield according to the earnings of LSDs and other protocol rewards."
  },
  {
    "objectID": "posts/yearn-yeth/index.html#why-should-lsd-protocols-participate-in-bootstraping",
    "href": "posts/yearn-yeth/index.html#why-should-lsd-protocols-participate-in-bootstraping",
    "title": "yETH: LSD Lobbying season is now open",
    "section": "Why should LSD protocols participate in bootstraping?",
    "text": "Why should LSD protocols participate in bootstraping?\n\nThe pool buys LSD tokens with all the deposited ETH, creating buy pressure and demand for your LSD token.\nIf you get included in the bootstrapping phase, the max starting weight is 45%, if you get added later, you start at 1% so it’s a much steeper hill to climb.\nIf you participate in depositing ETH, you end up controlling the direction of the protocol, so you can influence future weights, future parameter settings, and whether or not a competing LSD protocol gets included."
  },
  {
    "objectID": "posts/yearn-yeth/index.html#join-the-lobbying-create-or-receive-incentives",
    "href": "posts/yearn-yeth/index.html#join-the-lobbying-create-or-receive-incentives",
    "title": "yETH: LSD Lobbying season is now open",
    "section": "Join the Lobbying: Create or Receive Incentives",
    "text": "Join the Lobbying: Create or Receive Incentives\nWe invite you to participate in this exciting on-chain lobbying fiesta by depositing ETH during the bootstrapping phase and voting for your favorite LSD protocols!\n\nJoin the Whitelist\nDeposit ETH\nIncentivize a LSD protocol\nVote on LSDs\n\nBootstrapping and yETH specifications can be found in the governance proposal: YIP-72: Launch yETH"
  },
  {
    "objectID": "posts/yearn-answer-public/index.html",
    "href": "posts/yearn-answer-public/index.html",
    "title": "Answering the public questions about Yearn Finance",
    "section": "",
    "text": "This article is not financial advice, it simply reflects my opinions around the Yearn protocol, always do your own research before investing in anything."
  },
  {
    "objectID": "posts/yearn-answer-public/index.html#what-is-yearn-finance",
    "href": "posts/yearn-answer-public/index.html#what-is-yearn-finance",
    "title": "Answering the public questions about Yearn Finance",
    "section": "What is yearn finance?",
    "text": "What is yearn finance?\nTaken straight from Yearn documentation:\n\nYearn Finance is DeFi’s premier yield aggregator. Giving individuals, DAOs and other protocols a way to deposit digital assets and receive yield.\n\n\nThe protocol is maintained by various independent developers and is governed by YFI holders.\n\nBut if you are not used to crypto, some words above might be scary so let’s break down what the above means:\n\nYearn Finance is a product that exist in Decentralized Finance. It is a yield aggregator: “yield” means “profitable returns from an investment”, and “aggregator” means it aggregates many sources of investment (that generate yield).\n\n\nYearn not only aggregates them but also screens every possible yield opportunity through a a risk framework, and only lets users deposit in ones that pass quality criteria.\n\n\nThe Yearn Finance protocol is maintained by different people, most anonymous, and the group coordinates itself through a crypto coin called YFI, which is used as voting power in an open forum that can suggest new directions for Yearn products.\n\n\nYearn Website: https://yearn.fi\nYearn Documentation: https://docs.yearn.finance/\n\nThis question is more deeply answered by the article “Yearn Finance Explained”: https://medium.com/iearn/yearn-finance-explained-what-are-vaults-and-strategies-9697056043"
  },
  {
    "objectID": "posts/yearn-answer-public/index.html#is-yearn-finance-dead",
    "href": "posts/yearn-answer-public/index.html#is-yearn-finance-dead",
    "title": "Answering the public questions about Yearn Finance",
    "section": "Is Yearn Finance dead?",
    "text": "Is Yearn Finance dead?\nNo! Yearn is more alive than ever!\nThe best place to follow yearn activity is through twitter: https://twitter.com/yearnfi (watch out for impostors! this is the only yearn account!)\nYou can also reach out to active community members through Discord: https://discord.gg/yearn\nIn 2023 alone Yearn has delivered many products like veYFI, yCRV, yPRISMA, yETH, and the new version of the core product Yearn Vaults V3. Developer chats are active and building is non-stop!\nThe rumor that “yearn is dead” comes from the departure of the initial developer (Andre Cronje) from the team. Yearn is a big team today with dozens of people maintaining many parts of the yearn ecosystem, and Andre set out to work in other projects like Fantom and Keep3r.\nThe Yearn creative lead draper made a recent thread with all the videos we made for new releases for 2023, I highly recommend watching them! It’s fun!"
  },
  {
    "objectID": "posts/yearn-answer-public/index.html#is-yearn-finance-a-good-investment",
    "href": "posts/yearn-answer-public/index.html#is-yearn-finance-a-good-investment",
    "title": "Answering the public questions about Yearn Finance",
    "section": "Is Yearn Finance a good investment?",
    "text": "Is Yearn Finance a good investment?\nIt depends! The issue with this question is that there are many ways take part in the yearn ecosystem, each has its pros and cons:\n\nYou can deposit into one of the hundreds of existing yearn vaults.\nYou can lock YFI tokens and receive veYFI, which allows you to boost vault rewards and vote on where bought-back YFI will be sent.\nYou can participate in ETH staking through yETH\n\nFor Yearn Vaults you can see how risk is assessed for each yield strategy in the yearn risk framework documentation: https://docs.yearn.finance/resources/risks/protocol-risks"
  },
  {
    "objectID": "posts/yearn-answer-public/index.html#is-yearn-finance-safe",
    "href": "posts/yearn-answer-public/index.html#is-yearn-finance-safe",
    "title": "Answering the public questions about Yearn Finance",
    "section": "Is Yearn Finance safe?",
    "text": "Is Yearn Finance safe?\nIt depends! There are many factors to consider because it depends on what you want to do and your risk tolerance. Depositing in Yearn Vaults or any other Yearn product contains layers of risks from different smart contracts.\nYearn does a diligence process in all yield strategies, and the people involved in this process are some of the best in the space to deal with Ethereum smart contract security, but security is an incredibly complex issue in DeFi due to the immutable nature of transactions and smart contracts (hacks can’t be undone).\nThe core product from Yearn (yVaults) exists to abstract away all the security diligence process. The user can deposit in strategies that are vetted and optimized by simple deposit/withdrawing, which is a much more friendly interface than interacting with all DeFi protocols needed, but ultimately by doing this abstraction Yearn also introduces another set of risks, which is why users should always do their own research before interacting with DeFi protocols. Refer to Yearn documentation for a deep dive into risks:\n\nProtocol Risks: https://docs.yearn.finance/resources/risks/protocol-risks\nVaults Risks: https://docs.yearn.finance/resources/risks/vault-risks\nStrategy Risks: https://docs.yearn.finance/resources/risks/strategy-risks\nRisk Scores for vaults: https://docs.yearn.finance/resources/risks/risk-score"
  },
  {
    "objectID": "posts/yearn-answer-public/index.html#how-does-yearn-finance-work",
    "href": "posts/yearn-answer-public/index.html#how-does-yearn-finance-work",
    "title": "Answering the public questions about Yearn Finance",
    "section": "How does yearn finance work?",
    "text": "How does yearn finance work?\nYearn works through many pieces:\n\nYou can use yearn products at https://yearn.fi/\nActive developers use telegram groups to coordinate independent products, the biggest public group is https://t.me/yearnfinance\nThere is an open community discord where people can reach out for support: https://discord.gg/yearn\nThere is an official Yearn GitHub where product are developed/maintained: https://github.com/yearn\nYearn products are a series of contracts deployed across many blockchains, you can check live addresses here: https://docs.yearn.fi/getting-started/products/addresses\nThere is an open governance forum to propose things to be voted by veYFI holders: https://gov.yearn.fi/\nGovernance votes happen on snapshot: https://snapshot.org/#/veyfi.eth\nDocumentation is done at https://docs.yearn.finance/\n\nIf you are looking for how the core product of yearn “Yearn Vaults” work check the article “Yearn Finance Explained”: https://medium.com/iearn/yearn-finance-explained-what-are-vaults-and-strategies-9697056043"
  },
  {
    "objectID": "posts/yearn-answer-public/index.html#when-was-yearn-finance-launched",
    "href": "posts/yearn-answer-public/index.html#when-was-yearn-finance-launched",
    "title": "Answering the public questions about Yearn Finance",
    "section": "When was yearn finance launched?",
    "text": "When was yearn finance launched?\nAccording to one of the first posts made on Yearn Medium it was around 24th January 2020. The post was made on Feb 7 and says launch was 14 days ago:\n\n\n\nhttps://medium.com/iearn/iearn-finance-milestones-and-roadmap-27fe63830951 (one of the first posts in yearn medium)"
  },
  {
    "objectID": "posts/yearn-answer-public/index.html#why-is-yearn-finance-going-down-will-yearn-finance-go-up-again",
    "href": "posts/yearn-answer-public/index.html#why-is-yearn-finance-going-down-will-yearn-finance-go-up-again",
    "title": "Answering the public questions about Yearn Finance",
    "section": "Why is yearn finance going down? Will yearn finance go up again?",
    "text": "Why is yearn finance going down? Will yearn finance go up again?\nThis question is probably related to the price action of YFI, which contains many factors, not limited to but including: the price of Bitcoin, the price of Ethereum, the sentiment of the crypto community about original DeFi protocols, the chance of the bet that EVM smart contracts being the future of finance, and a gazillion other factors that are not necessarily tied to just the quality of Yearn’s deliverables or team.\nThe team is actively maintaining the protocol and delivering great new products despite the YFI price action. Also, with the introduction of veYFI there is more to be done with YFI, like boosting vaults rewards."
  },
  {
    "objectID": "posts/yearn-answer-public/index.html#where-to-stake-yearn-finance",
    "href": "posts/yearn-answer-public/index.html#where-to-stake-yearn-finance",
    "title": "Answering the public questions about Yearn Finance",
    "section": "Where to stake yearn finance?",
    "text": "Where to stake yearn finance?\nI interpret this question as “where to stake YFI to earn more YFI” and the answer is veYFI!\n\nveYFI website: https://yearn.fi/veyfi\nveYFI docs: https://docs.yearn.finance/contributing/governance/veyfi"
  },
  {
    "objectID": "posts/yearn-answer-public/index.html#who-owns-yearn-finance",
    "href": "posts/yearn-answer-public/index.html#who-owns-yearn-finance",
    "title": "Answering the public questions about Yearn Finance",
    "section": "Who owns yearn finance?",
    "text": "Who owns yearn finance?\nYearn is a DAO (Decentralized Autonomous Organization) which means governance is fragmented between many parts.\nYFI holders and the yearn teams plays a crucial role in ownership: YFI holders can vote for anything to happen on governance forums, but it would be extremely slow and inefficient, so yearn teams have autonomy to do changes but anything that can generate a greater impact the ecosystem is often put through vote in the governance forum. Here are some examples of how ownership is fragmented:\n\nLet’s say there is a bug on the website that makes a button vanish. Anyone can open a PR with a fix, it’s all open source, the frontend team from yearn will either fix themselves or accept a community fix. YFI holders do not need to be involved.\nBut if we want to change voting power dynamics and move from YFI to veYFI, we have to involve YFI holders in this decision and then put it to a vote.\n\nOwnership in a DAO is fragmented and Yearn tries to give autonomy to teams for execution and autonomy for YFI holders for strategy.\n\n\n\nTrust is one of yearn values, taken from https://yearn.love/"
  },
  {
    "objectID": "posts/llm-writing/index.html",
    "href": "posts/llm-writing/index.html",
    "title": "The many use cases for Large Language Models in tech writing",
    "section": "",
    "text": "robot friend helping you from inside a large language model\nI’ve been exploring GPT-3, a robot made originally to predict the next text in a document, for my daily flows of writing documentation around code, and I wanted to register here the coolest cases for tech writing (yet!):\nI personally don’t care if LLMs (Large Language Models) don’t generate good results 100% of the time. You will have to roll it again and again and experiment with prompts, but for brainstorming and content bootstrapping it is already much better than any other tool we had.\nBefore diving into GPT prompts and use cases a small warning: today the text produced by LLMs is hardly usable in production without any sort of human post-production. I personally use more tools than just GPT, but it has proven to be an ally for my job. My entire flow is open here:\nI recommend passing GPT text through Grammarly to remove all typos and useless words. Also, you will hardly be able to make GPT generate a huge text that is useful, it is recommended to generate a macrostructure of sections first and then generate each individual part separately. For large text/code you will have to come up with creative ways to stay within the GPT API token limit (about 3k words on input+output per request)\nI made this article because I’m contemplating all these use cases in an Open Source UI I’m making for people that need to either generate docs or understand undocumented code. So while I work on the UI that will take a bit longer to be ready I want to open the process and prompts so anyone can iterate them, I would love to hear back from anyone experimenting with LLMs + tech writing!"
  },
  {
    "objectID": "posts/llm-writing/index.html#use-cases",
    "href": "posts/llm-writing/index.html#use-cases",
    "title": "The many use cases for Large Language Models in tech writing",
    "section": "Use cases",
    "text": "Use cases\nYou can try it yourself by using GPT on:\n\nChatGPT: free, but no API and many downtimes\nGPT-3 Playground: paid, but best option for manual exploration\nGPT-3 API: paid, but best option for automations\n\n\nReview text for copy\nWhen I first started DocuDroid I wanted it to be simple automation on GitHub that reviewed text being added. I worked out fine, but I realized there are some issues with this flow:\n\nAsking GPT to review for copy errors would sometimes return that there are no errors in text with obvious errors\nGPT can take bias in a random reviewing direction, so if you specify the bias it helps with consistency\n\nturns out that reviewing text can be done from many points of view, so I incorporated this in DocuDroid as “reviewers personalities”. Each text is sent to many reviewers, and you get back many times of different reviews, plus this helps catch the obvious error that would sometimes pass by making only 1 request since each reviewer has a separate request for their review.\nA quick example of 2 different personalities reviewing the same text\n\nMy prompt to review a text is the one below, and for each personality, you send a separate request: (the new line at the end is intended)\n######## REVIEW INSTRUCTIONS\n\npersonality text description goes here\n\n########  TEXT TO REVIEW, IGNORE LINKS AND CODE BLOCKS, PRESENTED AS A GIT DIFF, FOCUS ON THE ADDITIONS\n\ntext to be reviewed goes here\n\n########  YOUR REVIEW, AS A - MARKDOWN LIST\nHere are some example personality texts for review instructions, I generated them using GPT too!\n😐 Balanced Ben: &gt; You are a professional copywriter with a balanced and objective approach. Review the following text for both strengths and weaknesses, and provide a list of specific suggestions for improvement. The goal is to produce a well-rounded and high-quality document, so consider all aspects of the text in your review.\n📜 Linear Linda &gt; You are a professional copywriter who values smooth transitions and a logical progression of ideas. Review the following text for opportunities to improve the top-to-bottom linearization, and provide a list of specific suggestions for improvement. The goal is to create a clear and rational flow of ideas from one concept to the next, so consider ways to improve the transition between ideas.\nYou can find an example with many personalities reviewing it here\n\n\n\nDocudroid Showcase: https://github.com/MarcoWorms/DocuDroid/pull/110#issuecomment-1361372106\n\n\nYou can also just ask GPT to fix an existing text:\npaste text here\n\n######## remake the above fixing any copy errors\nHere is an example improvement made like the above: https://github.com/yearn/yearn-devdocs/pull/298/files\n\n\nReview a GIT DIFF\nMuch like reviewing a text, you can use it to review a diff (file representing the difference between 2 files). Since a diff contains all lines removed and added in a Github Pull Request it can make for interesting reviews taking into context what was removed, this is especially useful for code reviews.\n\nCheckout ChatGPT Action project that sends the full diff to ChatGPT for review: https://github.com/kxxt/chatgpt-action\n\n\n\n\nShowcase: https://github.com/kxxt/chatgpt-action/pull/12#issuecomment-1340991620\n\n\n\n\nGenerate diagrams powered by MermaidJS\nI am a huge fan of drawing diagrams and flows for people to understand concepts, I want DocuDroid to give you a handy UI for generating diagrams and previewing in real-time, but today you can generate on the GPT playground and use HackMD for preview. To do that paste the mermaid code in HackMD using this block:\n```mermaid\nCODE_GOES_HERE\n```\nThere are a couple of ways you can do GPT make the diagrams:\n\nJust ask for a diagram with no examples at all\nSend it a text/code and ask for a diagram of it\n\nThe most important thing is asking it to somehow “Output as code for a MermaidJS diagram”\n\n\n\nA finite state machine behavior for a NPC that stands idle and attacks if player is in range. Output as code for a MermaidJS diagram:\n\n\n\nThe above was an example that did not send initial code or text and relied on GPT internal knowledge, but you can also do it for your own text/code:\n######## Explain briefly what your code/text does here or just remove this line\n\ntext or code goes here\n\n######## The following is hackmd MermaidJS code for a diagram explaining the above:\nHere is an example I just did:\n######## The following is a smart contract template for creating a new yield strategy at Yearn Finance:\n\npasted a huge code here that is a template to make a strategy at yearn, taken from here: https://raw.githubusercontent.com/yearn/brownie-strategy-mix/master/contracts/Strategy.sol\n\n######## The following is hackmd MermaidJS code for a diagram explaining the above:\n\n\n\npasting huge code + asking for diagram\n\n\n\n\n\nthis example output is not very useful but just to showcase that you can try it\n\n\n\n\nDocument existing code\nJust like generating MermaidJS diagrams you can ask it to kickstart the actual documentation for existing code. This is extremely useful if you don’t know how to read the code because GPT is very capable of dealing with existing code and will linearize for you a story of exactly what happens step-by-step.\n######## The following is a piece of code that does EXPLAIN_HERE_USEFUL_CONTEXT\n\npaste code here\n\n######## Write technical documentation that explains the above code funcionality, usage, and examples\nI tested this flow and it has helped me a lot to generate docs for a task I wanted to do last week. Basically, I had a new piece of code that Yearn was gonna deploy and needed documentation, so I pasted the contract’s code + readme on the template above and asked it to generate docs.\nI will update this part with the production links when it’s live, but here is an impressive part GPT made almost by itself I just had to pass it on Grammarly to improve the text. This is WAY clearer than reading the code IMO to get a quick grasp of what’s going on, even if I can’t guarantee all details are right it helps me get closer to understanding it overall.\n\n\n\nGenerate complex Markdown structures (ie: Tables)\nMaking manual Markdown tables is one of the most awful experiences ever for a writer, LLMs are a godsend here because they are very consistent in getting this right and it’s a very flexible feature since you can ask it to structure the table however you like. For example, I will blatantly steal the GPT-3 default “parse unstructured data” example and make it output a markdown table to be previewed in HackMD\npaste text here\n\n######### a Markdown table of the text above EXPLAIN_DETAILS_HERE\n\n\n\n\npreview on HackMD\n\n\n\n\nSummarize text\nI’ve used this more to learn than to generate content, it’s useful to grasp the macro concepts of a huge wall of text before diving into it. This can actually go very far because you can not only summarize text but also mold the output form like “summarize for a tweet” for something short or “summarize like a bible passage” for something fun\npaste text here\n\n######## Summarize the above text for a tweet\nWith this exact flow, I came up with this test project where I summarized crypto-related news as if it were biblical passages in the size of tweets. there is a lot you can do with the prompt here, experiment around!\n\n\n\nFind alternative words (synonyms, antonyms)\nSometimes you want to avoid repeating words, or you want to find one that can sound better. LLMs are your ally, there are useful google websites, but things like GPT can go beyond and understand the context you want to use it.\nHere is an example where I pasted text from Yearn’s documentation and asked it for suggestions to replace a word, then I made a second request asking it to pick one and explain why:\n &gt; # Have fun writing in the age of the machines!"
  },
  {
    "objectID": "posts/yearn-ygenius/index.html",
    "href": "posts/yearn-ygenius/index.html",
    "title": "yGenius: Chat with Yearn!",
    "section": "",
    "text": "I am releasing an experimental preview and code for yGenius: a GPT-powered bot that indexes the Yearn Ecosystem knowledge so you can query it with a universal chat interface.\nIn this article, I will explain how to connect your own knowledge base to GPT using the gpt_index library and also explore the trade-offs between different indexing methods. The main reason I wanted to build this at Yearn is that we have a lot of knowledge spread around, and I believe LLMs can help provide a unified interface so we can consume and iterate on all written content in our ecosystem."
  },
  {
    "objectID": "posts/yearn-ygenius/index.html#gpt-limitations-and-indexing-solution",
    "href": "posts/yearn-ygenius/index.html#gpt-limitations-and-indexing-solution",
    "title": "yGenius: Chat with Yearn!",
    "section": "GPT limitations and indexing solution",
    "text": "GPT limitations and indexing solution\nGPT-3 currently supports about 16,000 characters in one request. This counts for both input and output, and if you want to ask a question that requires many documents for GPT to consume and answer, you will likely hit this limit.\nLuckily for us, some awesome people are working on a library called gpt_index. This powerful tool allows us to index documents, and this index can be used in conjunction with GPT to enrich queries with relevant information.\nSo I implemented the index and fed it our knowledge:\n\nYearn Blog Articles\nYearn Smart Contracts Code\nYearn Official Documentation\nYearn Discord Support Channel History\nAll relevant Yearn data we can find (vaults TVL, APY, etc)"
  },
  {
    "objectID": "posts/yearn-ygenius/index.html#creating-a-simple-index-out-of-all-your-knowledge",
    "href": "posts/yearn-ygenius/index.html#creating-a-simple-index-out-of-all-your-knowledge",
    "title": "yGenius: Chat with Yearn!",
    "section": "Creating a simple index out of all your knowledge",
    "text": "Creating a simple index out of all your knowledge\nTo replicate yGenius and make a simple bot that can answer questions based on a body of documents, you need to have a basic Python setup and knowledge:\n\nMake sure you have Python and pip installed. You’ll also need an OpenAI API Key (here).\nInstall gpt_index: pip install gpt-index\nCreate a folder for your new project, such as “my-bot-app”.\nCreate a data folder inside “my-bot-app” where you can dump all documents you have about your ecosystem; here is ours for example.\nCreate a main.py script inside “my-bot-app” with this code:\n\nimport os\nos.environ[\"OPENAI_API_KEY\"] = 'YOUR_OPENAI_API_KEY'\n# Don't forget to replace the above API Key!!\n# Link to generate one: https://platform.openai.com/account/api-keys\n\nfrom gpt_index import GPTSimpleVectorIndex, SimpleDirectoryReader\n\n# Loads the 'data' folder with all files inside it\ndocuments = SimpleDirectoryReader('data', recursive=True).load_data()\n\n# Creates a SimpleVector Index\nindex = GPTSimpleVectorIndex(documents)\n\n# Queries the index with prompt\nindex.query(\"what is yearn?\")\n\n# #####################################\n\n# You might want to save the index on the disk because\n# it takes too long to build one from scratch!\n\n# Use the functions below to save/load:\n\n# save to disk\nindex.save_to_disk('index.json')\n\n# load from disk\nindex = GPTSimpleVectorIndex.load_from_disk('index.json')\nWith 6 lines of code, your index is ready and you have made a query on it! If you are proficient with Python, you can improve the above script so that it saves the index when it is built, so you’re able to load it every time you run the app. Creating the index is slow, and for non-vector indexes, it can be costly too! OpenAI API charges per number of words, and expensive methods to build indexes will send more and larger requests."
  },
  {
    "objectID": "posts/yearn-ygenius/index.html#different-types-of-indexes-and-their-trade-offs",
    "href": "posts/yearn-ygenius/index.html#different-types-of-indexes-and-their-trade-offs",
    "title": "yGenius: Chat with Yearn!",
    "section": "Different types of indexes and their trade-offs",
    "text": "Different types of indexes and their trade-offs\nFor the example above, I used GPTSimpleVectorIndex, which is a “Vector Store Index”. There are many other indexes you can use, and depending on your query, it might make sense to change them. Here are the links to the official docs for each index type:\n\nVector Store Index\nList Index\nKeyword Table Index\nTree Index\n\nLet’s go deeper into Vector Stores and List Indexes:"
  },
  {
    "objectID": "posts/yearn-ygenius/index.html#vector-store-index",
    "href": "posts/yearn-ygenius/index.html#vector-store-index",
    "title": "yGenius: Chat with Yearn!",
    "section": "Vector Store Index",
    "text": "Vector Store Index\nWhen you query a Vector Store Index:\n\nThe user query is sent to OpenAI for embedding.\nThis embedding is used to search the locally stored data for which part of the vector index might have relevant information to answer the question.\nThen, the user query is again sent to OpenAI, but this time with the relevant pieces of information that hopefully compose a better answer instead of just asking GPT without any context.\n\nVector Stores are cheap to use and great for making a question/answer service! This is what I use in this first yGenius release."
  },
  {
    "objectID": "posts/yearn-ygenius/index.html#list-index",
    "href": "posts/yearn-ygenius/index.html#list-index",
    "title": "yGenius: Chat with Yearn!",
    "section": "List Index",
    "text": "List Index\nThe list index is better if you need ALL the text contained in the index to create an answer. In the vector, we only send relevant parts to OpenAI for building a result, but for a list index, we will send the whole chunk of text contained in the index to OpenAI to refine an answer.\nWhen you query a list index:\n\nLet’s say you have 1 million characters of text and GPT API can only handle 10,000 at a time (leaving 6,000 as space to build your answer). You would need 100 chunks of 10,000 characters each to be able to send everything to OpenAI.\nSo GPT index sends the user query plus the first chunk to OpenAI for an answer.\nThen, it sends the user query plus the current answer plus the second chunk plus an instruction like Try to refine the current answer with this chunk of text.\nThen it will repeat the above for every single index chunk, refining the answer with all of them until there are no more chunks to help create an answer.\n\nList Indexes are very expensive to query, but they can achieve awesome tasks like creating a complete summary for a huge body of text, a task that Vector Stores would not be able to achieve."
  },
  {
    "objectID": "posts/yearn-ygenius/index.html#composing-indexes-for-smarter-answers",
    "href": "posts/yearn-ygenius/index.html#composing-indexes-for-smarter-answers",
    "title": "yGenius: Chat with Yearn!",
    "section": "Composing indexes for smarter answers",
    "text": "Composing indexes for smarter answers\nIf there is a concept that has melted my mind (and wallet) it is “Index Composability”. You are also able to compose indexes in a graph where you can connect any type of index as a child of another one. Also, we can give summaries for each index so when a query arrives the bot will be able to better search the composed index for the relevant pieces of an answer.\nWhen composing indexes, there is a potential increase in query cost since each index has its own cost trade-offs, but the quality of answers is likely to increase as you have structured the documents making the bot more efficient at parsing through them. At the moment, I have not found a way to use composable indexes in the first release due to costs, even when only using Vector Store Indexes.\nFor example, here is how the gpt_index docs make a ListIndex containing many TreeIndexes and use GPT to autogenerate a summary:\n# create many indexes\nindex1 = GPTTreeIndex(doc1)\nindex2 = GPTTreeIndex(doc2)\nindex3 = GPTTreeIndex(doc3)\n\n# set summaries for an index using GPT\nsummary = index1.query(\n   \"What is a summary of this document?\", mode=\"summarize\"\n)\nindex1.set_text(str(summary))\n# repeat above for all other indexes you want to set summaries for\n\n# create parent index that contains all others\nlist_index = GPTListIndex([index1, index2, index3])\n\n# wrap it all into a graph so we can query them all at once\ngraph = ComposableGraph.build_from_index(list_index)\n\n# execute query\nresponse = graph.query(\"Where did the author grow up?\")"
  },
  {
    "objectID": "posts/yearn-ygenius/index.html#making-the-bot-have-chat-history-context",
    "href": "posts/yearn-ygenius/index.html#making-the-bot-have-chat-history-context",
    "title": "yGenius: Chat with Yearn!",
    "section": "Making the bot have chat history context",
    "text": "Making the bot have chat history context\nAnother important part for a bot is that it should know where the current conversation state is, so it feels like chatting with something because you can reference older messages like:\n\nAnon: what is yswaps?\nyGenius: it’s […]\nAnon: give me more details\nyGenius: sure, yswaps […]\n\nOn the second message, Anon didn’t have to tell yGenius the service he wanted more details for, since it’s aware that previously they were chatting about “yswaps”.\nDoing this is actually quite simple. In every user query, I send the history along with the query to the backend. Here is how I query the index.\n######## Chat history with anon for context\n\nCHAT_HISTORY_WITH_USER\n\n######## Current interactions with anon as yGenius (GPT-powered service fed with indexed data from Yearn Finance to help users explore Yearn ecosystem)\n\nQuestion: USER_CURRENT_QUESTION\nAnswer:\nChange CHAT_HISTORY_WITH_USER and USER_CURRENT_QUESTION with variables that come from the frontend query. The last query in our yswaps example would look like this:\n######## Chat history with anon for context\n\nQuestion: what is yswaps?\nAnswer: it's [...]\n\n######## Current interactions with anon as yGenius (GPT-powered service fed with indexed data from Yearn Finance to help users explore Yearn ecosystem)\n\nQuestion: give me more details\nAnswer:\nYou have to take care of juggling the maximum size for history and input. At yGenius, I leave 4K characters for input and 4K characters for history."
  },
  {
    "objectID": "posts/yearn-ygenius/index.html#update-after-release-of-gpt-4-128k",
    "href": "posts/yearn-ygenius/index.html#update-after-release-of-gpt-4-128k",
    "title": "yGenius: Chat with Yearn!",
    "section": "Update after release of GPT-4 128k",
    "text": "Update after release of GPT-4 128k\nThis article and ygenius are still useful, but there are new ways to build AI bots that might not need vector stores anymore. I have done a new structure for the genius bot that uses only gpt4 128k tokens API, you can check it here: https://github.com/ApeWorX/apegenius"
  },
  {
    "objectID": "posts/yearn-ygenius/index.html#credits",
    "href": "posts/yearn-ygenius/index.html#credits",
    "title": "yGenius: Chat with Yearn!",
    "section": "Credits",
    "text": "Credits\n\nThanks a lot Poma for helping me navigate the indexing stuff!\nI initially started looking for indexing stuff after this futurekarol post.\nThanks jerryjliu for building gpt_index + all contributors improving it!\nAnd thanks to the awesome people of Yearn that always helps with test, review, and overcoming technical blockers.\n\n\n\n\nyGenius says: “Hey anon I noticed you reached the end of the article, thanks for reading it!”"
  },
  {
    "objectID": "posts/js-render-engine/index.html",
    "href": "posts/js-render-engine/index.html",
    "title": "Criando seu próprio render engine em JS com Single Source of Truth",
    "section": "",
    "text": "Nesse artigo nós criaremos um “micro react-redux” usando apenas o que o browser tem a nos oferecer. Vamos criar um objeto que conterá todo o estado da nossa aplicação (e entender o que é estado), depois vamos responder às alterações no estado, refletindo as mudanças no HTML."
  },
  {
    "objectID": "posts/js-render-engine/index.html#boilerplate",
    "href": "posts/js-render-engine/index.html#boilerplate",
    "title": "Criando seu próprio render engine em JS com Single Source of Truth",
    "section": "Boilerplate",
    "text": "Boilerplate\nVamos começar criando um html para podermos renderizar tudo que fizermos nele. Crie uma pasta nova para nosso projeto e adicione um arquivo index.html\n\nPor que criamos uma div com id “root”? Na verdade o id pode ter qualquer nome, apenas precisamos dele para pegarmos no nosso js depois. Por falar nisso, crie agora um arquivo main.js vazio, no mesmo diretório do index.html. Daqui pra frente nós apenas editaremos o main.js"
  },
  {
    "objectID": "posts/js-render-engine/index.html#single-source-of-truth",
    "href": "posts/js-render-engine/index.html#single-source-of-truth",
    "title": "Criando seu próprio render engine em JS com Single Source of Truth",
    "section": "Single Source of Truth",
    "text": "Single Source of Truth\nNossa engine respeitará o conceito de Single Source of Truth. Não elaborarei essa técnica ou seus prós e contras, resumidamente isso significa que todas as informações suscetíveis a mudança da nossa aplicação ficarão apenas em um lugar, qual chamaremos de “state”, pois representa todo o estado do nosso programa, e sempre que precisarmos dessa informação, pegaremos do “state”.\n\nNós apenas confiaremos no “state” para nos dar informações. Não confie em estranhos.\n\nNosso “state” ficará dentro de um lugar que chamaremos de “store”. Ela tem como responsabilidade guardar, alterar, e nos enviar o “state” sempre que precisarmos. Vamos colocar isso no nosso main.js:\n\n\nUsarei ES5 em todos os snippets para não causar confusão, no final do artigo colocarei o código completo usando ES2015 pois fica muito mais bonito :)\n\nAgora podemos testar nossa store colando essa função no console do chrome e brincando:\n    var store = createStore()\n    store.setState({a: 2})\n    store.getState() // =&gt; {a: 2}\nMas temos um problema! Nosso getState permite que a gente receba o objeto “state” que estava dentro da closure, e fazendo isso nós também podemos alterar ele. Para não fugir do escopo do artigo vamos criar uma regra: Não podemos usar o “getState” para alterar o “state”. Sempre usaremos o “setState” para isso."
  },
  {
    "objectID": "posts/js-render-engine/index.html#renderizando-o-state",
    "href": "posts/js-render-engine/index.html#renderizando-o-state",
    "title": "Criando seu próprio render engine em JS com Single Source of Truth",
    "section": "Renderizando o state",
    "text": "Renderizando o state\nAgora nós temos nossa “store” que cuida do nosso “state”. O próximo passo é criar uma função que recebe o “state” e renderiza ele no html como quisermos. Vamos escrever apenas essa função por enquanto sem se preocupar em integrar com a “store”:\n\nSua função “renderState” pode ser muito mais complexa e renderizar várias coisas que tivermos no state de maneira mirabolantes no html, mas por agora usaremos esse simples parágrafo apenas pra demonstração."
  },
  {
    "objectID": "posts/js-render-engine/index.html#ligando-a-store-com-o-renderstate",
    "href": "posts/js-render-engine/index.html#ligando-a-store-com-o-renderstate",
    "title": "Criando seu próprio render engine em JS com Single Source of Truth",
    "section": "Ligando a “store” com o “renderState”",
    "text": "Ligando a “store” com o “renderState”\nNesse ponto nosso main.js tem 2 funções: “createStore” e “renderState”. Agora nós faremos a ligação final da nossa engine: Toda vez que usarmos o “setState” da nossa “store” nós iremos chamar o “renderState” com nosso novo “state”. Vamos ver como isso ficará:\n\nA únicas coisas que adicionamos aqui foram as linhas 8, 10, e 18. Na linha 8 nós criamos “something”, que conterá o valor que usaremos no render. Na linha 10 nós renderizamos nosso state assim que ele for criado. Na linha 18 nós renderizaremos o “state” sempre que ele for alterado via “setState”. Agora vamos testar esse código adicionando as seguinte linhas (linha 23 para baixo), no main.js:\n\nPronto! Ao abrir o index.html no navegador você verá a mensagem “olá mundo” por um segundo e depois trocará para “adeus mundo”."
  },
  {
    "objectID": "posts/js-render-engine/index.html#mas-por-que-fizemos-tudo-isso",
    "href": "posts/js-render-engine/index.html#mas-por-que-fizemos-tudo-isso",
    "title": "Criando seu próprio render engine em JS com Single Source of Truth",
    "section": "Mas por que fizemos tudo isso?",
    "text": "Mas por que fizemos tudo isso?\nBom, agora você pode abstrair uma série de coisas desse código e ir deixando ele bacana. Dá pra colocar o seu “state” inicial dentro de uma função “initialState”, dá pra fazer a store receber o “renderState” como parâmetro, ou fazer o “setState” utilizar algum “merge” para não precisar enviar o estado inteiro sempre, entre muitas outras coisas. Eu fiz ele bem simples pois queria destacar algumas coisas:\n\nAo escrever a lógica principal do seu programa, você não deve se preocupar com a parte que renderiza ele pra você. Agora você pode alterar coisas do seu estado sem se preocupar em precisar avisar pra algum módulo que ele precisa renderizar seu programa.\nVocê poderá trabalhar com funções que, dentro delas, não alteram o seu state, apenas retornam um state novo. Isso trará maravilhas para a manutenção do seu código, e é um dos princípios da programação funcional. Recomendo ir atrás de como escrever código dessa maneira."
  },
  {
    "objectID": "posts/js-render-engine/index.html#lição-de-casa",
    "href": "posts/js-render-engine/index.html#lição-de-casa",
    "title": "Criando seu próprio render engine em JS com Single Source of Truth",
    "section": "Lição de casa",
    "text": "Lição de casa\nComo faço para criar um botão no html que altera o state? Tente resolver isso com seu código agora. A resposta (incompleta, porém quase pronta) está no link abaixo, mas recomendo tentar fazer sozinho.\nAqui está o exemplo utilizando ES2015 que eu havia prometido no início do post: https://github.com/MarcoWorms/oficina-redux/blob/master/main.js\nQuem precisar de ajuda pra verificar a resposta do desafio acima é só me mandar!\nQualquer dúvida, sugestão, ou crítica é só mandar nos comentários que a gente conversa. Abraços!"
  },
  {
    "objectID": "posts/yearn-partners/index.html",
    "href": "posts/yearn-partners/index.html",
    "title": "Yearn Partners: Building with yVaults",
    "section": "",
    "text": "#buidl\nYearn Vaults are built with open standards and YFI partners have made amazing applications on top of them in the past couple of years. This article showcases how other protocols have extended Yearn products, and we hope it inspires more experiments on top of YFI services!"
  },
  {
    "objectID": "posts/yearn-partners/index.html#example-cases",
    "href": "posts/yearn-partners/index.html#example-cases",
    "title": "Yearn Partners: Building with yVaults",
    "section": "Example cases",
    "text": "Example cases\nThe most common partnership cases are:\n\nUsing yVaults as collateral for lending/borrowing\nUsing yVaults to generate yield with user funds\n\nIn both cases, the partner is rewarded with performance fees taken from the vault’s overall profits, the more total volume that a partner contributes to a vault, the bigger share of the profit they receive. &gt; # In 2021, Yearn shared $2,793,161 with partners through the partnership program\nLet’s dive deeper now into our largest partner’s use cases:"
  },
  {
    "objectID": "posts/yearn-partners/index.html#yearn-abracadabra",
    "href": "posts/yearn-partners/index.html#yearn-abracadabra",
    "title": "Yearn Partners: Building with yVaults",
    "section": "Yearn + Abracadabra",
    "text": "Yearn + Abracadabra\nAbracadabra uses yVaults in their borrowing service: The key innovation is accepting interest-bearing tokens as collateral for borrowing, when repaid the user receives the collateral vault tokens back which includes the profits that were generated over the time locked.\nAn overview of Abracadabra would be:\n\nUser deposits wETH (wrapped Ethereum, same as Ethereum) into a yVault, receives yvWETH\nUser deposits yvWETH on Abracadaba as collateral, Abracadabra allows the user to mint a percentage of their collateral as a dollar stablecoin called Magic Internet Money (MIM)\n\n\n\n\nAbracadabra borrow interface\n\n\nWhen the user mints MIM the collateral deposited gets locked until the MIM borrowed is paid back\n\nIf the user pays back in time then the collateral is unlocked, if it’s a yVault this would mean your yVault tokens get returned with all profits gained while they were locked!\nIf the user doesn’t pay back in time, part of your collateral will be used to pay for the service (liquidated)\n\nIdeally, the interest generated by the vault token deposited will surpass the borrowing fee cost from Abracadabra"
  },
  {
    "objectID": "posts/yearn-partners/index.html#yearn-alchemix",
    "href": "posts/yearn-partners/index.html#yearn-alchemix",
    "title": "Yearn Partners: Building with yVaults",
    "section": "Yearn + Alchemix",
    "text": "Yearn + Alchemix\nAlchemix uses DAI (another dollar stablecoin, much like MIM) yVault in order to generate interest from user-deposited DAI and automatically repay loans.\n\nUser deposits DAI or ETH into Alchemix\nAlchemix deposits DAI or ETH into Yearn Vaults to generate yield for the user (and automatically repay the loan taken next step).\nUser can borrow up to 50% of deposited collateral as DAI and up to 25% as ETH as alUSD or alETH (can be converted to DAI or ETH in Alchemix ecosystem) which locks the deposited amount proportionally to how much was borrowed\nAs the deposited amount in step 2 generates yield it pays back for the user loan automatically and the user can then withdraw proportionally to the yield generated\n\nHere is the complete Alchemix ecosystem overview and how it integrates with Yearn:\n\n\n\nAlchemix ecosystem"
  },
  {
    "objectID": "posts/yearn-partners/index.html#yvaults-in-b2b",
    "href": "posts/yearn-partners/index.html#yvaults-in-b2b",
    "title": "Yearn Partners: Building with yVaults",
    "section": "yVaults in B2B",
    "text": "yVaults in B2B\nFor business use-cases the Yearn DAO truly makes a difference: it has the infrastructure to provide the best vault security in DeFi at the moment.\nPartners earn a share of fees based on the TVL they contribute to the vaults, you can read more about our profit-sharing model in the Yearn Partner Documentation. Partner wallet apps and earn sections implement yVaults and serve them to users in different forms:\nEarn Sections: pages that provide an alternative front for users to deposit their assets into yVaults. A good example of Earn section can be found on ShapeShift, their contract to deposit the assets at Yearn Vaults is open-source on GitHub\n\n\n\nShapeShift earn section\n\n\nWallets: partners provide Yearn yield generating options inside their ecosystem using yVaults. The SteakWallet is a good example of a wallet service that integrates with Yearn:\n\n\n\nSteakWallet interface"
  },
  {
    "objectID": "posts/yearn-partners/index.html#resources-to-become-a-partner",
    "href": "posts/yearn-partners/index.html#resources-to-become-a-partner",
    "title": "Yearn Partners: Building with yVaults",
    "section": "Resources to become a partner",
    "text": "Resources to become a partner\nIf you would like to build on top of our yVaults it’s recommended to:\n\nRead the Partnership Program documentation and follow-through the partner form\nFor technical guidelines check the Yearn Integration Methods documentation\n\nWe would love to hear from you about what you are building on top of $YFI protocols!\nProducers: Worms, Reviewers: Corn, Dark Ghosty\n\nMade in yearn.finance"
  }
]